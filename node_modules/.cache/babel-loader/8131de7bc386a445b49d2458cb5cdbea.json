{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BCard, BButton, BAvatar, BRow, BCol, BTable, BCardFooter, VBTooltip, VBModal, BBadge, BPagination } from 'bootstrap-vue';\nimport { percent, formatToken, StakingParameters, Validator, operatorAddressToAccount, consensusPubkeyToHexAddress, toDay, abbrMessage, abbrAddress } from '@/libs/utils';\nimport { keybase } from '@/libs/fetch';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport StakingAddressComponent from './StakingAddressComponent.vue';\nimport StakingCommissionComponent from './StakingCommissionComponent.vue';\nimport StakingRewardComponent from './StakingRewardComponent.vue';\nexport default {\n  components: {\n    BCard: BCard,\n    BButton: BButton,\n    BRow: BRow,\n    BCol: BCol,\n    BAvatar: BAvatar,\n    BCardFooter: BCardFooter,\n    BBadge: BBadge,\n    BPagination: BPagination,\n    BTable: BTable,\n    StakingAddressComponent: StakingAddressComponent,\n    StakingCommissionComponent: StakingCommissionComponent,\n    StakingRewardComponent: StakingRewardComponent,\n    OperationModal: OperationModal\n  },\n  directives: {\n    'b-modal': VBModal,\n    'b-tooltip': VBTooltip\n  },\n  data: function data() {\n    return {\n      commission: {\n        series: [90],\n        completed: 89,\n        inProgress: 64\n      },\n      selfDelegation: {\n        balance: {\n          amount: 0\n        }\n      },\n      latestHeight: 0,\n      accountAddress: '-',\n      hexAddress: '-',\n      stakingPool: {},\n      mintInflation: 0,\n      stakingParameter: new StakingParameters(),\n      validator: new Validator(),\n      address: null,\n      userData: {},\n      blocks: Array.from('0'.repeat(100)).map(function (x) {\n        return [Boolean(x), Number(x)];\n      }),\n      distribution: {},\n      transactions: {}\n    };\n  },\n  computed: {\n    txs: function txs() {\n      if (this.transactions.txs) {\n        return this.transactions.tx_responses.map(function (x) {\n          return {\n            height: Number(x.height),\n            txhash: x.txhash,\n            msgs: abbrMessage(x.tx.body.messages),\n            time: toDay(x.timestamp)\n          };\n        });\n      }\n\n      return [];\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$http.getStakingPool().then(function (res) {\n      _this.stakingPool = res;\n    });\n    this.$http.getStakingParameters().then(function (res) {\n      _this.stakingParameter = res;\n    });\n    this.$http.getMintingInflation().then(function (res) {\n      _this.mintInflation = res;\n    });\n    this.address = this.$route.params.address;\n    this.initial();\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    var elem = document.getElementById('txevent');\n    elem.addEventListener('txcompleted', function () {\n      _this2.initial();\n    });\n  },\n  methods: {\n    initial: function initial() {\n      var _this3 = this;\n\n      this.$http.getStakingValidator(this.address).then(function (data) {\n        _this3.validator = data;\n\n        _this3.processAddress(data.operator_address, data.consensus_pubkey);\n\n        _this3.$http.getTxsBySender(_this3.accountAddress).then(function (res) {\n          _this3.transactions = res;\n        });\n\n        var identity = data.description.identity;\n        keybase(identity).then(function (d) {\n          if (Array.isArray(d.them) && d.them.length > 0) {\n            _this3.$set(_this3.validator, 'avatar', d.them[0].pictures.primary.url);\n\n            _this3.$store.commit('cacheAvatar', {\n              identity: identity,\n              url: d.them[0].pictures.primary.url\n            });\n          }\n        });\n      });\n      this.$http.getValidatorDistribution(this.address).then(function (res) {\n        _this3.distribution = res;\n      });\n    },\n    pageload: function pageload(v) {\n      var _this4 = this;\n\n      this.$http.getTxsBySender(this.accountAddress, v).then(function (res) {\n        _this4.transactions = res;\n      });\n    },\n    formatHash: abbrAddress,\n    timeFormat: function timeFormat(value) {\n      return toDay(value);\n    },\n    percentFormat: function percentFormat(value) {\n      return percent(value);\n    },\n    processAddress: function processAddress(operAddress, consensusPubkey) {\n      var _this5 = this;\n\n      this.accountAddress = operatorAddressToAccount(operAddress);\n      this.hexAddress = consensusPubkeyToHexAddress(consensusPubkey);\n      this.$http.getStakingDelegatorDelegation(this.accountAddress, operAddress).then(function (d) {\n        _this5.selfDelegation = d;\n      });\n    },\n    tokenFormatter: function tokenFormatter(token) {\n      return formatToken({\n        amount: token,\n        denom: this.stakingParameter.bond_denom\n      });\n    },\n    apr: function apr(rate) {\n      return \"\".concat(percent((1 - rate) * this.mintInflation), \" %\");\n    },\n    fetch_status: function fetch_status(item, lastHeight) {\n      var _this6 = this;\n\n      return this.$http.getBlockByHeight(item[1]).then(function (res) {\n        if (item[1] !== lastHeight) {\n          var sigs = res.block.last_commit.signatures.find(function (s) {\n            return s.validator_address === _this6.hexAddress;\n          });\n\n          var block = _this6.blocks.find(function (b) {\n            return b[1] === item[1];\n          });\n\n          if (typeof block !== 'undefined') {\n            _this6.$set(block, 0, typeof sigs !== 'undefined');\n          }\n        }\n      });\n    },\n    fetch_latest: function fetch_latest() {\n      var _this7 = this;\n\n      this.$http.getLatestBlock().then(function (res) {\n        var sigs = res.block.last_commit.signatures.find(function (s) {\n          return s.validator_address === _this7.hexAddress;\n        });\n\n        var block = _this7.blocks.find(function (b) {\n          return b[1] === res.block.last_commit.height;\n        });\n\n        if (typeof block === 'undefined') {\n          // mei\n          // this.$set(block, 0, typeof sigs !== 'undefined')\n          if (_this7.blocks.length > 999) _this7.blocks.shift();\n\n          _this7.blocks.push([typeof sigs !== 'undefined', res.block.last_commit.height]);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["BCard","BButton","BAvatar","BRow","BCol","BTable","BCardFooter","VBTooltip","VBModal","BBadge","BPagination","percent","formatToken","StakingParameters","Validator","operatorAddressToAccount","consensusPubkeyToHexAddress","toDay","abbrMessage","abbrAddress","components","StakingAddressComponent","StakingCommissionComponent","StakingRewardComponent","OperationModal","directives","data","commission","series","completed","inProgress","selfDelegation","balance","amount","latestHeight","accountAddress","hexAddress","stakingPool","mintInflation","stakingParameter","validator","address","userData","blocks","distribution","transactions","computed","txs","height","txhash","msgs","time","created","mounted","elem","methods","initial","keybase","identity","url","pageload","v","formatHash","timeFormat","value","percentFormat","processAddress","operAddress","consensusPubkey","tokenFormatter","token","denom","apr","rate","fetch_status","item","lastHeight","fetch_latest"],"sourceRoot":"src/views","sources":["StakingValidator.vue"],"sourcesContent":["<template>\n  <div>\n    <b-card class=\"border-primary\">\n      <b-row>\n        <!-- User Info: Left col -->\n        <b-col\n          cols=\"21\"\n          xl=\"6\"\n          class=\"d-flex justify-content-between flex-column\"\n        >\n          <!-- User Avatar & Action Buttons -->\n          <div class=\"d-flex justify-content-start\">\n            <b-avatar\n              :src=\"validator.avatar\"\n              :variant=\"`light-primary`\"\n              size=\"104px\"\n              rounded\n            />\n            <div class=\"d-flex flex-column ml-1\">\n              <div class=\"mb-1\">\n                <h4 class=\"mb-0\">\n                  {{ validator.description.moniker }}\n                </h4>\n                <span class=\"card-text\">{{ validator.description.website }}</span>\n              </div>\n              <div class=\"d-flex flex-wrap\">\n                <b-button\n                  v-b-modal.operation-modal\n                  variant=\"primary\"\n                  class=\"mr-25 mb-25\"\n                >\n                  Delegate\n                </b-button>\n              </div>\n            </div>\n          </div>\n\n          <!-- User Stats -->\n          <div class=\"d-flex flex-wrap align-items-center mt-2\">\n            <div class=\"d-flex align-items-center mr-2\">\n              <b-avatar\n                variant=\"light-primary\"\n                rounded\n              >\n                <feather-icon\n                  icon=\"DiscIcon\"\n                  size=\"18\"\n                />\n              </b-avatar>\n              <div class=\"ml-1\">\n                <h5 class=\"mb-0\">\n                  {{ tokenFormatter(validator.tokens) }}\n                </h5>\n                <small>Bonded Tokens</small>\n              </div>\n            </div>\n\n            <div class=\"d-flex align-items-center mr-2\">\n              <b-avatar\n                variant=\"light-warning\"\n                rounded\n              >\n                <feather-icon\n                  icon=\"DivideCircleIcon\"\n                  size=\"18\"\n                />\n              </b-avatar>\n              <div class=\"ml-1\">\n                <h5 class=\"mb-0\">\n                  {{ percentFormat(selfDelegation.balance.amount/validator.tokens) }}%\n                </h5>\n                <small>Self Delegation</small>\n              </div>\n            </div>\n\n            <div\n              v-if=\"mintInflation\"\n              class=\"d-flex align-items-center\"\n            >\n              <b-avatar\n                variant=\"light-success\"\n                rounded\n              >\n                <feather-icon\n                  icon=\"TrendingUpIcon\"\n                  size=\"18\"\n                />\n              </b-avatar>\n              <div class=\"ml-1\">\n                <h5 class=\"mb-0\">\n                  {{ apr(validator.commission.rate) }}\n                </h5>\n                <small>Annual Profit</small>\n              </div>\n            </div>\n          </div>\n        </b-col>\n\n        <!-- Right Col: Table -->\n        <b-col\n          cols=\"12\"\n          xl=\"6\"\n        >\n          <table class=\"mt-2 mt-xl-0 w-100\">\n            <tr>\n              <th class=\"pb-50\">\n                <feather-icon\n                  icon=\"UserIcon\"\n                  class=\"mr-75\"\n                />\n                <span class=\"font-weight-bold\">Identity</span>\n              </th>\n              <td class=\"pb-50\">\n                <small>{{ validator.description.identity || '-' }}</small>\n              </td>\n            </tr>\n            <tr>\n              <th class=\"pb-50\">\n                <feather-icon\n                  icon=\"CheckIcon\"\n                  class=\"mr-75\"\n                />\n                <span class=\"font-weight-bold\">Status</span>\n              </th>\n              <td class=\"pb-50 text-capitalize\">\n                <b-badge\n                  v-if=\"validator.status===3\"\n                  variant=\"light-success\"\n                >\n                  Active\n                </b-badge>\n                <span v-else>{{ validator.status }}</span>\n              </td>\n            </tr>\n            <tr>\n              <th class=\"pb-50\">\n                <feather-icon\n                  icon=\"StarIcon\"\n                  class=\"mr-75\"\n                />\n                <span class=\"font-weight-bold\">Unbond Height</span>\n              </th>\n              <td class=\"pb-50 text-capitalize\">\n                {{ validator.unbonding_height || '-' }}\n              </td>\n            </tr>\n            <tr>\n              <th class=\"pb-50\">\n                <feather-icon\n                  icon=\"StarIcon\"\n                  class=\"mr-75\"\n                />\n                <span class=\"font-weight-bold\">Unbond Time</span>\n              </th>\n              <td class=\"pb-50 text-capitalize\">\n                {{ timeFormat(validator.unbonding_time) }}\n              </td>\n            </tr>\n            <tr>\n              <th class=\"pb-50\">\n                <feather-icon\n                  icon=\"FlagIcon\"\n                  class=\"mr-75\"\n                />\n                <span class=\"font-weight-bold\">Min Self Delegation</span>\n              </th>\n              <td class=\"pb-50\">\n                {{ parseFloat(validator.min_self_delegation) }}\n              </td>\n            </tr>\n            <tr>\n              <th class=\"pb-50\">\n                <feather-icon\n                  icon=\"AlertCircleIcon\"\n                  class=\"mr-75\"\n                />\n                <span class=\"font-weight-bold\">Jailed</span>\n              </th>\n              <td class=\"pb-50\">\n                {{ validator.jailed || '-' }}\n              </td>\n            </tr>\n            <tr>\n              <th>\n                <feather-icon\n                  icon=\"PhoneIcon\"\n                  class=\"mr-75\"\n                />\n                <span class=\"font-weight-bold\">Contact</span>\n              </th>\n              <td>\n                {{ validator.security_contact || '-' }}\n              </td>\n            </tr>\n          </table>\n        </b-col>\n      </b-row>\n\n      <b-card-footer\n        v-if=\"validator.description.details\"\n        class=\"mt-1 pl-0 pr-0\"\n      >\n        {{ validator.description.details || '' }}\n      </b-card-footer>\n    </b-card>\n    <!-- First Row -->\n    <template>\n      <b-row class=\"match-height\">\n        <b-col\n          lg=\"4\"\n          md=\"12\"\n        >\n          <staking-commission-component :data=\"validator.commission\" />\n        </b-col>\n        <b-col\n          lg=\"4\"\n          md=\"12\"\n        >\n          <staking-reward-component\n            :data=\"distribution\"\n            :validator=\"validator.operator_address\"\n            :address=\"accountAddress\"\n          />\n        </b-col>\n        <b-col\n          lg=\"4\"\n          md=\"12\"\n        >\n          <staking-address-component\n            :hex-address=\"hexAddress\"\n            :operator-address=\"validator.operator_address\"\n            :consensus-pubkey=\"validator.consensus_pubkey\"\n            :account-address=\"accountAddress\"\n          />\n        </b-col>\n      </b-row>\n      <b-row>\n        <b-col>\n          <b-card title=\"Transactions\">\n            <b-table\n              :items=\"txs\"\n              striped\n              hover\n              responsive=\"sm\"\n              stacked=\"sm\"\n            >\n              <template #cell(height)=\"data\">\n                <router-link :to=\"`../blocks/${data.item.height}`\">\n                  {{ data.item.height }}\n                </router-link>\n              </template>\n              <template #cell(txhash)=\"data\">\n                <router-link :to=\"`../tx/${data.item.txhash}`\">\n                  {{ formatHash(data.item.txhash) }}\n                </router-link>\n              </template>\n            </b-table>\n            <b-pagination\n              v-if=\"Number(transactions.page_total) > 1\"\n              :total-rows=\"transactions.total_count\"\n              :per-page=\"transactions.limit\"\n              :value=\"transactions.page_number\"\n              align=\"center\"\n              class=\"mt-1\"\n              @change=\"pageload\"\n            />\n          </b-card>\n        </b-col>\n      </b-row>\n    </template>\n    <operation-modal\n      type=\"Delegate\"\n      :validator-address=\"validator.operator_address\"\n    />\n    <div id=\"txevent\" />\n  </div>\n</template>\n\n<script>\nimport {\n  BCard, BButton, BAvatar, BRow, BCol, BTable, BCardFooter, VBTooltip, VBModal, BBadge, BPagination,\n} from 'bootstrap-vue'\n\nimport {\n  percent, formatToken, StakingParameters, Validator, operatorAddressToAccount, consensusPubkeyToHexAddress, toDay, abbrMessage, abbrAddress,\n} from '@/libs/utils'\nimport { keybase } from '@/libs/fetch'\nimport OperationModal from '@/views/components/OperationModal/index.vue'\nimport StakingAddressComponent from './StakingAddressComponent.vue'\nimport StakingCommissionComponent from './StakingCommissionComponent.vue'\nimport StakingRewardComponent from './StakingRewardComponent.vue'\n\nexport default {\n  components: {\n    BCard,\n    BButton,\n    BRow,\n    BCol,\n    BAvatar,\n    BCardFooter,\n    BBadge,\n    BPagination,\n    BTable,\n    StakingAddressComponent,\n    StakingCommissionComponent,\n    StakingRewardComponent,\n    OperationModal,\n  },\n  directives: {\n    'b-modal': VBModal,\n    'b-tooltip': VBTooltip,\n  },\n  data() {\n    return {\n      commission: {\n        series: [90],\n        completed: 89,\n        inProgress: 64,\n      },\n      selfDelegation: {\n        balance: { amount: 0 },\n      },\n      latestHeight: 0,\n      accountAddress: '-',\n      hexAddress: '-',\n      stakingPool: {},\n      mintInflation: 0,\n      stakingParameter: new StakingParameters(),\n      validator: new Validator(),\n      address: null,\n      userData: {},\n      blocks: Array.from('0'.repeat(100)).map(x => [Boolean(x), Number(x)]),\n      distribution: {},\n      transactions: {},\n    }\n  },\n  computed: {\n    txs() {\n      if (this.transactions.txs) {\n        return this.transactions.tx_responses.map(x => ({\n          height: Number(x.height),\n          txhash: x.txhash,\n          msgs: abbrMessage(x.tx.body.messages),\n          time: toDay(x.timestamp),\n        }))\n      }\n      return []\n    },\n  },\n  created() {\n    this.$http.getStakingPool().then(res => { this.stakingPool = res })\n    this.$http.getStakingParameters().then(res => { this.stakingParameter = res })\n    this.$http.getMintingInflation().then(res => { this.mintInflation = res })\n    this.address = this.$route.params.address\n    this.initial()\n  },\n  mounted() {\n    const elem = document.getElementById('txevent')\n    elem.addEventListener('txcompleted', () => {\n      this.initial()\n    })\n  },\n  methods: {\n    initial() {\n      this.$http.getStakingValidator(this.address).then(data => {\n        this.validator = data\n\n        this.processAddress(data.operator_address, data.consensus_pubkey)\n        this.$http.getTxsBySender(this.accountAddress).then(res => {\n          this.transactions = res\n        })\n\n        const { identity } = data.description\n        keybase(identity).then(d => {\n          if (Array.isArray(d.them) && d.them.length > 0) {\n            this.$set(this.validator, 'avatar', d.them[0].pictures.primary.url)\n            this.$store.commit('cacheAvatar', { identity, url: d.them[0].pictures.primary.url })\n          }\n        })\n      })\n      this.$http.getValidatorDistribution(this.address).then(res => { this.distribution = res })\n    },\n    pageload(v) {\n      this.$http.getTxsBySender(this.accountAddress, v).then(res => {\n        this.transactions = res\n      })\n    },\n    formatHash: abbrAddress,\n    timeFormat(value) {\n      return toDay(value)\n    },\n    percentFormat(value) {\n      return percent(value)\n    },\n    processAddress(operAddress, consensusPubkey) {\n      this.accountAddress = operatorAddressToAccount(operAddress)\n      this.hexAddress = consensusPubkeyToHexAddress(consensusPubkey)\n      this.$http.getStakingDelegatorDelegation(this.accountAddress, operAddress).then(d => {\n        this.selfDelegation = d\n      })\n    },\n    tokenFormatter(token) {\n      return formatToken({ amount: token, denom: this.stakingParameter.bond_denom })\n    },\n    apr(rate) {\n      return `${percent((1 - rate) * this.mintInflation)} %`\n    },\n    fetch_status(item, lastHeight) {\n      return this.$http.getBlockByHeight(item[1]).then(res => {\n        if (item[1] !== lastHeight) {\n          const sigs = res.block.last_commit.signatures.find(s => s.validator_address === this.hexAddress)\n          const block = this.blocks.find(b => b[1] === item[1])\n          if (typeof block !== 'undefined') {\n            this.$set(block, 0, typeof sigs !== 'undefined')\n          }\n        }\n      })\n    },\n    fetch_latest() {\n      this.$http.getLatestBlock().then(res => {\n        const sigs = res.block.last_commit.signatures.find(s => s.validator_address === this.hexAddress)\n        const block = this.blocks.find(b => b[1] === res.block.last_commit.height)\n        if (typeof block === 'undefined') { // mei\n          // this.$set(block, 0, typeof sigs !== 'undefined')\n          if (this.blocks.length > 999) this.blocks.shift()\n          this.blocks.push([typeof sigs !== 'undefined', res.block.last_commit.height])\n        }\n      })\n    },\n  },\n}\n</script>\n\n<style></style>\n"]},"metadata":{},"sourceType":"module"}