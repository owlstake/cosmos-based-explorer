{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BInputGroupAppend, BFormInput, BFormGroup, BFormSelect, BFormSelectOption, BFormText } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount, getUserCurrency, getUserCurrencySign } from '@/libs/utils';\nimport vSelect from 'vue-select';\nimport { coin } from '@cosmjs/amino';\nimport dayjs from 'dayjs';\nexport default {\n  name: 'TransforDialogue',\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BInputGroup: BInputGroup,\n    BInputGroupAppend: BInputGroupAppend,\n    BFormInput: BFormInput,\n    BFormGroup: BFormGroup,\n    BFormSelect: BFormSelect,\n    BFormText: BFormText,\n    BFormSelectOption: BFormSelectOption,\n    vSelect: vSelect,\n    ValidationProvider: ValidationProvider\n  },\n  props: {\n    address: {\n      type: String,\n      default: ''\n    },\n    balance: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      currency: getUserCurrency(),\n      currencySign: getUserCurrencySign(),\n      targetChainId: '',\n      token: '',\n      amount: null,\n      recipient: null,\n      destination: {},\n      channels: [],\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  computed: {\n    destinationOptions: function destinationOptions() {\n      if (!this.token && this.token === '') return [];\n      var options = this.channels.map(function (x) {\n        return {\n          port_id: x.port_id,\n          channel_id: x.channel_id,\n          label: \"\".concat(x.chain_id ? x.chain_id : '', \" \").concat(x.port_id, \"/\").concat(x.channel_id)\n        };\n      });\n\n      if (this.token.startsWith('ibc/')) {\n        var query = this.paths[this.token];\n        return query ? options.filter(function (x) {\n          return x.channel_id === query.channel_id;\n        }) : options;\n      }\n\n      return options;\n    },\n    msg: function msg() {\n      var timeout = dayjs().add(4, 'hour');\n      return [{\n        typeUrl: '/ibc.applications.transfer.v1.MsgTransfer',\n        value: {\n          sourcePort: this.destination.port_id,\n          sourceChannel: this.destination.channel_id,\n          token: coin(Number(getUnitAmount(this.amount, this.token)), this.token),\n          sender: this.address,\n          receiver: this.recipient,\n          timeoutTimestamp: String(timeout.utc().valueOf() * 1000000)\n        }\n      }];\n    },\n    balanceOptions: function balanceOptions() {\n      return this.setupBalance();\n    },\n    selectedChain: function selectedChain() {\n      return this.$store.state.chains.selected;\n    },\n    IBCDenom: function IBCDenom() {\n      return this.$store.state.chains.denoms;\n    },\n    paths: function paths() {\n      return this.$store.state.chains.ibcPaths;\n    },\n    valuation: function valuation() {\n      var amount = this.amount;\n      var d2 = this.printDenom();\n\n      if (amount && d2) {\n        var quote = this.$store.state.chains.quotes[d2];\n        var price = quote ? quote[this.currency] : 0;\n        return parseFloat((amount * price).toFixed(2));\n      }\n\n      return 0;\n    }\n  },\n  mounted: function mounted() {\n    this.$emit('update', {\n      modalTitle: 'IBC Transfer Tokens',\n      historyName: 'transfer'\n    });\n    this.setActionName();\n    this.loadData();\n  },\n  methods: {\n    loadData: function loadData() {\n      var _this = this;\n\n      this.destination = null;\n      this.channels = [];\n      this.token = '';\n      this.targetChainId = '';\n\n      if (this.address) {\n        this.$http.getIBCChannels(this.selectedChain, null).then(function (ret) {\n          var chans = ret.channels.filter(function (x) {\n            return x.state === 'STATE_OPEN';\n          }).map(function (x) {\n            return {\n              channel_id: x.channel_id,\n              port_id: x.port_id\n            };\n          });\n\n          _this.$set(_this, 'channels', chans);\n        });\n      }\n    },\n    setupBalance: function setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom;\n        return this.balance;\n      }\n\n      return [];\n    },\n    tokenChange: function tokenChange() {\n      // eslint-disable-next-line prefer-destructuring\n      this.destination = this.destinationOptions[0];\n      this.recipient = null;\n      this.setActionName();\n      this.onChannelChange();\n    },\n    setActionName: function setActionName() {\n      this.$emit('update', {\n        actionName: this.token.startsWith('ibc') ? 'Withdraw' : 'Deposit'\n      });\n    },\n    format: function format(v) {\n      return formatToken(v, this.IBCDenom, 6);\n    },\n    printDenom: function printDenom() {\n      return formatTokenDenom(this.IBCDenom[this.token] || this.token);\n    },\n    onChannelChange: function onChannelChange() {\n      var _this2 = this;\n\n      this.$http.getIBCChannelClientState(this.destination.channel_id, this.destination.port_id, this.selectedChain).then(function (cs) {\n        _this2.targetChainId = cs.identified_client_state.client_state.chain_id;\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsIA;AACA,SACAA,IADA,EACAC,IADA,EACAC,WADA,EACAC,iBADA,EACAC,UADA,EACAC,UADA,EACAC,WADA,EACAC,iBADA,EAEAC,SAFA,QAGA,eAHA;AAIA,SACAC,QADA,EACAC,KADA,EACAC,GADA,EACAC,OADA,EACAC,KADA,EACAC,OADA,EACAC,QADA,EACAC,GADA,EACAC,MADA,EACAC,SADA,EACAC,MADA,QAEA,cAFA;AAGA,SACAC,WADA,EACAC,gBADA,EACAC,aADA,EACAC,eADA,EACAC,mBADA,QAEA,cAFA;AAGA;AACA;AACA;AAEA;EACAC,wBADA;EAEAC;IACA1B,UADA;IAEAC,UAFA;IAGAC,wBAHA;IAIAC,oCAJA;IAKAC,sBALA;IAMAC,sBANA;IAOAC,wBAPA;IAQAE,oBARA;IASAD,oCATA;IAUAoB,gBAVA;IAYAC;EAZA,CAFA;EAgBAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,WADA;MAEAC;QAAA;MAAA;IAFA;EALA,CAhBA;EA0BAE,IA1BA,kBA0BA;IACA;MACAC,2BADA;MAEAC,mCAFA;MAGAC,iBAHA;MAIAC,SAJA;MAKAC,YALA;MAMAC,eANA;MAOAC,eAPA;MAQAC,YARA;MAUAjC,kBAVA;MAWAM,kBAXA;MAYAL,YAZA;MAaAM,QAbA;MAcAF,gBAdA;MAeAH,QAfA;MAgBAE,YAhBA;MAiBAD,gBAjBA;MAkBAK,cAlBA;MAmBAE,cAnBA;MAoBAD;IApBA;EAsBA,CAjDA;EAkDAyB;IACAC,kBADA,gCACA;MACA;MACA;QAAA;UAAAC;UAAAC;UAAAC;QAAA;MAAA;;MACA;QACA;QACA;UAAA;QAAA;MACA;;MACA;IACA,CATA;IAWAC,GAXA,iBAWA;MACA;MACA,QACA;QACAC,oDADA;QAEAC;UACAC,oCADA;UAEAC,0CAFA;UAGAd,uEAHA;UAIAe,oBAJA;UAKAC,wBALA;UAMAC;QANA;MAFA,CADA;IAaA,CA1BA;IA2BAC,cA3BA,4BA2BA;MACA;IACA,CA7BA;IA8BAC,aA9BA,2BA8BA;MACA;IACA,CAhCA;IAiCAC,QAjCA,sBAiCA;MACA;IACA,CAnCA;IAoCAC,KApCA,mBAoCA;MACA;IACA,CAtCA;IAuCAC,SAvCA,uBAuCA;MACA;MACA;;MACA;QACA;QACA;QACA;MACA;;MACA;IACA;EAhDA,CAlDA;EAoGAC,OApGA,qBAoGA;IACA;MACAC,iCADA;MAEAC;IAFA;IAIA;IACA;EACA,CA3GA;EA4GAC;IACAC,QADA,sBACA;MAAA;;MACA;MACA;MACA;MACA;;MACA;QACA;UACA;YAAA;UAAA;YAAA;cAAAnB;cAAAD;YAAA;UAAA;;UACA;QACA,CAHA;MAIA;IACA,CAZA;IAaAqB,YAbA,0BAaA;MACA;QACA;QACA;MACA;;MACA;IACA,CAnBA;IAoBAC,WApBA,yBAoBA;MACA;MACA;MACA;MACA;MACA;IACA,CA1BA;IA4BAC,aA5BA,2BA4BA;MACA;QACAC;MADA;IAGA,CAhCA;IAkCAC,MAlCA,kBAkCAC,CAlCA,EAkCA;MACA;IACA,CApCA;IAqCAC,UArCA,wBAqCA;MACA;IACA,CAvCA;IAwCAC,eAxCA,6BAwCA;MAAA;;MACA;QACA;MACA,CAFA;IAGA;EA5CA;AA5GA","names":["BRow","BCol","BInputGroup","BInputGroupAppend","BFormInput","BFormGroup","BFormSelect","BFormSelectOption","BFormText","required","email","url","between","alpha","integer","password","min","digits","alphaDash","length","formatToken","formatTokenDenom","getUnitAmount","getUserCurrency","getUserCurrencySign","name","components","vSelect","ValidationProvider","props","address","type","default","balance","data","currency","currencySign","targetChainId","token","amount","recipient","destination","channels","computed","destinationOptions","port_id","channel_id","label","msg","typeUrl","value","sourcePort","sourceChannel","sender","receiver","timeoutTimestamp","balanceOptions","selectedChain","IBCDenom","paths","valuation","mounted","modalTitle","historyName","methods","loadData","setupBalance","tokenChange","setActionName","actionName","format","v","printDenom","onChannelChange"],"sourceRoot":"src/views/components/OperationModal/components","sources":["IBCTransfer.vue"],"sourcesContent":["<template>\n  <div>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Sender\"\n          label-for=\"Account\"\n        >\n          <b-input-group class=\"mb-25\">\n            <b-form-input\n              :value=\"address\"\n              readonly\n            />\n          </b-input-group>\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Available Token\"\n          label-for=\"Token\"\n        >\n          <validation-provider\n            #default=\"{ errors }\"\n            rules=\"required\"\n            name=\"Token\"\n          >\n            <b-form-select\n              v-model=\"token\"\n              @change=\"tokenChange\"\n            >\n              <template #first>\n                <b-form-select-option\n                  value=\"\"\n                >\n                  -- Please select a token --\n                </b-form-select-option>\n              </template>\n              <b-form-select-option\n                v-for=\"item in balance\"\n                :key=\"item.denom\"\n                :value=\"item.denom\"\n              >\n                {{ format(item) }}\n              </b-form-select-option>\n            </b-form-select>\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Amount\"\n          label-for=\"Amount\"\n        >\n          <validation-provider\n            v-slot=\"{ errors }\"\n            rules=\"required|regex:^([0-9\\.]+)$\"\n            name=\"amount\"\n          >\n            <b-input-group class=\"mb-25\">\n              <b-form-input\n                id=\"Amount\"\n                v-model=\"amount\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Input a number\"\n                type=\"number\"\n              />\n              <b-input-group-append is-text>\n                {{ printDenom() }}\n              </b-input-group-append>\n            </b-input-group>\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n          <b-form-text>\n            ≈ <strong class=\"text-primary\">{{ currencySign }}{{ valuation }}</strong>\n          </b-form-text>\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          :label=\"`Destination: ${targetChainId}`\"\n          label-for=\"destination\"\n        >\n          <validation-provider\n            #default=\"{ errors }\"\n            rules=\"required\"\n            name=\"destination\"\n          >\n            <v-select\n              v-model=\"destination\"\n              name=\"destination\"\n              :options=\"destinationOptions\"\n              placeholder=\"Select a channel\"\n              @input=\"onChannelChange()\"\n            />\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Recipient\"\n          label-for=\"Recipient\"\n        >\n          <validation-provider\n            #default=\"{ errors }\"\n            rules=\"required\"\n            name=\"recipient\"\n          >\n            <b-input-group class=\"mb-25\">\n              <b-form-input\n                id=\"Recipient\"\n                v-model=\"recipient\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Input a destination address\"\n              />\n            </b-input-group>\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\nimport { ValidationProvider } from 'vee-validate'\nimport {\n  BRow, BCol, BInputGroup, BInputGroupAppend, BFormInput, BFormGroup, BFormSelect, BFormSelectOption,\n  BFormText,\n} from 'bootstrap-vue'\nimport {\n  required, email, url, between, alpha, integer, password, min, digits, alphaDash, length,\n} from '@validations'\nimport {\n  formatToken, formatTokenDenom, getUnitAmount, getUserCurrency, getUserCurrencySign,\n} from '@/libs/utils'\nimport vSelect from 'vue-select'\nimport { coin } from '@cosmjs/amino'\nimport dayjs from 'dayjs'\n\nexport default {\n  name: 'TransforDialogue',\n  components: {\n    BRow,\n    BCol,\n    BInputGroup,\n    BInputGroupAppend,\n    BFormInput,\n    BFormGroup,\n    BFormSelect,\n    BFormText,\n    BFormSelectOption,\n    vSelect,\n\n    ValidationProvider,\n  },\n  props: {\n    address: {\n      type: String,\n      default: '',\n    },\n    balance: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      currency: getUserCurrency(),\n      currencySign: getUserCurrencySign(),\n      targetChainId: '',\n      token: '',\n      amount: null,\n      recipient: null,\n      destination: {},\n      channels: [],\n\n      required,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash,\n    }\n  },\n  computed: {\n    destinationOptions() {\n      if (!this.token && this.token === '') return []\n      const options = this.channels.map(x => ({ port_id: x.port_id, channel_id: x.channel_id, label: `${x.chain_id ? x.chain_id : ''} ${x.port_id}/${x.channel_id}` }))\n      if (this.token.startsWith('ibc/')) {\n        const query = this.paths[this.token]\n        return query ? options.filter(x => x.channel_id === query.channel_id) : options\n      }\n      return options\n    },\n\n    msg() {\n      const timeout = dayjs().add(4, 'hour')\n      return [\n        {\n          typeUrl: '/ibc.applications.transfer.v1.MsgTransfer',\n          value: {\n            sourcePort: this.destination.port_id,\n            sourceChannel: this.destination.channel_id,\n            token: coin(Number(getUnitAmount(this.amount, this.token)), this.token),\n            sender: this.address,\n            receiver: this.recipient,\n            timeoutTimestamp: String(timeout.utc().valueOf() * 1000000),\n          },\n        },\n      ]\n    },\n    balanceOptions() {\n      return this.setupBalance()\n    },\n    selectedChain() {\n      return this.$store.state.chains.selected\n    },\n    IBCDenom() {\n      return this.$store.state.chains.denoms\n    },\n    paths() {\n      return this.$store.state.chains.ibcPaths\n    },\n    valuation() {\n      const { amount } = this\n      const d2 = this.printDenom()\n      if (amount && d2) {\n        const quote = this.$store.state.chains.quotes[d2]\n        const price = quote ? quote[this.currency] : 0\n        return parseFloat((amount * price).toFixed(2))\n      }\n      return 0\n    },\n  },\n  mounted() {\n    this.$emit('update', {\n      modalTitle: 'IBC Transfer Tokens',\n      historyName: 'transfer',\n    })\n    this.setActionName()\n    this.loadData()\n  },\n  methods: {\n    loadData() {\n      this.destination = null\n      this.channels = []\n      this.token = ''\n      this.targetChainId = ''\n      if (this.address) {\n        this.$http.getIBCChannels(this.selectedChain, null).then(ret => {\n          const chans = ret.channels.filter(x => x.state === 'STATE_OPEN').map(x => ({ channel_id: x.channel_id, port_id: x.port_id }))\n          this.$set(this, 'channels', chans)\n        })\n      }\n    },\n    setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom\n        return this.balance\n      }\n      return []\n    },\n    tokenChange() {\n      // eslint-disable-next-line prefer-destructuring\n      this.destination = this.destinationOptions[0]\n      this.recipient = null\n      this.setActionName()\n      this.onChannelChange()\n    },\n\n    setActionName() {\n      this.$emit('update', {\n        actionName: this.token.startsWith('ibc') ? 'Withdraw' : 'Deposit',\n      })\n    },\n\n    format(v) {\n      return formatToken(v, this.IBCDenom, 6)\n    },\n    printDenom() {\n      return formatTokenDenom(this.IBCDenom[this.token] || this.token)\n    },\n    onChannelChange() {\n      this.$http.getIBCChannelClientState(this.destination.channel_id, this.destination.port_id, this.selectedChain).then(cs => {\n        this.targetChainId = cs.identified_client_state.client_state.chain_id\n      })\n    },\n  },\n}\n</script>\n<style lang=\"scss\">\n@import '@core/scss/vue/libs/vue-select.scss';\n</style>\n"]},"metadata":{},"sourceType":"module"}