{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BRow, BCol, VBTooltip, BAlert } from 'bootstrap-vue';\nimport { consensusPubkeyToHexAddress, getCachedValidators, getLocalChains } from '@/libs/utils';\nimport UptimeMyChainBlocks from './UptimeMyChainBlocks.vue';\nexport default {\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BAlert: BAlert,\n    UptimeMyChainBlocks: UptimeMyChainBlocks\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n  data: function data() {\n    var _this = this;\n\n    var pinned = (localStorage.getItem('pinned') || '').split(',').map(function (x) {\n      return x.split('#');\n    }).reduce(function (a1, b) {\n      var a = a1;\n\n      if (a[b[0]]) {\n        a[b[0]].push(b[1]);\n      } else {\n        a[b[0]] = [b[1]];\n      }\n\n      return a;\n    }, {});\n\n    if (this.$route.query.validators) {\n      pinned = JSON.parse(this.$route.query.validators);\n    }\n\n    var chainVals = {};\n\n    if (pinned) {\n      var configs = getLocalChains();\n      Object.keys(pinned).forEach(function (x) {\n        var cached = JSON.parse(getCachedValidators(x));\n\n        if (cached) {\n          var validators = [];\n          pinned[x].forEach(function (address) {\n            var val = cached.find(function (v) {\n              return address === consensusPubkeyToHexAddress(v.consensus_pubkey);\n            });\n            if (val) validators.push({\n              address: address,\n              validator: val.description\n            });\n          });\n          chainVals[x] = validators;\n        } else {\n          _this.$http.getValidatorList(configs[x]).then(function (vals) {\n            var validators = [];\n            pinned[x].forEach(function (address) {\n              var val = vals.find(function (v) {\n                return address === consensusPubkeyToHexAddress(v.consensus_pubkey);\n              });\n              if (val) validators.push({\n                address: address,\n                validator: val.description\n              });\n            });\n\n            _this.$set(_this.chainVals, x, validators);\n          });\n        }\n      });\n    }\n\n    return {\n      chainVals: chainVals\n    };\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,SACAA,IADA,EACAC,IADA,EACAC,SADA,EACAC,MADA,QAEA,eAFA;AAGA;AACA;AAEA;EACAC;IACAJ,UADA;IAEAC,UAFA;IAGAE,cAHA;IAIAE;EAJA,CADA;EAOAC;IACA;EADA,CAPA;EAUAC,IAVA,kBAUA;IAAA;;IACA;MAAA;IAAA;MACA;;MACA;QACAC;MACA,CAFA,MAEA;QACAA;MACA;;MACA;IACA,CARA,EAQA,EARA;;IASA;MACAC;IACA;;IAEA;;IACA;MACA;MACAC;QACA;;QACA;UACA;UACAD;YACA;cAAA;YAAA;YACA;cAAAE;cAAAC;YAAA;UACA,CAHA;UAIAC;QACA,CAPA,MAOA;UACA;YACA;YACAJ;cACA;gBAAA;cAAA;cACA;gBAAAE;gBAAAC;cAAA;YACA,CAHA;;YAIA;UACA,CAPA;QAQA;MACA,CAnBA;IAoBA;;IAEA;MACAC;IADA;EAGA;AApDA","names":["BRow","BCol","VBTooltip","BAlert","components","UptimeMyChainBlocks","directives","data","a","pinned","Object","address","validator","chainVals"],"sourceRoot":"src/views","sources":["UptimeMyValidators.vue"],"sourcesContent":["<template>\n  <div class=\"container-md px-0\">\n    <b-row v-if=\"chainVals\">\n      <b-col\n        v-for=\"(x,index) in Object.keys(chainVals)\"\n        :key=\"index\"\n        sm=\"12\"\n        md=\"4\"\n        class=\"text-truncate\"\n      >\n        <uptime-my-chain-blocks\n          :chain=\"x\"\n          :validators=\"chainVals[x]\"\n        />\n\n      </b-col>\n    </b-row>\n    <b-alert\n      class=\"mt-2\"\n      variant=\"success\"\n      show\n    >\n      <div class=\"alert-heading\">\n        Tips\n      </div>\n      <div class=\"alert-body\">\n        There are two ways to monitor your validators:\n        <li> Pin a validator on Uptime pages.</li>\n        <li> Specify parameters like following: <pre>https://ping.pub/cosmos/uptime/my?validators={\"sifchain\":[\"FBADE9A30473BB9ED6DFA16BFB3838E028F33650\"],\"chain_name\":[\"hexAddress\"]}</pre></li>\n      </div>\n    </b-alert>\n  </div>\n</template>\n\n<script>\nimport {\n  BRow, BCol, VBTooltip, BAlert,\n} from 'bootstrap-vue'\nimport { consensusPubkeyToHexAddress, getCachedValidators, getLocalChains } from '@/libs/utils'\nimport UptimeMyChainBlocks from './UptimeMyChainBlocks.vue'\n\nexport default {\n  components: {\n    BRow,\n    BCol,\n    BAlert,\n    UptimeMyChainBlocks,\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n  },\n  data() {\n    let pinned = (localStorage.getItem('pinned') || '').split(',').map(x => x.split('#')).reduce((a1, b) => {\n      const a = a1\n      if (a[b[0]]) {\n        a[b[0]].push(b[1])\n      } else {\n        a[b[0]] = [b[1]]\n      }\n      return a\n    }, {})\n    if (this.$route.query.validators) {\n      pinned = (JSON.parse(this.$route.query.validators))\n    }\n\n    const chainVals = {}\n    if (pinned) {\n      const configs = getLocalChains()\n      Object.keys(pinned).forEach(x => {\n        const cached = JSON.parse(getCachedValidators(x))\n        if (cached) {\n          const validators = []\n          pinned[x].forEach(address => {\n            const val = cached.find(v => address === consensusPubkeyToHexAddress(v.consensus_pubkey))\n            if (val) validators.push({ address, validator: val.description })\n          })\n          chainVals[x] = validators\n        } else {\n          this.$http.getValidatorList(configs[x]).then((vals => {\n            const validators = []\n            pinned[x].forEach(address => {\n              const val = vals.find(v => address === consensusPubkeyToHexAddress(v.consensus_pubkey))\n              if (val) validators.push({ address, validator: val.description })\n            })\n            this.$set(this.chainVals, x, validators)\n          }))\n        }\n      })\n    }\n\n    return {\n      chainVals,\n    }\n  },\n}\n</script>\n\n<style></style>\n"]},"metadata":{},"sourceType":"module"}