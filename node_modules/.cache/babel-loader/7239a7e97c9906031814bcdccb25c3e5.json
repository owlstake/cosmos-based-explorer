{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport { getCurrentInstance } from '@vue/composition-api';\n/**\n * Returns ability result if ACL is configured or else just return true\n * Useful if you don't know if ACL is configured or not\n * Used in @core files to handle absence of ACL without errors\n * @param {String} action CASL Actions // https://casl.js.org/v4/en/guide/intro#basics\n * @param {String} subject CASL Subject // https://casl.js.org/v4/en/guide/intro#basics\n */\n\nexport var can = function can(action, subject) {\n  var vm = getCurrentInstance().proxy;\n  return vm.$can ? vm.$can(action, subject) : true;\n};\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource\n * @param {Object} item navigation object item\n */\n\nexport var canViewVerticalNavMenuLink = function canViewVerticalNavMenuLink(item) {\n  return can(item.action, item.resource);\n};\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource & Hide group if all of it's children are hidden\n * @param {Object} item navigation object item\n */\n// eslint-disable-next-line arrow-body-style\n\nexport var canViewVerticalNavMenuGroup = function canViewVerticalNavMenuGroup(item) {\n  // ! This same logic is used in canViewHorizontalNavMenuGroup and canViewHorizontalNavMenuHeaderGroup. So make sure to update logic in them as well\n  var hasAnyVisibleChild = item.children.some(function (i) {\n    return can(i.action, i.resource);\n  }); // If resource and action is defined in item => Return based on children visibility (Hide group if no child is visible)\n  // Else check for ability using provided resource and action along with checking if has any visible child\n\n  if (!(item.action && item.resource)) {\n    return hasAnyVisibleChild;\n  }\n\n  return can(item.action, item.resource) && hasAnyVisibleChild;\n};\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource\n * @param {Object} item navigation object item\n */\n\nexport var canViewVerticalNavMenuHeader = function canViewVerticalNavMenuHeader(item) {\n  return can(item.action, item.resource);\n};\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource\n * @param {Object} item navigation object item\n */\n\nexport var canViewHorizontalNavMenuLink = function canViewHorizontalNavMenuLink(item) {\n  return can(item.action, item.resource);\n};\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource\n * @param {Object} item navigation object item\n */\n\nexport var canViewHorizontalNavMenuHeaderLink = function canViewHorizontalNavMenuHeaderLink(item) {\n  return can(item.action, item.resource);\n};\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource & Hide group if all of it's children are hidden\n * @param {Object} item navigation object item\n */\n// eslint-disable-next-line arrow-body-style\n\nexport var canViewHorizontalNavMenuGroup = function canViewHorizontalNavMenuGroup(item) {\n  // ? Same logic as canViewVerticalNavMenuGroup\n  var hasAnyVisibleChild = item.children.some(function (i) {\n    return can(i.action, i.resource);\n  }); // If resource and action is defined in item => Return based on children visibility (Hide group if no child is visible)\n  // Else check for ability using provided resource and action along with checking if has any visible child\n\n  if (!(item.action && item.resource)) {\n    return hasAnyVisibleChild;\n  }\n\n  return can(item.action, item.resource) && hasAnyVisibleChild;\n}; // eslint-disable-next-line arrow-body-style\n\nexport var canViewHorizontalNavMenuHeaderGroup = function canViewHorizontalNavMenuHeaderGroup(item) {\n  // ? Same logic as canViewVerticalNavMenuGroup but with extra content\n  // eslint-disable-next-line arrow-body-style\n  var hasAnyVisibleChild = item.children.some(function (grpOrItem) {\n    // If it have children => It's grp\n    // Call ACL function based on grp/link\n    return grpOrItem.children ? canViewHorizontalNavMenuGroup(grpOrItem) : canViewHorizontalNavMenuLink(grpOrItem);\n  }); // If resource and action is defined in item => Return based on children visibility (Hide group if no child is visible)\n  // Else check for ability using provided resource and action along with checking if has any visible child\n\n  if (!(item.action && item.resource)) {\n    return hasAnyVisibleChild;\n  }\n\n  return can(item.action, item.resource) && hasAnyVisibleChild;\n};","map":{"version":3,"names":["getCurrentInstance","can","action","subject","vm","proxy","$can","canViewVerticalNavMenuLink","item","resource","canViewVerticalNavMenuGroup","hasAnyVisibleChild","children","some","i","canViewVerticalNavMenuHeader","canViewHorizontalNavMenuLink","canViewHorizontalNavMenuHeaderLink","canViewHorizontalNavMenuGroup","canViewHorizontalNavMenuHeaderGroup","grpOrItem"],"sources":["/root/cosmos-based-explorer/src/@core/libs/acl/utils.js"],"sourcesContent":["import { getCurrentInstance } from '@vue/composition-api'\n\n/**\n * Returns ability result if ACL is configured or else just return true\n * Useful if you don't know if ACL is configured or not\n * Used in @core files to handle absence of ACL without errors\n * @param {String} action CASL Actions // https://casl.js.org/v4/en/guide/intro#basics\n * @param {String} subject CASL Subject // https://casl.js.org/v4/en/guide/intro#basics\n */\nexport const can = (action, subject) => {\n  const vm = getCurrentInstance().proxy\n  return vm.$can ? vm.$can(action, subject) : true\n}\n\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource\n * @param {Object} item navigation object item\n */\nexport const canViewVerticalNavMenuLink = item => can(item.action, item.resource)\n\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource & Hide group if all of it's children are hidden\n * @param {Object} item navigation object item\n */\n// eslint-disable-next-line arrow-body-style\nexport const canViewVerticalNavMenuGroup = item => {\n  // ! This same logic is used in canViewHorizontalNavMenuGroup and canViewHorizontalNavMenuHeaderGroup. So make sure to update logic in them as well\n  const hasAnyVisibleChild = item.children.some(i => can(i.action, i.resource))\n\n  // If resource and action is defined in item => Return based on children visibility (Hide group if no child is visible)\n  // Else check for ability using provided resource and action along with checking if has any visible child\n  if (!(item.action && item.resource)) {\n    return hasAnyVisibleChild\n  }\n  return can(item.action, item.resource) && hasAnyVisibleChild\n}\n\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource\n * @param {Object} item navigation object item\n */\nexport const canViewVerticalNavMenuHeader = item => can(item.action, item.resource)\n\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource\n * @param {Object} item navigation object item\n */\nexport const canViewHorizontalNavMenuLink = item => can(item.action, item.resource)\n\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource\n * @param {Object} item navigation object item\n */\nexport const canViewHorizontalNavMenuHeaderLink = item => can(item.action, item.resource)\n\n/**\n * Check if user can view item based on it's ability\n * Based on item's action and resource & Hide group if all of it's children are hidden\n * @param {Object} item navigation object item\n */\n// eslint-disable-next-line arrow-body-style\nexport const canViewHorizontalNavMenuGroup = item => {\n  // ? Same logic as canViewVerticalNavMenuGroup\n  const hasAnyVisibleChild = item.children.some(i => can(i.action, i.resource))\n\n  // If resource and action is defined in item => Return based on children visibility (Hide group if no child is visible)\n  // Else check for ability using provided resource and action along with checking if has any visible child\n  if (!(item.action && item.resource)) {\n    return hasAnyVisibleChild\n  }\n  return can(item.action, item.resource) && hasAnyVisibleChild\n}\n\n// eslint-disable-next-line arrow-body-style\nexport const canViewHorizontalNavMenuHeaderGroup = item => {\n  // ? Same logic as canViewVerticalNavMenuGroup but with extra content\n\n  // eslint-disable-next-line arrow-body-style\n  const hasAnyVisibleChild = item.children.some(grpOrItem => {\n    // If it have children => It's grp\n    // Call ACL function based on grp/link\n    return grpOrItem.children ? canViewHorizontalNavMenuGroup(grpOrItem) : canViewHorizontalNavMenuLink(grpOrItem)\n  })\n\n  // If resource and action is defined in item => Return based on children visibility (Hide group if no child is visible)\n  // Else check for ability using provided resource and action along with checking if has any visible child\n  if (!(item.action && item.resource)) {\n    return hasAnyVisibleChild\n  }\n  return can(item.action, item.resource) && hasAnyVisibleChild\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}