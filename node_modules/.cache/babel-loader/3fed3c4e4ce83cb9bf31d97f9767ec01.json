{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BAvatar, BCardFooter, BRow, BCol, BBreadcrumb, BCard, BCardBody, BInputGroup, BFormInput, BInputGroupAppend, BButton } from 'bootstrap-vue';\nimport fetch from 'node-fetch';\nimport { consensusPubkeyToHexAddress, getLocalChains } from '@/libs/utils';\nimport vSelect from 'vue-select';\nimport AppFooter from '@/@core/layouts/components/AppFooter.vue';\nimport FullHeader from './components/FullHeader.vue';\nexport default {\n  components: {\n    FullHeader: FullHeader,\n    BBreadcrumb: BBreadcrumb,\n    BRow: BRow,\n    BCol: BCol,\n    BCard: BCard,\n    BCardBody: BCardBody,\n    BCardFooter: BCardFooter,\n    BInputGroup: BInputGroup,\n    BFormInput: BFormInput,\n    BInputGroupAppend: BInputGroupAppend,\n    BButton: BButton,\n    BAvatar: BAvatar,\n    vSelect: vSelect,\n    AppFooter: AppFooter\n  },\n  data: function data() {\n    var chains = getLocalChains();\n    var selected = 'agoric';\n    return {\n      navs: [{\n        text: 'Tools'\n      }, {\n        text: 'Consensus Monitor'\n      }],\n      showPrevote: false,\n      rpc: \"\".concat(chains[selected].rpc[0], \"/consensus_state\"),\n      httpstatus: 200,\n      httpStatusText: '',\n      roundState: {},\n      selected: selected,\n      chains: chains,\n      vals: [],\n      positions: []\n    };\n  },\n  created: function created() {\n    this.validators();\n  },\n  methods: {\n    color: function color(i, txt) {\n      if (i === this.roundState.proposer.index) {\n        return txt === 'nil-Vote' ? 'outline-primary' : 'primary';\n      }\n\n      return txt === 'nil-Vote' ? 'outline-secondary' : 'success';\n    },\n    update: function update() {\n      var _this = this;\n\n      fetch(this.rpc).then(function (data) {\n        _this.httpstatus = data.status;\n        _this.httpStatusText = data.httpStatusText;\n        return data.json();\n      }).then(function (res) {\n        _this.roundState = res.result.round_state;\n      }).catch(function (err) {\n        _this.httpstatus = 500;\n        _this.httpStatusText = err;\n      });\n    },\n    validators: function validators() {\n      var _this2 = this;\n\n      var conf = this.chains[this.selected];\n      this.$http.getValidatorList(conf).then(function (data) {\n        _this2.vals = data.map(function (x) {\n          var x2 = x;\n          x2.hex = consensusPubkeyToHexAddress(x.consensus_pubkey);\n          return x2;\n        });\n      });\n    },\n    onchange: function onchange(v) {\n      var _this3 = this;\n\n      this.httpstatus = 200;\n      this.httpStatusText = '';\n      this.roundState = {};\n      this.selected = v.chain_name;\n      this.rpc = \"\".concat(v.rpc[0], \"/consensus_state\"); // used for mapping nil-vote validators\n\n      fetch(\"\".concat(v.rpc[0], \"/validators?per_page=100\")).then(function (data) {\n        return data.json();\n      }).then(function (res2) {\n        _this3.positions = res2.result.validators;\n\n        if (res2.result.total > 100) {\n          fetch(\"\".concat(v.rpc[0], \"/validators?page=2&per_page=100\")).then(function (data) {\n            return data.json();\n          }).then(function (res) {\n            _this3.positions = _this3.positions.concat(res.result.validators);\n          });\n        }\n      }).catch(function (err) {\n        _this3.httpstatus = 500;\n        _this3.httpStatusText = err;\n      });\n      this.validators();\n    },\n    showName: function showName(i, text) {\n      var _this4 = this,\n          _val$description2;\n\n      if (text === 'nil-Vote') {\n        if (this.positions[i]) {\n          var _val$description;\n\n          var _val = this.vals.find(function (x) {\n            return x.hex === _this4.positions[i].address;\n          });\n\n          return (_val === null || _val === void 0 ? void 0 : (_val$description = _val.description) === null || _val$description === void 0 ? void 0 : _val$description.moniker) || i;\n        }\n\n        return i;\n      }\n\n      var txt = text.substring(text.indexOf(':') + 1, text.indexOf(' '));\n      var val = this.vals.find(function (x) {\n        return x.hex.startsWith(txt);\n      });\n      return (val === null || val === void 0 ? void 0 : (_val$description2 = val.description) === null || _val$description2 === void 0 ? void 0 : _val$description2.moniker) || txt;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}