{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.map.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { sha256 } from '@cosmjs/crypto';\nimport { toHex } from '@cosmjs/encoding';\nimport { BTable, BCardTitle, BCard } from 'bootstrap-vue';\nimport { formatTokenAmount, formatTokenDenom } from '@/libs/utils';\nexport default {\n  components: {\n    BCard: BCard,\n    BTable: BTable,\n    BCardTitle: BCardTitle\n  },\n  data: function data() {\n    return {\n      islive: true,\n      assets: [],\n      denoms: {},\n      cfield: [{\n        key: 'denom',\n        formatter: this.formatDenom,\n        tdClass: 'text-nowrap text-truncate overflow-hidden'\n      }, {\n        key: 'abbr',\n        label: 'Amount'\n      }]\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$http.getAllIBCDenoms().then(function (x) {\n      x.denom_traces.forEach(function (trace) {\n        var hash = toHex(sha256(new TextEncoder().encode(\"\".concat(trace.path, \"/\").concat(trace.base_denom))));\n\n        _this.$set(_this.denoms, \"ibc/\".concat(hash.toUpperCase()), trace);\n      });\n    });\n    this.$http.getBankTotals().then(function (res) {\n      var toshow = res.sort();\n      _this.assets = toshow.reverse().map(function (x) {\n        var xh = x;\n        xh.abbr = formatTokenAmount(x.amount, 0, x.denom);\n        return xh;\n      });\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.islive = false;\n  },\n  methods: {\n    formatDenom: function formatDenom(v) {\n      if (this.denoms[v]) {\n        var trace = this.denoms[v];\n        return \"* \".concat(formatTokenDenom(trace.base_denom), \" (\").concat(trace.path, \")\");\n      }\n\n      return formatTokenDenom(v);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AAEA;EACAA;IACAC,YADA;IAEAC,cAFA;IAGAC;EAHA,CADA;EAMAC,IANA,kBAMA;IACA;MACAC,YADA;MAEAC,UAFA;MAGAC,UAHA;MAIAC,SACA;QACAC,YADA;QAEAC,2BAFA;QAGAC;MAHA,CADA,EAMA;QACAF,WADA;QAEAG;MAFA,CANA;IAJA;EAgBA,CAvBA;EAwBAC,OAxBA,qBAwBA;IAAA;;IACA;MACAC;QACA;;QACA;MACA,CAHA;IAIA,CALA;IAMA;MACA;MACA;QACA;QACAC;QACA;MACA,CAJA;IAKA,CAPA;EAQA,CAvCA;EAwCAC,aAxCA,2BAwCA;IACA;EACA,CA1CA;EA2CAC;IACAC,WADA,uBACAC,CADA,EACA;MACA;QACA;QACA;MACA;;MACA;IACA;EAPA;AA3CA","names":["components","BCard","BTable","BCardTitle","data","islive","assets","denoms","cfield","key","formatter","tdClass","label","created","x","xh","beforeDestroy","methods","formatDenom","v"],"sourceRoot":"src/views","sources":["SummaryAssetsComponent.vue"],"sourcesContent":["<template>\n  <b-card v-if=\"assets\">\n    <b-card-title>\n      Assets\n    </b-card-title>\n    <b-table\n      :items=\"assets\"\n      :fields=\"cfield\"\n      hover\n      striped\n      sticky-header=\"true\"\n      responsive=\"xs\"\n    />\n  </b-card>\n</template>\n\n<script>\nimport { sha256 } from '@cosmjs/crypto'\nimport { toHex } from '@cosmjs/encoding'\nimport { BTable, BCardTitle, BCard } from 'bootstrap-vue'\nimport { formatTokenAmount, formatTokenDenom } from '@/libs/utils'\n\nexport default {\n  components: {\n    BCard,\n    BTable,\n    BCardTitle,\n  },\n  data() {\n    return {\n      islive: true,\n      assets: [],\n      denoms: {},\n      cfield: [\n        {\n          key: 'denom',\n          formatter: this.formatDenom,\n          tdClass: 'text-nowrap text-truncate overflow-hidden',\n        },\n        {\n          key: 'abbr',\n          label: 'Amount',\n        },\n      ],\n    }\n  },\n  created() {\n    this.$http.getAllIBCDenoms().then(x => {\n      x.denom_traces.forEach(trace => {\n        const hash = toHex(sha256(new TextEncoder().encode(`${trace.path}/${trace.base_denom}`)))\n        this.$set(this.denoms, `ibc/${hash.toUpperCase()}`, trace)\n      })\n    })\n    this.$http.getBankTotals().then(res => {\n      const toshow = res.sort()\n      this.assets = toshow.reverse().map(x => {\n        const xh = x\n        xh.abbr = formatTokenAmount(x.amount, 0, x.denom)\n        return xh\n      })\n    })\n  },\n  beforeDestroy() {\n    this.islive = false\n  },\n  methods: {\n    formatDenom(v) {\n      if (this.denoms[v]) {\n        const trace = this.denoms[v]\n        return `* ${formatTokenDenom(trace.base_denom)} (${trace.path})`\n      }\n      return formatTokenDenom(v)\n    },\n  },\n}\n</script>\n\n<style>\n</style>\n"]},"metadata":{},"sourceType":"module"}