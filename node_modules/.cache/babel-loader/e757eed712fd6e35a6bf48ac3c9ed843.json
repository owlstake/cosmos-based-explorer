{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.concat.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { VBTooltip, BCard, BAvatar, BRow, BCol } from 'bootstrap-vue';\nimport Ripple from 'vue-ripple-directive';\nimport { formatToken, getCachedValidators, getLocalAccounts, getLocalChains, getUserCurrency, getUserCurrencySign, numberWithCommas, tokenFormatter } from '@/libs/utils';\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue';\nexport default {\n  components: {\n    BAvatar: BAvatar,\n    BCard: BCard,\n    BRow: BRow,\n    BCol: BCol,\n    FeatherIcon: FeatherIcon\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n    Ripple: Ripple\n  },\n  data: function data() {\n    return {\n      address: '',\n      selectedValidator: '',\n      accounts: [],\n      delegations: [],\n      rewards: {},\n      operationModalType: '',\n      ibcDenoms: {},\n      currency: getUserCurrencySign(),\n      currency2: getUserCurrency()\n    };\n  },\n  computed: {\n    formatedDelegations: function formatedDelegations() {\n      var _this = this;\n\n      return this.delegations.map(function (x) {\n        return {\n          validator: {\n            logo: x.chain.logo,\n            validator: x.delegation.validator_address,\n            moniker: _this.findMoniker(x.chain.chain_name, x.delegation.validator_address),\n            chain: x.chain.chain_name\n          },\n          delegator: x.keyname,\n          delegator_address: x.delegation.delegator_address,\n          delegation: formatToken(x.balance),\n          reward: _this.findReward(x.delegation.delegator_address, x.delegation.validator_address) // action: '',\n\n        };\n      });\n    },\n    groupedDelegations: function groupedDelegations() {\n      var _this2 = this;\n\n      var group = {};\n      this.delegations.forEach(function (x) {\n        var d = {\n          validator: {\n            logo: x.chain.logo,\n            validator: x.delegation.validator_address,\n            moniker: _this2.findMoniker(x.chain.chain_name, x.delegation.validator_address),\n            chain: x.chain.chain_name\n          },\n          delegator: x.keyname,\n          delegator_address: x.delegation.delegator_address,\n          delegation: formatToken(x.balance),\n          reward: _this2.findReward(x.delegation.delegator_address, x.delegation.validator_address) // action: '',\n\n        };\n\n        if (group[x.keyname]) {\n          group[x.keyname].push(d);\n        } else {\n          group[x.keyname] = [d];\n        }\n      });\n      return group;\n    }\n  },\n  created: function created() {\n    this.init();\n  },\n  methods: {\n    selectValue: function selectValue(type, v) {\n      this.operationModalType = type;\n      this.address = v.delegator_address;\n      this.selectedValidator = v.validator.validator;\n      return v;\n    },\n    findMoniker: function findMoniker(chain, addr) {\n      var vals = JSON.parse(getCachedValidators(chain));\n\n      if (vals) {\n        var val = vals.find(function (x) {\n          return x.operator_address === addr;\n        });\n\n        if (val) {\n          return val.description.moniker;\n        }\n      }\n\n      return addr;\n    },\n    findReward: function findReward(delegator, validator) {\n      var _this$rewards$delegat;\n\n      var reward = ((_this$rewards$delegat = this.rewards[delegator]) === null || _this$rewards$delegat === void 0 ? void 0 : _this$rewards$delegat.rewards.find(function (x) {\n        return x.validator_address === validator;\n      })) || null;\n\n      if (reward) {\n        return tokenFormatter(reward.reward, this.ibcDenoms);\n      }\n\n      return '-';\n    },\n    getPrice: function getPrice(denom) {\n      var quote = this.$store.state.chains.quotes[denom];\n      return quote ? quote[this.currency2] : 0;\n    },\n    toCurrency: function toCurrency(token) {\n      var _this3 = this;\n\n      var profit = 0;\n      token.split(', ').forEach(function (r) {\n        var t = r.trim().replace(/,/, '').split(' ');\n        profit += Number(t[0]) * _this3.getPrice(t[1]);\n      });\n      return numberWithCommas(profit.toFixed(2));\n    },\n    init: function init() {\n      var _this4 = this;\n\n      this.accounts = getLocalAccounts();\n      var chains = getLocalChains();\n\n      if (this.accounts) {\n        Object.keys(this.accounts).forEach(function (acc) {\n          _this4.accounts[acc].address.forEach(function (add) {\n            var chain = chains[add.chain];\n\n            _this4.$http.getStakingReward(add.addr, chain).then(function (res) {\n              _this4.rewards[add.addr] = res;\n              res.total.forEach(function (t) {\n                if (t.denom.startsWith('ibc')) {\n                  _this4.$http.getIBCDenomTrace(t.denom, chain).then(function (denom) {\n                    _this4.$set(_this4.ibcDenoms, t.denom, denom);\n                  });\n                }\n              });\n            });\n\n            _this4.$http.getStakingDelegations(add.addr, chain).then(function (res) {\n              if (res.delegation_responses && res.delegation_responses.length > 0) {\n                var delegation = res.delegation_responses.map(function (x) {\n                  var x2 = x;\n                  x2.keyname = acc;\n                  x2.chain = chain;\n                  return x2;\n                });\n                _this4.delegations = _this4.delegations.concat(delegation);\n              }\n            }).catch(function () {});\n          });\n        });\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA,SACAA,SADA,EACAC,KADA,EACAC,OADA,EACAC,IADA,EACAC,IADA,QAEA,eAFA;AAGA;AACA,SACAC,WADA,EACAC,mBADA,EACAC,gBADA,EACAC,cADA,EACAC,eADA,EACAC,mBADA,EACAC,gBADA,EACAC,cADA,QAEA,cAFA;AAGA;AAEA;EACAC;IACAX,gBADA;IAEAD,YAFA;IAGAE,UAHA;IAIAC,UAJA;IAKAU;EALA,CADA;EAQAC;IACA,sBADA;IAEAC;EAFA,CARA;EAYAC,IAZA,kBAYA;IACA;MACAC,WADA;MAEAC,qBAFA;MAGAC,YAHA;MAIAC,eAJA;MAKAC,WALA;MAMAC,sBANA;MAOAC,aAPA;MAQAC,+BARA;MASAC;IATA;EAWA,CAxBA;EAyBAC;IACAC,mBADA,iCACA;MAAA;;MACA;QAAA;UACAC;YACAC,kBADA;YAEAD,yCAFA;YAGAE,8EAHA;YAIAC;UAJA,CADA;UAOAC,oBAPA;UAQAC,iDARA;UASAC,kCATA;UAUAC,wFAVA,CAWA;;QAXA;MAAA;IAaA,CAfA;IAgBAC,kBAhBA,gCAgBA;MAAA;;MACA;MACA;QACA;UACAR;YACAC,kBADA;YAEAD,yCAFA;YAGAE,+EAHA;YAIAC;UAJA,CADA;UAOAC,oBAPA;UAQAC,iDARA;UASAC,kCATA;UAUAC,yFAVA,CAWA;;QAXA;;QAaA;UACAE;QACA,CAFA,MAEA;UACAA;QACA;MACA,CAnBA;MAoBA;IACA;EAvCA,CAzBA;EAkEAC,OAlEA,qBAkEA;IACA;EACA,CApEA;EAqEAC;IACAC,WADA,uBACAC,IADA,EACAC,CADA,EACA;MACA;MACA;MACA;MACA;IACA,CANA;IAOAC,WAPA,uBAOAZ,KAPA,EAOAa,IAPA,EAOA;MACA;;MACA;QACA;UAAA;QAAA;;QACA;UACA;QACA;MACA;;MACA;IACA,CAhBA;IAiBAC,UAjBA,sBAiBAb,SAjBA,EAiBAJ,SAjBA,EAiBA;MAAA;;MACA;QAAA;MAAA;;MACA;QACA;MACA;;MACA;IACA,CAvBA;IAwBAkB,QAxBA,oBAwBAC,KAxBA,EAwBA;MACA;MACA;IACA,CA3BA;IA4BAC,UA5BA,sBA4BAC,KA5BA,EA4BA;MAAA;;MACA;MACAA;QACA;QACAC;MACA,CAHA;MAIA;IACA,CAnCA;IAoCAC,IApCA,kBAoCA;MAAA;;MACA;MACA;;MACA;QACAC;UACA;YACA;;YACA;cACA;cACAC;gBACA;kBACA;oBACA;kBACA,CAFA;gBAGA;cACA,CANA;YAOA,CATA;;YAUA;cACA;gBACA;kBACA;kBACAC;kBACAA;kBACA;gBACA,CALA;gBAMA;cACA;YACA,CAVA,EAUAC,KAVA,CAUA,cAVA;UAWA,CAvBA;QAwBA,CAzBA;MA0BA;IACA;EAnEA;AArEA","names":["VBTooltip","BCard","BAvatar","BRow","BCol","formatToken","getCachedValidators","getLocalAccounts","getLocalChains","getUserCurrency","getUserCurrencySign","numberWithCommas","tokenFormatter","components","FeatherIcon","directives","Ripple","data","address","selectedValidator","accounts","delegations","rewards","operationModalType","ibcDenoms","currency","currency2","computed","formatedDelegations","validator","logo","moniker","chain","delegator","delegator_address","delegation","reward","groupedDelegations","group","created","methods","selectValue","type","v","findMoniker","addr","findReward","getPrice","denom","toCurrency","token","profit","init","Object","res","x2","catch"],"sourceRoot":"src/views","sources":["WalletDelegations.vue"],"sourcesContent":["<template>\n  <div>\n    <router-link\n      v-if=\"delegations.length === 0\"\n      to=\"/wallet/import\"\n    >\n      <b-card class=\"addzone text-center\">\n        <feather-icon icon=\"PlusIcon\" />\n        Connect Wallet\n      </b-card>\n    </router-link>\n    <b-card\n      v-for=\"(items,k) in groupedDelegations\"\n      :key=\"`row-${k}`\"\n      :title=\"k\"\n    >\n      <b-row class=\"bg-light-secondary text-white\">\n        <b-col\n          md=\"4\"\n          sm=\"12\"\n          class=\"p-1 font-weight-bold\"\n        >\n          VALIDATOR\n        </b-col>\n        <b-col\n          md=\"3\"\n          sm=\"12\"\n          class=\"p-1 font-weight-bold\"\n        >\n          DELEGATION\n        </b-col>\n        <b-col\n          md=\"5\"\n          sm=\"12\"\n          class=\"p-1 font-weight-bold\"\n        >\n          REWARD\n        </b-col>\n      </b-row>\n      <b-row\n        v-for=\"(row,j) in items\"\n        :key=\"`${row.validator.validator}-${j}`\"\n        class=\"border-bottom\"\n      >\n        <b-col\n          md=\"4\"\n          sm=\"12\"\n          class=\"d-flex align-items-center\"\n        >\n          <router-link :to=\"`/${row.validator.chain}/staking/${row.validator.validator}`\">\n            <div cols=\"6\">\n              <b-avatar\n                :src=\"row.validator.logo\"\n                size=\"18\"\n                variant=\"light-primary\"\n                rounded=\"\"\n              />\n              {{ row.validator.moniker }}\n            </div>\n          </router-link>\n        </b-col>\n        <b-col\n          md=\"3\"\n          sm=\"12\"\n          class=\"d-flex align-items-center\"\n        >\n          {{ row.delegation }}\n        </b-col>\n        <b-col\n          md=\"5\"\n          sm=\"12\"\n        >\n          <router-link :to=\"`/${row.validator.chain}/account/${row.delegator_address}`\">\n            <div>{{ row.reward }}</div>\n            <div class=\"text-success\">\n              {{ currency }}{{ toCurrency(row.reward) }}\n            </div>\n          </router-link>\n        </b-col>\n      </b-row>\n    </b-card>\n  </div>\n</template>\n\n<script>\nimport {\n  VBTooltip, BCard, BAvatar, BRow, BCol,\n} from 'bootstrap-vue'\nimport Ripple from 'vue-ripple-directive'\nimport {\n  formatToken, getCachedValidators, getLocalAccounts, getLocalChains, getUserCurrency, getUserCurrencySign, numberWithCommas, tokenFormatter,\n} from '@/libs/utils'\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue'\n\nexport default {\n  components: {\n    BAvatar,\n    BCard,\n    BRow,\n    BCol,\n    FeatherIcon,\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n    Ripple,\n  },\n  data() {\n    return {\n      address: '',\n      selectedValidator: '',\n      accounts: [],\n      delegations: [],\n      rewards: {},\n      operationModalType: '',\n      ibcDenoms: {},\n      currency: getUserCurrencySign(),\n      currency2: getUserCurrency(),\n    }\n  },\n  computed: {\n    formatedDelegations() {\n      return this.delegations.map(x => ({\n        validator: {\n          logo: x.chain.logo,\n          validator: x.delegation.validator_address,\n          moniker: this.findMoniker(x.chain.chain_name, x.delegation.validator_address),\n          chain: x.chain.chain_name,\n        },\n        delegator: x.keyname,\n        delegator_address: x.delegation.delegator_address,\n        delegation: formatToken(x.balance),\n        reward: this.findReward(x.delegation.delegator_address, x.delegation.validator_address),\n        // action: '',\n      }))\n    },\n    groupedDelegations() {\n      const group = {}\n      this.delegations.forEach(x => {\n        const d = {\n          validator: {\n            logo: x.chain.logo,\n            validator: x.delegation.validator_address,\n            moniker: this.findMoniker(x.chain.chain_name, x.delegation.validator_address),\n            chain: x.chain.chain_name,\n          },\n          delegator: x.keyname,\n          delegator_address: x.delegation.delegator_address,\n          delegation: formatToken(x.balance),\n          reward: this.findReward(x.delegation.delegator_address, x.delegation.validator_address),\n          // action: '',\n        }\n        if (group[x.keyname]) {\n          group[x.keyname].push(d)\n        } else {\n          group[x.keyname] = [d]\n        }\n      })\n      return group\n    },\n  },\n  created() {\n    this.init()\n  },\n  methods: {\n    selectValue(type, v) {\n      this.operationModalType = type\n      this.address = v.delegator_address\n      this.selectedValidator = v.validator.validator\n      return v\n    },\n    findMoniker(chain, addr) {\n      const vals = JSON.parse(getCachedValidators(chain))\n      if (vals) {\n        const val = vals.find(x => x.operator_address === addr)\n        if (val) {\n          return val.description.moniker\n        }\n      }\n      return addr\n    },\n    findReward(delegator, validator) {\n      const reward = this.rewards[delegator]?.rewards.find(x => x.validator_address === validator) || null\n      if (reward) {\n        return tokenFormatter(reward.reward, this.ibcDenoms)\n      }\n      return '-'\n    },\n    getPrice(denom) {\n      const quote = this.$store.state.chains.quotes[denom]\n      return quote ? quote[this.currency2] : 0\n    },\n    toCurrency(token) {\n      let profit = 0\n      token.split(', ').forEach(r => {\n        const t = r.trim().replace(/,/, '').split(' ')\n        profit += Number(t[0]) * this.getPrice(t[1])\n      })\n      return numberWithCommas(profit.toFixed(2))\n    },\n    init() {\n      this.accounts = getLocalAccounts()\n      const chains = getLocalChains()\n      if (this.accounts) {\n        Object.keys(this.accounts).forEach(acc => {\n          this.accounts[acc].address.forEach(add => {\n            const chain = chains[add.chain]\n            this.$http.getStakingReward(add.addr, chain).then(res => {\n              this.rewards[add.addr] = res\n              res.total.forEach(t => {\n                if (t.denom.startsWith('ibc')) {\n                  this.$http.getIBCDenomTrace(t.denom, chain).then(denom => {\n                    this.$set(this.ibcDenoms, t.denom, denom)\n                  })\n                }\n              })\n            })\n            this.$http.getStakingDelegations(add.addr, chain).then(res => {\n              if (res.delegation_responses && res.delegation_responses.length > 0) {\n                const delegation = res.delegation_responses.map(x => {\n                  const x2 = x\n                  x2.keyname = acc\n                  x2.chain = chain\n                  return x2\n                })\n                this.delegations = this.delegations.concat(delegation)\n              }\n            }).catch(() => {})\n          })\n        })\n      }\n    },\n  },\n}\n</script>\n\n<style lang=\"css\">\n.addzone {\n    border: 2px dashed #ced4da;\n    background: #fff;\n    border-radius: 6px;\n    cursor: pointer;\n    box-shadow: none;\n}\n.addzone :hover {\n    border: 2px dashed #7367F0;\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module"}