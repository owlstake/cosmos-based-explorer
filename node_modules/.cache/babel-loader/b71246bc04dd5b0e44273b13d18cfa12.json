{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BTable } from 'bootstrap-vue';\nimport { getStakingValidatorByHex, isHexAddress, isToken, percent, toDay, tokenFormatter } from '@/libs/utils';\nexport default {\n  name: 'ArrayFieldComponent',\n  components: {\n    BTable: BTable\n  },\n  props: {\n    tablefield: {\n      type: [Array, Object],\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  computed: {\n    items: function items() {\n      if (this.tablefield.length > 0 && typeof this.tablefield[0] === 'string') {\n        return this.tablefield.map(function (x) {\n          return {\n            array: x\n          };\n        });\n      }\n\n      return this.tablefield;\n    }\n  },\n  methods: {\n    eval_value: function eval_value(value) {\n      if (typeof value === 'string') {\n        return JSON.parse(value);\n      }\n\n      return value;\n    },\n    isTokenField: function isTokenField(value) {\n      return isToken(value);\n    },\n    isArrayText: function isArrayText(value) {\n      var has = String(value).startsWith('[') && String(value).endsWith(']');\n      return has;\n    },\n    formatText: function formatText(value) {\n      var reg = /^\\d{4}.\\d{1,2}.\\d{1,2}T\\d{2}:\\d{2}:.+Z$/;\n      var percentage = /^0\\.\\d+/;\n\n      if (reg.test(value)) {\n        return toDay(value);\n      }\n\n      if (percentage.test(value)) {\n        return \"\".concat(percent(value), \"%\");\n      } // if (value.length > 40) {\n      //   return value.substring(0, 40).concat('...')\n      // }\n\n\n      return value;\n    },\n    formatTokens: function formatTokens(value) {\n      return tokenFormatter(value);\n    },\n    isHex: function isHex(value) {\n      return isHexAddress(value);\n    },\n    formatHexAddress: function formatHexAddress(v) {\n      return getStakingValidatorByHex(this.$http.config.chain_name, v);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AAEA,SACAA,wBADA,EACAC,YADA,EACAC,OADA,EACAC,OADA,EACAC,KADA,EACAC,cADA,QAEA,cAFA;AAIA;EACAC,2BADA;EAEAC;IACAC;EADA,CAFA;EAKAC;IACAC;MACAC,qBADA;MAEAC;QAAA;MAAA;IAFA;EADA,CALA;EAWAC;IACAC,KADA,mBACA;MACA;QACA;UAAA;YAAAC;UAAA;QAAA;MACA;;MACA;IACA;EANA,CAXA;EAmBAC;IACAC,UADA,sBACAC,KADA,EACA;MACA;QACA;MACA;;MACA;IACA,CANA;IAOAC,YAPA,wBAOAD,KAPA,EAOA;MACA;IACA,CATA;IAUAE,WAVA,uBAUAF,KAVA,EAUA;MACA;MACA;IACA,CAbA;IAcAG,UAdA,sBAcAH,KAdA,EAcA;MACA;MACA;;MACA;QACA;MACA;;MACA;QACA;MACA,CARA,CASA;MACA;MACA;;;MACA;IACA,CA3BA;IA4BAI,YA5BA,wBA4BAJ,KA5BA,EA4BA;MACA;IACA,CA9BA;IA+BAK,KA/BA,iBA+BAL,KA/BA,EA+BA;MACA;IACA,CAjCA;IAkCAM,gBAlCA,4BAkCAC,CAlCA,EAkCA;MACA;IACA;EApCA;AAnBA","names":["getStakingValidatorByHex","isHexAddress","isToken","percent","toDay","tokenFormatter","name","components","BTable","props","tablefield","type","default","computed","items","array","methods","eval_value","value","isTokenField","isArrayText","formatText","formatTokens","isHex","formatHexAddress","v"],"sourceRoot":"src/views","sources":["ArrayFieldComponent.vue"],"sourcesContent":["<template>\n  <b-table\n    v-if=\"Array.isArray(items)\"\n    :items=\"items\"\n    :sticky-header=\"true\"\n    :no-border-collapse=\"true\"\n    responsive=\"md\"\n    class=\"ml-0 mr-0 dataview text-nowrap\"\n  >\n    <template #cell()=\"data\">\n      <span v-if=\"isTokenField(data.value)\">{{ formatTokens(data.value) }}</span>\n      <span v-else-if=\"isHex(data.value)\">{{ formatHexAddress(data.value) }}</span>\n      <array-field-component\n        v-else-if=\"isArrayText(data.value)\"\n        :tablefield=\"eval_value(data.value)\"\n      />\n      <span\n        v-else\n        :title=\"data.value\"\n      >{{ formatText(data.value) }}</span>\n    </template>\n  </b-table>\n</template>\n\n<script>\nimport { BTable } from 'bootstrap-vue'\n\nimport {\n  getStakingValidatorByHex, isHexAddress, isToken, percent, toDay, tokenFormatter,\n} from '@/libs/utils'\n\nexport default {\n  name: 'ArrayFieldComponent',\n  components: {\n    BTable,\n  },\n  props: {\n    tablefield: {\n      type: [Array, Object],\n      default: () => [],\n    },\n  },\n  computed: {\n    items() {\n      if (this.tablefield.length > 0 && typeof (this.tablefield[0]) === 'string') {\n        return this.tablefield.map(x => ({ array: x }))\n      }\n      return this.tablefield\n    },\n  },\n  methods: {\n    eval_value(value) {\n      if (typeof (value) === 'string') {\n        return JSON.parse(value)\n      }\n      return value\n    },\n    isTokenField(value) {\n      return isToken(value)\n    },\n    isArrayText(value) {\n      const has = String(value).startsWith('[') && String(value).endsWith(']')\n      return has\n    },\n    formatText(value) {\n      const reg = /^\\d{4}.\\d{1,2}.\\d{1,2}T\\d{2}:\\d{2}:.+Z$/\n      const percentage = /^0\\.\\d+/\n      if (reg.test(value)) {\n        return toDay(value)\n      }\n      if (percentage.test(value)) {\n        return `${percent(value)}%`\n      }\n      // if (value.length > 40) {\n      //   return value.substring(0, 40).concat('...')\n      // }\n      return value\n    },\n    formatTokens(value) {\n      return tokenFormatter(value)\n    },\n    isHex(value) {\n      return isHexAddress(value)\n    },\n    formatHexAddress(v) {\n      return getStakingValidatorByHex(this.$http.config.chain_name, v)\n    },\n  },\n}\n</script>\n<style lang='css' scoped>\n/* Small devices (landscape phones, 576px and up) */\n@media (min-width: 576px) {\n  .dataview {\n    max-width: 300px;\n  }\n}\n\n/* Medium devices (tablets, 768px and up) The navbar toggle appears at this breakpoint */\n@media (min-width: 768px) {\n  .dataview {\n    max-width: 500px;\n  }\n}\n\n/* Large devices (desktops, 992px and up) */\n@media (min-width: 992px) {\n  .dataview {\n    max-width: 700px;\n  }\n}\n\n/* Extra large devices (large desktops, 1200px and up) */\n@media (min-width: 1200px) {\n  .dataview {\n    max-width: 820px;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}