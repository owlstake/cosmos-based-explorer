{"ast":null,"code":"import \"core-js/modules/es.number.to-fixed.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BInputGroupAppend, BFormInput, BFormGroup, BFormSelect, BFormSelectOption, BFormText } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount, getUserCurrency, getUserCurrencySign } from '@/libs/utils';\nexport default {\n  name: 'TransforDialogue',\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BInputGroup: BInputGroup,\n    BInputGroupAppend: BInputGroupAppend,\n    BFormInput: BFormInput,\n    BFormText: BFormText,\n    BFormGroup: BFormGroup,\n    BFormSelect: BFormSelect,\n    BFormSelectOption: BFormSelectOption,\n    ValidationProvider: ValidationProvider\n  },\n  props: {\n    address: {\n      type: String,\n      default: ''\n    },\n    balance: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      currency: getUserCurrency(),\n      currencySign: getUserCurrencySign(),\n      token: '',\n      amount: null,\n      recipient: '',\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  computed: {\n    msg: function msg() {\n      return [{\n        typeUrl: '/cosmos.bank.v1beta1.MsgSend',\n        value: {\n          fromAddress: this.address,\n          toAddress: this.recipient,\n          amount: [{\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token\n          }]\n        }\n      }];\n    },\n    balanceOptions: function balanceOptions() {\n      return this.setupBalance();\n    },\n    IBCDenom: function IBCDenom() {\n      return this.$store.state.chains.denoms;\n    },\n    valuation: function valuation() {\n      var amount = this.amount;\n\n      if (amount) {\n        var d2 = this.printDenom();\n        var quote = this.$store.state.chains.quotes[d2];\n        var price = quote ? quote[this.currency] : 0;\n        return parseFloat((amount * price).toFixed(2));\n      }\n\n      return 0;\n    }\n  },\n  mounted: function mounted() {\n    this.$emit('update', {\n      modalTitle: 'Transfer Tokens',\n      historyName: 'send'\n    });\n  },\n  methods: {\n    setupBalance: function setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom;\n        return this.balance;\n      }\n\n      return [];\n    },\n    format: function format(v) {\n      return formatToken(v, this.IBCDenom, 6);\n    },\n    printDenom: function printDenom() {\n      return formatTokenDenom(this.IBCDenom[this.token] || this.token);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGA;AACA,SACAA,IADA,EACAC,IADA,EACAC,WADA,EACAC,iBADA,EACAC,UADA,EACAC,UADA,EAEAC,WAFA,EAEAC,iBAFA,EAEAC,SAFA,QAGA,eAHA;AAIA,SACAC,QADA,EACAC,KADA,EACAC,GADA,EACAC,OADA,EACAC,KADA,EACAC,OADA,EACAC,QADA,EACAC,GADA,EACAC,MADA,EACAC,SADA,EACAC,MADA,QAEA,cAFA;AAGA,SACAC,WADA,EACAC,gBADA,EACAC,aADA,EACAC,eADA,EACAC,mBADA,QAEA,cAFA;AAIA;EACAC,wBADA;EAEAC;IACA1B,UADA;IAEAC,UAFA;IAGAC,wBAHA;IAIAC,oCAJA;IAKAC,sBALA;IAMAI,oBANA;IAOAH,sBAPA;IAQAC,wBARA;IASAC,oCATA;IAUAoB;EAVA,CAFA;EAeAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,WADA;MAEAC;QAAA;MAAA;IAFA;EALA,CAfA;EAyBAE,IAzBA,kBAyBA;IACA;MACAC,2BADA;MAEAC,mCAFA;MAGAC,SAHA;MAIAC,YAJA;MAKAC,aALA;MAMA7B,kBANA;MAOAM,kBAPA;MAQAL,YARA;MASAM,QATA;MAUAF,gBAVA;MAWAH,QAXA;MAYAE,YAZA;MAaAD,gBAbA;MAcAK,cAdA;MAeAE,cAfA;MAgBAD;IAhBA;EAkBA,CA5CA;EA6CAqB;IACAC,GADA,iBACA;MACA,QACA;QACAC,uCADA;QAEAC;UACAC,yBADA;UAEAC,yBAFA;UAGAP,SACA;YACAA,8CADA;YAEAQ;UAFA,CADA;QAHA;MAFA,CADA;IAeA,CAjBA;IAkBAC,cAlBA,4BAkBA;MACA;IACA,CApBA;IAqBAC,QArBA,sBAqBA;MACA;IACA,CAvBA;IAwBAC,SAxBA,uBAwBA;MACA;;MACA;QACA;QACA;QACA;QACA;MACA;;MACA;IACA;EAjCA,CA7CA;EAgFAC,OAhFA,qBAgFA;IACA;MACAC,6BADA;MAEAC;IAFA;EAIA,CArFA;EAuFAC;IACAC,YADA,0BACA;MACA;QACA;QACA;MACA;;MACA;IACA,CAPA;IAQAC,MARA,kBAQAC,CARA,EAQA;MACA;IACA,CAVA;IAWAC,UAXA,wBAWA;MACA;IACA;EAbA;AAvFA","names":["BRow","BCol","BInputGroup","BInputGroupAppend","BFormInput","BFormGroup","BFormSelect","BFormSelectOption","BFormText","required","email","url","between","alpha","integer","password","min","digits","alphaDash","length","formatToken","formatTokenDenom","getUnitAmount","getUserCurrency","getUserCurrencySign","name","components","ValidationProvider","props","address","type","default","balance","data","currency","currencySign","token","amount","recipient","computed","msg","typeUrl","value","fromAddress","toAddress","denom","balanceOptions","IBCDenom","valuation","mounted","modalTitle","historyName","methods","setupBalance","format","v","printDenom"],"sourceRoot":"src/views/components/OperationModal/components","sources":["Transfer.vue"],"sourcesContent":["<template>\n  <div>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Sender\"\n          label-for=\"sender\"\n        >\n          <b-input-group class=\"mb-25\">\n\n            <b-form-input\n              name=\"sender\"\n              :value=\"address\"\n              readonly\n            />\n          </b-input-group>\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Recipient\"\n          label-for=\"Recipient\"\n        >\n          <validation-provider\n            #default=\"{ errors }\"\n            rules=\"required\"\n            name=\"recipient\"\n          >\n            <b-input-group class=\"mb-25\">\n              <b-form-input\n                id=\"Recipient\"\n                v-model=\"recipient\"\n                :state=\"errors.length > 0 ? false:null\"\n              />\n            </b-input-group>\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Available Token\"\n          label-for=\"Token\"\n        >\n          <validation-provider\n            #default=\"{ errors }\"\n            rules=\"required\"\n            name=\"Token\"\n          >\n            <b-form-select\n              v-model=\"token\"\n            >\n              <b-form-select-option\n                v-for=\"item in balanceOptions\"\n                :key=\"item.denom\"\n                :value=\"item.denom\"\n              >\n                {{ format(item) }}\n              </b-form-select-option>\n            </b-form-select>\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Amount\"\n          label-for=\"Amount\"\n        >\n          <validation-provider\n            v-slot=\"{ errors }\"\n            rules=\"required|regex:^([0-9\\.]+)$\"\n            name=\"amount\"\n          >\n            <b-input-group class=\"mb-25\">\n              <b-form-input\n                id=\"Amount\"\n                v-model=\"amount\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Input a number\"\n                type=\"number\"\n              />\n              <b-input-group-append is-text>\n                {{ printDenom() }}\n              </b-input-group-append>\n            </b-input-group>\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n          <b-form-text>\n            â‰ˆ <strong class=\"text-primary\">{{ currencySign }}{{ valuation }}</strong>\n          </b-form-text>\n        </b-form-group>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\nimport { ValidationProvider } from 'vee-validate'\nimport {\n  BRow, BCol, BInputGroup, BInputGroupAppend, BFormInput, BFormGroup,\n  BFormSelect, BFormSelectOption, BFormText,\n} from 'bootstrap-vue'\nimport {\n  required, email, url, between, alpha, integer, password, min, digits, alphaDash, length,\n} from '@validations'\nimport {\n  formatToken, formatTokenDenom, getUnitAmount, getUserCurrency, getUserCurrencySign,\n} from '@/libs/utils'\n\nexport default {\n  name: 'TransforDialogue',\n  components: {\n    BRow,\n    BCol,\n    BInputGroup,\n    BInputGroupAppend,\n    BFormInput,\n    BFormText,\n    BFormGroup,\n    BFormSelect,\n    BFormSelectOption,\n    ValidationProvider,\n\n  },\n  props: {\n    address: {\n      type: String,\n      default: '',\n    },\n    balance: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      currency: getUserCurrency(),\n      currencySign: getUserCurrencySign(),\n      token: '',\n      amount: null,\n      recipient: '',\n      required,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash,\n    }\n  },\n  computed: {\n    msg() {\n      return [\n        {\n          typeUrl: '/cosmos.bank.v1beta1.MsgSend',\n          value: {\n            fromAddress: this.address,\n            toAddress: this.recipient,\n            amount: [\n              {\n                amount: getUnitAmount(this.amount, this.token),\n                denom: this.token,\n              },\n            ],\n          },\n        },\n      ]\n    },\n    balanceOptions() {\n      return this.setupBalance()\n    },\n    IBCDenom() {\n      return this.$store.state.chains.denoms\n    },\n    valuation() {\n      const { amount } = this\n      if (amount) {\n        const d2 = this.printDenom()\n        const quote = this.$store.state.chains.quotes[d2]\n        const price = quote ? quote[this.currency] : 0\n        return parseFloat((amount * price).toFixed(2))\n      }\n      return 0\n    },\n  },\n  mounted() {\n    this.$emit('update', {\n      modalTitle: 'Transfer Tokens',\n      historyName: 'send',\n    })\n  },\n\n  methods: {\n    setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom\n        return this.balance\n      }\n      return []\n    },\n    format(v) {\n      return formatToken(v, this.IBCDenom, 6)\n    },\n    printDenom() {\n      return formatTokenDenom(this.IBCDenom[this.token] || this.token)\n    },\n  },\n\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}