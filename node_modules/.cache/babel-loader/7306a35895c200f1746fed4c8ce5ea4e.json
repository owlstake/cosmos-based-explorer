{"ast":null,"code":"import _asyncToGenerator from \"/root/cosmos-based-explorer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.number.constructor.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider, ValidationObserver } from 'vee-validate';\nimport { BAvatar, BModal, BRow, BCol, BInputGroup, BInputGroupAppend, BInputGroupPrepend, BFormInput, BFormGroup, BFormSelect, BForm, BFormRadioGroup, BFormRadio, BFormCheckbox } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getLocalAccounts, getUnitAmount, setLocalTxHistory, sign, timeIn } from '@/libs/utils';\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue';\nimport { coin } from '@cosmjs/amino';\nimport { getChainConfigForSymbol } from '@/libs/osmos';\nimport dayjs from 'dayjs';\nexport default {\n  name: 'TransforDialogue',\n  components: {\n    BAvatar: BAvatar,\n    BModal: BModal,\n    BRow: BRow,\n    BCol: BCol,\n    BForm: BForm,\n    BInputGroup: BInputGroup,\n    BInputGroupAppend: BInputGroupAppend,\n    BFormInput: BFormInput,\n    BFormGroup: BFormGroup,\n    BFormSelect: BFormSelect,\n    BFormRadioGroup: BFormRadioGroup,\n    BFormRadio: BFormRadio,\n    BFormCheckbox: BFormCheckbox,\n    BInputGroupPrepend: BInputGroupPrepend,\n    ValidationProvider: ValidationProvider,\n    ValidationObserver: ValidationObserver,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent: ToastificationContent\n  },\n  props: {\n    symbol: {\n      type: String,\n      default: function _default() {\n        return '';\n      }\n    },\n    denomTrace: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      address: '',\n      // from address for deposit / to address for withdraw\n      addressOptions: [],\n      chainId: '',\n      selectedChain: '',\n      balance: {},\n      token: '',\n      amount: null,\n      memo: '',\n      recipient: null,\n      fee: '800',\n      feeDenom: '',\n      wallet: 'ledgerUSB',\n      error: null,\n      sequence: 1,\n      accountNumber: 0,\n      account: [],\n      IBCDenom: {},\n      gas: '200000',\n      advance: false,\n      paths: {},\n      destination: {},\n      channels: [],\n      timeoutHeight: {},\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  methods: {\n    recipientAddress: function recipientAddress() {\n      var chain = this.$route.params.chain;\n      var accounts = getLocalAccounts();\n      var current = this.$store.state.chains.defaultWallet;\n\n      if (accounts && accounts[current]) {\n        var acc = accounts[current].address.find(function (x) {\n          return x.chain === chain;\n        });\n\n        if (acc) {\n          this.recipient = acc.addr;\n        }\n      }\n\n      this.selectedChain = getChainConfigForSymbol(this.symbol);\n    },\n    computeAccount: function computeAccount() {\n      var _this = this;\n\n      this.recipientAddress();\n      var accounts = getLocalAccounts();\n      this.addressOptions = [];\n\n      if (accounts) {\n        var values = Object.values(accounts);\n\n        for (var i = 0; i < values.length; i += 1) {\n          var addr = values[i].address.find(function (x) {\n            return x.chain === _this.selectedChain.chain_name;\n          });\n\n          if (addr) {\n            if (this.addressOptions.length === 0) this.address = addr.addr;\n            this.addressOptions.push({\n              value: addr.addr,\n              text: addr.addr\n            });\n          }\n        }\n      }\n\n      return [];\n    },\n    init: function init() {\n      var _this2 = this;\n\n      this.destination = null;\n      this.token = '';\n      this.computeAccount();\n      this.loadBalance();\n\n      if (this.denomTrace) {\n        var part = this.denomTrace.path.split('/');\n        this.$http.getIBCChannel(part[1], part[0]).then(function (data) {\n          _this2.destination = data.channel.counterparty;\n          _this2.timeoutHeight = data.proof_height;\n        });\n      }\n    },\n    loadBalance: function loadBalance() {\n      var _this3 = this;\n\n      if (this.address) {\n        this.$http.getBankBalances(this.address, this.selectedChain).then(function (res) {\n          if (res && res.length > 0) {\n            _this3.balance = res.find(function (x) {\n              return formatTokenDenom(x.denom) === _this3.symbol;\n            });\n            _this3.denom = _this3.balance.denom;\n            _this3.feeDenom = _this3.balance.denom;\n          }\n        });\n        this.$http.getLatestBlock(this.selectedChain).then(function (ret) {\n          _this3.chainId = ret.block.header.chain_id;\n          var notSynced = timeIn(ret.block.header.time, 10, 'm');\n\n          if (notSynced) {\n            _this3.error = 'Client is not synced or blockchain is halted';\n          } else {\n            _this3.error = null;\n          }\n        });\n        this.$http.getAuthAccount(this.address, this.selectedChain).then(function (ret) {\n          if (ret.value.base_vesting_account) {\n            _this3.accountNumber = ret.value.base_vesting_account.base_account.account_number;\n            _this3.sequence = ret.value.base_vesting_account.base_account.sequence;\n            if (!_this3.sequence) _this3.sequence = 0;\n          } else {\n            _this3.accountNumber = ret.value.account_number;\n            _this3.sequence = ret.value.sequence ? ret.value.sequence : 0;\n          }\n        });\n      }\n    },\n    handleOk: function handleOk(bvModalEvt) {\n      var _this4 = this;\n\n      // console.log('send')\n      // Prevent modal from closing\n      bvModalEvt.preventDefault(); // Trigger submit handler\n      // this.handleSubmit()\n\n      this.send().then(function (ret) {\n        // console.log(ret)\n        _this4.error = ret;\n      });\n    },\n    resetModal: function resetModal() {\n      this.feeDenom = '';\n      this.error = null;\n    },\n    format: function format(v) {\n      return formatToken(v, {}, 6, false);\n    },\n    send: function send() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var timeout, txMsgs, txFee, signerData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (_this5.destination) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _this5.error = 'You have to select a destination';\n                return _context.abrupt(\"return\");\n\n              case 3:\n                timeout = dayjs().add(4, 'hour');\n                txMsgs = [{\n                  typeUrl: '/ibc.applications.transfer.v1.MsgTransfer',\n                  value: {\n                    sourcePort: _this5.destination.port_id,\n                    sourceChannel: _this5.destination.channel_id,\n                    token: coin(Number(getUnitAmount(_this5.amount, _this5.denomTrace.base_denom)), _this5.denomTrace.base_denom),\n                    sender: _this5.address,\n                    receiver: _this5.recipient,\n                    // timeoutHeight: {\n                    //   revisionNumber: '0',\n                    //   revisionHeight: '0',\n                    // },\n                    timeoutTimestamp: String(timeout.utc().valueOf() * 1000000)\n                  }\n                } // {\n                //   type: 'cosmos-sdk/MsgTransfer',\n                //   value: {\n                //     source_port: this.destination.port_id,\n                //     source_channel: this.destination.channel_id,\n                //     token: coin(Number(getUnitAmount(this.amount, this.denomTrace.base_denom)), this.denomTrace.base_denom),\n                //     sender: this.address,\n                //     receiver: this.recipient,\n                //     timeout_height: {\n                //       revision_number: String(this.timeoutHeight.revision_number),\n                //       revision_height: String(200 + parseInt(this.timeoutHeight.revision_height, 10)),\n                //     },\n                //     timeout_timestamp: '0',\n                //   },\n                // },\n                ];\n                txFee = {\n                  amount: [{\n                    amount: _this5.fee,\n                    denom: _this5.feeDenom\n                  }],\n                  gas: _this5.gas\n                };\n                signerData = {\n                  accountNumber: _this5.accountNumber,\n                  sequence: _this5.sequence,\n                  chainId: _this5.chainId\n                };\n                sign(_this5.wallet, _this5.chainId, _this5.address, txMsgs, txFee, _this5.memo, signerData).then(function (bodyBytes) {\n                  _this5.$http.broadcastTx(bodyBytes, _this5.selectedChain).then(function (res) {\n                    setLocalTxHistory({\n                      op: 'ibc_sender',\n                      hash: res.txhash,\n                      time: new Date()\n                    });\n\n                    _this5.$bvModal.hide('trading-deposte-window');\n\n                    _this5.$toast({\n                      component: ToastificationContent,\n                      props: {\n                        title: 'Transaction sent!',\n                        icon: 'EditIcon',\n                        variant: 'success'\n                      }\n                    });\n                  }).catch(function (e) {\n                    _this5.error = e;\n                  });\n                }).catch(function (e) {\n                  _this5.error = e;\n                }); // Send tokens\n                // return client.sendTokens(this.address, this.recipient, sendCoins, this.memo)\n                // return\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["BAvatar","BModal","BRow","BCol","BInputGroup","BInputGroupAppend","BInputGroupPrepend","BFormInput","BFormGroup","BFormSelect","BForm","BFormRadioGroup","BFormRadio","BFormCheckbox","required","email","url","between","alpha","integer","password","min","digits","alphaDash","length","formatToken","formatTokenDenom","getLocalAccounts","getUnitAmount","setLocalTxHistory","sign","timeIn","name","components","ValidationProvider","ValidationObserver","ToastificationContent","props","symbol","type","default","denomTrace","data","address","addressOptions","chainId","selectedChain","balance","token","amount","memo","recipient","fee","feeDenom","wallet","error","sequence","accountNumber","account","IBCDenom","gas","advance","paths","destination","channels","timeoutHeight","methods","recipientAddress","computeAccount","value","text","init","loadBalance","handleOk","bvModalEvt","resetModal","format","v","send","timeout","dayjs","txMsgs","typeUrl","sourcePort","sourceChannel","sender","receiver","timeoutTimestamp","txFee","denom","signerData","then","op","hash","time","component","title","icon","variant","catch"],"sourceRoot":"src/views/components/KlineTrade","sources":["DepositeWindow.vue"],"sourcesContent":["<template>\n  <div>\n    <b-modal\n      id=\"trading-deposte-window\"\n      centered\n      size=\"md\"\n      title=\"Cross Chain Deposit Tokens\"\n      ok-title=\"Send\"\n      hide-header-close\n      scrollable\n      :ok-disabled=\"!address\"\n      @hidden=\"resetModal\"\n      @ok=\"handleOk\"\n      @show=\"init\"\n    >\n      <template #modal-header=\"\" />\n      <validation-observer ref=\"simpleRules\">\n        <b-form>\n          <b-row>\n            <b-col>\n              <b-form-group\n                label=\"Sender Address\"\n                label-for=\"from\"\n              >\n                <validation-provider\n                  v-slot=\"{ errors }\"\n                  rules=\"required\"\n                  name=\"from\"\n                >\n                  <b-input-group>\n                    <b-input-group-prepend is-text>\n                      <b-avatar\n                        :src=\"selectedChain.logo\"\n                        size=\"18\"\n                        variant=\"light-primary\"\n                        rounded\n                      />\n                    </b-input-group-prepend>\n                    <b-form-select\n                      id=\"from\"\n                      v-model=\"address\"\n                      :options=\"addressOptions\"\n                      :state=\"errors.length > 0 ? false:null\"\n                      @change=\"loadBalance()\"\n                    />\n                  </b-input-group>\n                  <small class=\"text-danger\">{{ errors[0] }}</small>\n                </validation-provider>\n              </b-form-group>\n            </b-col>\n          </b-row>\n          <b-row class=\"d-none\">\n            <b-col>\n              <b-form-group\n                label=\"Recipient Address\"\n                label-for=\"Recipient\"\n              >\n                <validation-provider\n                  #default=\"{ errors }\"\n                  rules=\"required\"\n                  name=\"recipient\"\n                >\n                  <b-input-group class=\"mb-25\">\n                    <b-form-input\n                      id=\"Recipient\"\n                      v-model=\"recipient\"\n                      :state=\"errors.length > 0 ? false:null\"\n                    />\n                  </b-input-group>\n                  <small class=\"text-danger\">{{ errors[0] }}</small>\n                </validation-provider>\n              </b-form-group>\n            </b-col>\n          </b-row>\n          <b-row>\n            <b-col>\n              <div class=\"d-flex justify-content-between\">\n                <span>Amount</span>\n                <span>\n                  <small\n                    v-if=\"balance.amount > 0\"\n                    class=\"mr-1\"\n                  >Available: <b class=\"font-weight-bolder text-success\">{{ format(balance) }}</b> {{ symbol }}</small>\n                </span>\n              </div>\n              <b-form-group>\n                <validation-provider\n                  v-slot=\"{ errors }\"\n                  rules=\"required|regex:^([0-9\\.]+)$\"\n                  name=\"amount\"\n                >\n                  <b-input-group class=\"mb-25\">\n                    <b-form-input\n                      id=\"Amount\"\n                      v-model=\"amount\"\n                      :state=\"errors.length > 0 ? false:null\"\n                      placeholder=\"Input a number\"\n                      type=\"number\"\n                    />\n                    <b-input-group-append is-text>\n                      {{ symbol }}\n                    </b-input-group-append>\n                  </b-input-group>\n                  <small class=\"text-danger\">{{ errors[0] }}</small>\n                </validation-provider>\n              </b-form-group>\n            </b-col>\n          </b-row>\n          <b-row>\n            <b-col>\n              <b-form-group\n                label=\"Fee\"\n                label-for=\"Fee\"\n              >\n                <validation-provider\n                  v-slot=\"{ errors }\"\n                  rules=\"required|integer\"\n                  name=\"fee\"\n                >\n                  <b-input-group>\n                    <b-form-input v-model=\"fee\" />\n                    <b-input-group-append is-text>\n                      {{ feeDenom }}\n                    </b-input-group-append>\n                  </b-input-group>\n                  <small class=\"text-danger\">{{ errors[0] }}</small>\n                </validation-provider>\n              </b-form-group>\n            </b-col>\n            <b-col cols=\"12\">\n              <b-form-group>\n                <b-form-checkbox\n                  v-model=\"advance\"\n                  name=\"advance\"\n                  value=\"true\"\n                >\n                  <small>Advanced</small>\n                </b-form-checkbox>\n              </b-form-group>\n            </b-col>\n          </b-row>\n          <b-row v-if=\"advance\">\n            <b-col cols=\"12\">\n              <b-form-group\n                label=\"Gas\"\n                label-for=\"gas\"\n              >\n                <validation-provider\n                  v-slot=\"{ errors }\"\n                  name=\"gas\"\n                >\n                  <b-form-input\n                    id=\"gas\"\n                    v-model=\"gas\"\n                    type=\"number\"\n                  />\n                  <small class=\"text-danger\">{{ errors[0] }}</small>\n                </validation-provider>\n              </b-form-group>\n            </b-col>\n            <b-col cols=\"12\">\n              <b-form-group\n                label=\"Memo\"\n                label-for=\"Memo\"\n              >\n                <validation-provider\n                  v-slot=\"{ errors }\"\n                  name=\"memo\"\n                >\n                  <b-form-input\n                    id=\"Memo\"\n                    v-model=\"memo\"\n                    max=\"2\"\n                  />\n                  <small class=\"text-danger\">{{ errors[0] }}</small>\n                </validation-provider>\n              </b-form-group>\n            </b-col>\n          </b-row>\n\n          <b-row>\n            <b-col>\n              <b-form-group\n                label=\"Siger\"\n                label-for=\"wallet\"\n              >\n                <validation-provider\n                  v-slot=\"{ errors }\"\n                  rules=\"required\"\n                  name=\"wallet\"\n                >\n                  <b-form-radio-group\n                    v-model=\"wallet\"\n                    stacked\n                    class=\"demo-inline-spacing\"\n                  >\n                    <b-form-radio\n                      v-model=\"wallet\"\n                      name=\"wallet\"\n                      value=\"keplr\"\n                      class=\"d-none d-md-block\"\n                    >\n                      Keplr\n                    </b-form-radio>\n                    <b-form-radio\n                      v-model=\"wallet\"\n                      name=\"wallet\"\n                      value=\"ledgerUSB\"\n                    >\n                      <small>Ledger(USB)</small>\n                    </b-form-radio>\n                    <b-form-radio\n                      v-model=\"wallet\"\n                      name=\"wallet\"\n                      value=\"ledgerBle\"\n                      class=\"mr-0\"\n                    >\n                      <small>Ledger(Bluetooth)</small>\n                    </b-form-radio>\n                  </b-form-radio-group>\n                  <small class=\"text-danger\">{{ errors[0] }}</small>\n                </validation-provider>\n              </b-form-group>\n            </b-col>\n          </b-row>\n        </b-form>\n      </validation-observer>\n      {{ error }}\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport { ValidationProvider, ValidationObserver } from 'vee-validate'\nimport {\n  BAvatar, BModal, BRow, BCol, BInputGroup, BInputGroupAppend, BInputGroupPrepend, BFormInput, BFormGroup, BFormSelect, BForm, BFormRadioGroup, BFormRadio, BFormCheckbox,\n} from 'bootstrap-vue'\nimport {\n  required, email, url, between, alpha, integer, password, min, digits, alphaDash, length,\n} from '@validations'\nimport {\n  formatToken, formatTokenDenom, getLocalAccounts, getUnitAmount, setLocalTxHistory, sign, timeIn,\n} from '@/libs/utils'\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue'\nimport { coin } from '@cosmjs/amino'\nimport { getChainConfigForSymbol } from '@/libs/osmos'\nimport dayjs from 'dayjs'\n\nexport default {\n  name: 'TransforDialogue',\n  components: {\n    BAvatar,\n    BModal,\n    BRow,\n    BCol,\n    BForm,\n    BInputGroup,\n    BInputGroupAppend,\n    BFormInput,\n    BFormGroup,\n    BFormSelect,\n    BFormRadioGroup,\n    BFormRadio,\n    BFormCheckbox,\n    BInputGroupPrepend,\n\n    ValidationProvider,\n    ValidationObserver,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent,\n  },\n  props: {\n    symbol: {\n      type: String,\n      default: () => '',\n    },\n    denomTrace: {\n      type: Object,\n      default: () => {},\n    },\n  },\n  data() {\n    return {\n      address: '', // from address for deposit / to address for withdraw\n      addressOptions: [],\n      chainId: '',\n      selectedChain: '',\n      balance: {},\n      token: '',\n      amount: null,\n      memo: '',\n      recipient: null,\n      fee: '800',\n      feeDenom: '',\n      wallet: 'ledgerUSB',\n      error: null,\n      sequence: 1,\n      accountNumber: 0,\n      account: [],\n      IBCDenom: {},\n      gas: '200000',\n      advance: false,\n      paths: {},\n      destination: {},\n      channels: [],\n      timeoutHeight: {},\n\n      required,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash,\n    }\n  },\n  methods: {\n    recipientAddress() {\n      const { chain } = this.$route.params\n      const accounts = getLocalAccounts()\n      const current = this.$store.state.chains.defaultWallet\n      if (accounts && accounts[current]) {\n        const acc = accounts[current].address.find(x => x.chain === chain)\n        if (acc) {\n          this.recipient = acc.addr\n        }\n      }\n      this.selectedChain = getChainConfigForSymbol(this.symbol)\n    },\n    computeAccount() {\n      this.recipientAddress()\n      const accounts = getLocalAccounts()\n      this.addressOptions = []\n      if (accounts) {\n        const values = Object.values(accounts)\n        for (let i = 0; i < values.length; i += 1) {\n          const addr = values[i].address.find(x => x.chain === this.selectedChain.chain_name)\n          if (addr) {\n            if (this.addressOptions.length === 0) this.address = addr.addr\n            this.addressOptions.push({ value: addr.addr, text: addr.addr })\n          }\n        }\n      }\n      return []\n    },\n    init() {\n      this.destination = null\n      this.token = ''\n      this.computeAccount()\n      this.loadBalance()\n      if (this.denomTrace) {\n        const part = this.denomTrace.path.split('/')\n        this.$http.getIBCChannel(part[1], part[0]).then(data => {\n          this.destination = data.channel.counterparty\n          this.timeoutHeight = data.proof_height\n        })\n      }\n    },\n    loadBalance() {\n      if (this.address) {\n        this.$http.getBankBalances(this.address, this.selectedChain).then(res => {\n          if (res && res.length > 0) {\n            this.balance = res.find(x => formatTokenDenom(x.denom) === this.symbol)\n            this.denom = this.balance.denom\n            this.feeDenom = this.balance.denom\n          }\n        })\n        this.$http.getLatestBlock(this.selectedChain).then(ret => {\n          this.chainId = ret.block.header.chain_id\n          const notSynced = timeIn(ret.block.header.time, 10, 'm')\n          if (notSynced) {\n            this.error = 'Client is not synced or blockchain is halted'\n          } else {\n            this.error = null\n          }\n        })\n        this.$http.getAuthAccount(this.address, this.selectedChain).then(ret => {\n          if (ret.value.base_vesting_account) {\n            this.accountNumber = ret.value.base_vesting_account.base_account.account_number\n            this.sequence = ret.value.base_vesting_account.base_account.sequence\n            if (!this.sequence) this.sequence = 0\n          } else {\n            this.accountNumber = ret.value.account_number\n            this.sequence = ret.value.sequence ? ret.value.sequence : 0\n          }\n        })\n      }\n    },\n    handleOk(bvModalEvt) {\n      // console.log('send')\n      // Prevent modal from closing\n      bvModalEvt.preventDefault()\n      // Trigger submit handler\n      // this.handleSubmit()\n      this.send().then(ret => {\n        // console.log(ret)\n        this.error = ret\n      })\n    },\n    resetModal() {\n      this.feeDenom = ''\n      this.error = null\n    },\n    format(v) {\n      return formatToken(v, {}, 6, false)\n    },\n    async send() {\n      if (!this.destination) {\n        this.error = 'You have to select a destination'\n        return\n      }\n      const timeout = dayjs().add(4, 'hour')\n      const txMsgs = [\n        {\n          typeUrl: '/ibc.applications.transfer.v1.MsgTransfer',\n          value: {\n            sourcePort: this.destination.port_id,\n            sourceChannel: this.destination.channel_id,\n            token: coin(Number(getUnitAmount(this.amount, this.denomTrace.base_denom)), this.denomTrace.base_denom),\n            sender: this.address,\n            receiver: this.recipient,\n            // timeoutHeight: {\n            //   revisionNumber: '0',\n            //   revisionHeight: '0',\n            // },\n            timeoutTimestamp: String(timeout.utc().valueOf() * 1000000),\n          },\n        },\n        // {\n        //   type: 'cosmos-sdk/MsgTransfer',\n        //   value: {\n        //     source_port: this.destination.port_id,\n        //     source_channel: this.destination.channel_id,\n        //     token: coin(Number(getUnitAmount(this.amount, this.denomTrace.base_denom)), this.denomTrace.base_denom),\n        //     sender: this.address,\n        //     receiver: this.recipient,\n        //     timeout_height: {\n        //       revision_number: String(this.timeoutHeight.revision_number),\n        //       revision_height: String(200 + parseInt(this.timeoutHeight.revision_height, 10)),\n        //     },\n        //     timeout_timestamp: '0',\n        //   },\n        // },\n      ]\n\n      const txFee = {\n        amount: [\n          {\n            amount: this.fee,\n            denom: this.feeDenom,\n          },\n        ],\n        gas: this.gas,\n      }\n\n      const signerData = {\n        accountNumber: this.accountNumber,\n        sequence: this.sequence,\n        chainId: this.chainId,\n      }\n\n      sign(\n        this.wallet,\n        this.chainId,\n        this.address,\n        txMsgs,\n        txFee,\n        this.memo,\n        signerData,\n      ).then(bodyBytes => {\n        this.$http.broadcastTx(bodyBytes, this.selectedChain).then(res => {\n          setLocalTxHistory({ op: 'ibc_sender', hash: res.txhash, time: new Date() })\n          this.$bvModal.hide('trading-deposte-window')\n          this.$toast({\n            component: ToastificationContent,\n            props: {\n              title: 'Transaction sent!',\n              icon: 'EditIcon',\n              variant: 'success',\n            },\n          })\n        }).catch(e => {\n          this.error = e\n        })\n      }).catch(e => {\n        this.error = e\n      })\n      // Send tokens\n      // return client.sendTokens(this.address, this.recipient, sendCoins, this.memo)\n      // return\n    },\n  },\n}\n</script>\n<style lang=\"scss\">\n@import '@core/scss/vue/libs/vue-select.scss';\n</style>\n"]},"metadata":{},"sourceType":"module"}