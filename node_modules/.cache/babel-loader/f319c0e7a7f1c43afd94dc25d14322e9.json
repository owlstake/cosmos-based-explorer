{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.slice.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// This will be populated in `beforeCreate` hook\nimport { $themeColors, $themeBreakpoints, $themeConfig } from '@themeConfig';\nimport { provideToast } from 'vue-toastification/composition';\nimport { watch } from '@vue/composition-api';\nimport useAppConfig from '@core/app-config/useAppConfig';\nimport { useWindowSize, useCssVar } from '@vueuse/core';\nimport store from '@/store';\n\nvar LayoutVertical = function LayoutVertical() {\n  return import('@/layouts/vertical/LayoutVertical.vue');\n};\n\nvar LayoutFull = function LayoutFull() {\n  return import('@/layouts/full/LayoutFull.vue');\n};\n\nexport default {\n  components: {\n    // Layouts\n    LayoutVertical: LayoutVertical,\n    LayoutFull: LayoutFull\n  },\n  setup: function setup() {\n    var _useAppConfig = useAppConfig(),\n        skin = _useAppConfig.skin,\n        skinClasses = _useAppConfig.skinClasses; // If skin is dark when initialized => Add class to body\n\n\n    if (skin.value === 'dark') document.body.classList.add('dark-layout'); // Provide toast for Composition API usage\n    // This for those apps/components which uses composition API\n    // Demos will still use Options API for ease\n\n    provideToast({\n      hideProgressBar: true,\n      closeOnClick: false,\n      closeButton: false,\n      icon: false,\n      timeout: 3000,\n      transition: 'Vue-Toastification__fade'\n    }); // Set Window Width in store\n\n    store.commit('app/UPDATE_WINDOW_WIDTH', window.innerWidth);\n\n    var _useWindowSize = useWindowSize(),\n        windowWidth = _useWindowSize.width;\n\n    watch(windowWidth, function (val) {\n      store.commit('app/UPDATE_WINDOW_WIDTH', val);\n    });\n    return {\n      skinClasses: skinClasses\n    };\n  },\n  // ! We can move this computed: layout & contentLayoutType once we get to use Vue 3\n  // Currently, router.currentRoute is not reactive and doesn't trigger any change\n  computed: {\n    layout: function layout() {\n      if (!this.$route.name || this.$route.meta.layout === 'full') return 'layout-full';\n      return \"layout-\".concat(this.contentLayoutType);\n    },\n    contentLayoutType: function contentLayoutType() {\n      return this.$store.state.appConfig.layout.type;\n    }\n  },\n  beforeCreate: function beforeCreate() {\n    // Set colors in theme\n    var colors = ['primary', 'secondary', 'success', 'info', 'warning', 'danger', 'light', 'dark']; // eslint-disable-next-line no-plusplus\n\n    for (var i = 0, len = colors.length; i < len; i++) {\n      $themeColors[colors[i]] = useCssVar(\"--\".concat(colors[i]), document.documentElement).value.trim();\n    } // Set Theme Breakpoints\n\n\n    var breakpoints = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl']; // eslint-disable-next-line no-plusplus\n\n    for (var _i = 0, _len = breakpoints.length; _i < _len; _i++) {\n      $themeBreakpoints[breakpoints[_i]] = Number(useCssVar(\"--breakpoint-\".concat(breakpoints[_i]), document.documentElement).value.slice(0, -2));\n    } // Set RTL\n\n\n    var isRTL = $themeConfig.layout.isRTL;\n    document.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');\n  },\n  created: function created() {\n    store.dispatch('chains/getQuotes');\n    store.dispatch('chains/getAllIBCDenoms', this);\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;EAAA;AAAA;;AACA;EAAA;AAAA;;AAEA;EACAA;IACA;IACAC,8BAFA;IAGAC;EAHA,CADA;EAMAC,KANA,mBAMA;IACA;IAAA;IAAA,4CADA,CAGA;;;IACA,sEAJA,CAMA;IACA;IACA;;IACAC;MACAC,qBADA;MAEAC,mBAFA;MAGAC,kBAHA;MAIAC,WAJA;MAKAC,aALA;MAMAC;IANA,GATA,CAkBA;;IACAC;;IACA;IAAA;;IACAC;MACAD;IACA,CAFA;IAIA;MACAE;IADA;EAGA,CAlCA;EAmCA;EACA;EACAC;IACAC,MADA,oBACA;MACA;MACA;IACA,CAJA;IAKAC,iBALA,+BAKA;MACA;IACA;EAPA,CArCA;EA8CAC,YA9CA,0BA8CA;IACA;IACA,+FAFA,CAIA;;IACA;MACAC;IACA,CAPA,CASA;;;IACA,wDAVA,CAYA;;IACA;MACAC,4CACAC,+FADA;IAGA,CAjBA,CAmBA;;;IACA;IACAC;EACA,CApEA;EAqEAC,OArEA,qBAqEA;IACAX;IACAA;EACA;AAxEA","names":["components","LayoutVertical","LayoutFull","setup","provideToast","hideProgressBar","closeOnClick","closeButton","icon","timeout","transition","store","watch","skinClasses","computed","layout","contentLayoutType","beforeCreate","$themeColors","$themeBreakpoints","useCssVar","document","created"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n  <div\n    id=\"app\"\n    class=\"h-100\"\n    :class=\"[skinClasses]\"\n  >\n    <component :is=\"layout\">\n      <router-view />\n    </component>\n  </div>\n</template>\n\n<script>\n// This will be populated in `beforeCreate` hook\nimport { $themeColors, $themeBreakpoints, $themeConfig } from '@themeConfig'\nimport { provideToast } from 'vue-toastification/composition'\nimport { watch } from '@vue/composition-api'\nimport useAppConfig from '@core/app-config/useAppConfig'\n\nimport { useWindowSize, useCssVar } from '@vueuse/core'\n\nimport store from '@/store'\n\nconst LayoutVertical = () => import('@/layouts/vertical/LayoutVertical.vue')\nconst LayoutFull = () => import('@/layouts/full/LayoutFull.vue')\n\nexport default {\n  components: {\n    // Layouts\n    LayoutVertical,\n    LayoutFull,\n  },\n  setup() {\n    const { skin, skinClasses } = useAppConfig()\n\n    // If skin is dark when initialized => Add class to body\n    if (skin.value === 'dark') document.body.classList.add('dark-layout')\n\n    // Provide toast for Composition API usage\n    // This for those apps/components which uses composition API\n    // Demos will still use Options API for ease\n    provideToast({\n      hideProgressBar: true,\n      closeOnClick: false,\n      closeButton: false,\n      icon: false,\n      timeout: 3000,\n      transition: 'Vue-Toastification__fade',\n    })\n\n    // Set Window Width in store\n    store.commit('app/UPDATE_WINDOW_WIDTH', window.innerWidth)\n    const { width: windowWidth } = useWindowSize()\n    watch(windowWidth, val => {\n      store.commit('app/UPDATE_WINDOW_WIDTH', val)\n    })\n\n    return {\n      skinClasses,\n    }\n  },\n  // ! We can move this computed: layout & contentLayoutType once we get to use Vue 3\n  // Currently, router.currentRoute is not reactive and doesn't trigger any change\n  computed: {\n    layout() {\n      if (!this.$route.name || this.$route.meta.layout === 'full') return 'layout-full'\n      return `layout-${this.contentLayoutType}`\n    },\n    contentLayoutType() {\n      return this.$store.state.appConfig.layout.type\n    },\n  },\n  beforeCreate() {\n    // Set colors in theme\n    const colors = ['primary', 'secondary', 'success', 'info', 'warning', 'danger', 'light', 'dark']\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0, len = colors.length; i < len; i++) {\n      $themeColors[colors[i]] = useCssVar(`--${colors[i]}`, document.documentElement).value.trim()\n    }\n\n    // Set Theme Breakpoints\n    const breakpoints = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl']\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0, len = breakpoints.length; i < len; i++) {\n      $themeBreakpoints[breakpoints[i]] = Number(\n        useCssVar(`--breakpoint-${breakpoints[i]}`, document.documentElement).value.slice(0, -2),\n      )\n    }\n\n    // Set RTL\n    const { isRTL } = $themeConfig.layout\n    document.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr')\n  },\n  created() {\n    store.dispatch('chains/getQuotes')\n    store.dispatch('chains/getAllIBCDenoms', this)\n  },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}