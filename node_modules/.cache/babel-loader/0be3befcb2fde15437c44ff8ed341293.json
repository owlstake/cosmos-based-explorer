{"ast":null,"code":"import _asyncToGenerator from \"/root/cosmos-based-explorer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider, ValidationObserver } from 'vee-validate';\nimport { BAvatar, BModal, BRow, BCol, BInputGroup, BFormInput, BFormGroup, BFormSelect, BFormSelectOption, BForm, BButton, BInputGroupAppend, BFormCheckbox, BOverlay, BAlert } from 'bootstrap-vue';\nimport Ripple from 'vue-ripple-directive';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { extractAccountNumberAndSequence, getLocalAccounts, setLocalTxHistory, sign, timeIn } from '@/libs/utils';\nimport vSelect from 'vue-select';\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue';\nimport WalletInputVue from './WalletInput.vue';\nimport Delegate from './components/Delegate.vue';\nimport Redelegate from './components/Redelegate.vue';\nimport Withdraw from './components/Withdraw.vue';\nimport Unbond from './components/Unbond.vue';\nimport Transfer from './components/Transfer.vue';\nimport IBCTransfer from './components/IBCTransfer.vue';\nimport Vote from './components/Vote.vue';\nimport WithdrawCommission from './components/WithdrawCommission.vue';\nimport GovDeposit from './components/GovDeposit.vue';\nimport TransactionResult from './TransactionResult.vue';\nexport default {\n  name: 'DelegateDialogue',\n  components: {\n    BAlert: BAlert,\n    BAvatar: BAvatar,\n    BModal: BModal,\n    BRow: BRow,\n    BCol: BCol,\n    BForm: BForm,\n    BInputGroup: BInputGroup,\n    BFormInput: BFormInput,\n    BFormGroup: BFormGroup,\n    BFormSelect: BFormSelect,\n    BFormSelectOption: BFormSelectOption,\n    BFormCheckbox: BFormCheckbox,\n    vSelect: vSelect,\n    BButton: BButton,\n    BInputGroupAppend: BInputGroupAppend,\n    BOverlay: BOverlay,\n    WalletInputVue: WalletInputVue,\n    ValidationProvider: ValidationProvider,\n    ValidationObserver: ValidationObserver,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent: ToastificationContent,\n    Delegate: Delegate,\n    Redelegate: Redelegate,\n    Withdraw: Withdraw,\n    Unbond: Unbond,\n    Transfer: Transfer,\n    IBCTransfer: IBCTransfer,\n    Vote: Vote,\n    WithdrawCommission: WithdrawCommission,\n    GovDeposit: GovDeposit,\n    TransactionResult: TransactionResult\n  },\n  directives: {\n    Ripple: Ripple\n  },\n  props: {\n    type: {\n      type: String,\n      default: ''\n    },\n    modalId: {\n      type: String,\n      default: 'operation-modal'\n    },\n    validatorAddress: {\n      type: String,\n      default: null\n    },\n    address: {\n      type: String,\n      default: null\n    },\n    proposalId: {\n      type: Number,\n      default: null\n    },\n    proposalTitle: {\n      type: String,\n      default: null\n    },\n    selectedChainName: {\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      modalTitle: '',\n      historyName: '',\n      selectedValidator: null,\n      token: '',\n      chainId: '',\n      balance: [],\n      IBCDenom: {},\n      error: null,\n      showDismissibleAlert: false,\n      sequence: 1,\n      accountNumber: 0,\n      advance: false,\n      fee: '900',\n      feeDenom: '',\n      wallet: 'ledgerUSB',\n      gas: '250000',\n      memo: '',\n      blockingMsg: this.address ? 'You are not the owner' : 'No available account found.',\n      actionName: 'Send',\n      showResult: false,\n      txHash: '',\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  computed: {\n    feeDenoms: function feeDenoms() {\n      if (!this.balance) return [];\n      return this.balance.filter(function (item) {\n        return !item.denom.startsWith('ibc');\n      });\n    },\n    accounts: function accounts() {\n      var accounts = getLocalAccounts();\n      var selectedWallet = this.$store.state.chains.defaultWallet;\n      return accounts[selectedWallet];\n    },\n    isOwner: function isOwner() {\n      var _this = this;\n\n      if (this.accounts) {\n        this.updateWallet(this.accounts.device);\n\n        if (this.accounts.address.findIndex(function (x) {\n          return x.addr === _this.selectedAddress;\n        }) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    selectedAddress: function selectedAddress() {\n      if (this.address) {\n        return this.address;\n      }\n\n      var chain = this.$store.state.chains.selected.chain_name;\n      var selectedAddress = this.accounts.address.find(function (x) {\n        return x.chain === chain;\n      });\n      return selectedAddress === null || selectedAddress === void 0 ? void 0 : selectedAddress.addr;\n    },\n    selectedChain: function selectedChain() {\n      var config = null;\n      var allChains = localStorage.getItem('chains');\n\n      if (allChains && this.selectedChainName) {\n        config = JSON.parse(allChains)[this.selectedChainName];\n      }\n\n      return config;\n    }\n  },\n  methods: {\n    initialize: function initialize() {\n      var _this2 = this;\n\n      if (this.isOwner && this.selectedAddress) {\n        var _this$$store$state$ch, _this$$store$state$ch2, _this$$store$state$ch3;\n\n        this.$http.getLatestBlock().then(function (ret) {\n          _this2.chainId = ret.block.header.chain_id;\n          var notSynced = timeIn(ret.block.header.time, 10, 'm');\n\n          if (notSynced) {\n            _this2.error = 'Client is not synced or blockchain is halted';\n          } else {\n            _this2.error = null;\n          }\n        });\n        this.$http.getAuthAccount(this.selectedAddress).then(function (ret) {\n          var account = extractAccountNumberAndSequence(ret);\n          _this2.accountNumber = account.accountNumber;\n          _this2.sequence = account.sequence;\n        });\n        this.$http.getBankBalances(this.selectedAddress, this.selectedChain).then(function (res) {\n          if (res && res.length > 0) {\n            _this2.balance = res.reverse();\n\n            var token = _this2.balance.find(function (i) {\n              return !i.denom.startsWith('ibc');\n            });\n\n            _this2.token = token.denom;\n            if (token) _this2.feeDenom = token.denom;\n          }\n        });\n        this.fee = ((_this$$store$state$ch = this.$store.state.chains.selected) === null || _this$$store$state$ch === void 0 ? void 0 : _this$$store$state$ch.min_tx_fee) || '1000';\n        this.feeDenom = ((_this$$store$state$ch2 = this.$store.state.chains.selected) === null || _this$$store$state$ch2 === void 0 ? void 0 : (_this$$store$state$ch3 = _this$$store$state$ch2.assets[0]) === null || _this$$store$state$ch3 === void 0 ? void 0 : _this$$store$state$ch3.base) || '';\n      }\n    },\n    componentUpdate: function componentUpdate(obj) {\n      var _this3 = this;\n\n      Object.keys(obj).forEach(function (key) {\n        _this3[key] = obj[key];\n      });\n    },\n    handleOk: function handleOk(bvModalEvt) {\n      var _this4 = this;\n\n      bvModalEvt.preventDefault();\n      this.$refs.simpleRules.validate().then(function (ok) {\n        if (ok) {\n          _this4.sendTx().then(function (ret) {\n            _this4.error = ret;\n          });\n        }\n      });\n    },\n    resetModal: function resetModal() {\n      this.feeDenom = '';\n      this.error = null;\n      this.showResult = false;\n    },\n    sendTx: function sendTx() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var txMsgs, txFee, signerData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                txMsgs = _this5.$refs.component.msg;\n\n                if (!(txMsgs.length === 0)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _this5.error = 'No delegation found';\n                return _context.abrupt(\"return\", '');\n\n              case 4:\n                if (_this5.accountNumber) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _this5.error = 'Account number should not be empty!';\n                return _context.abrupt(\"return\", '');\n\n              case 7:\n                txFee = {\n                  amount: [{\n                    amount: _this5.fee,\n                    denom: _this5.feeDenom\n                  }],\n                  gas: _this5.gas\n                };\n                signerData = {\n                  accountNumber: _this5.accountNumber,\n                  sequence: _this5.sequence,\n                  chainId: _this5.chainId\n                };\n                sign(_this5.wallet, _this5.chainId, _this5.selectedAddress, txMsgs, txFee, _this5.memo, signerData).then(function (bodyBytes) {\n                  _this5.showResult = true;\n\n                  _this5.$http.broadcastTx(bodyBytes, _this5.selectedChain).then(function (res) {\n                    _this5.txHash = res.tx_response.txhash;\n                    setLocalTxHistory({\n                      chain: _this5.$store.state.chains.selected,\n                      op: _this5.historyName,\n                      hash: res.tx_response.txhash,\n                      time: new Date()\n                    });\n                  }).catch(function (e) {\n                    _this5.showResult = false;\n                    _this5.error = e;\n                    _this5.showDismissibleAlert = true;\n                  });\n                }).catch(function (e) {\n                  _this5.showResult = false;\n                  _this5.error = e;\n                  _this5.showDismissibleAlert = true;\n                });\n                return _context.abrupt(\"return\", '');\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    updateWallet: function updateWallet(v) {\n      if (v && v === 'address') {\n        this.wallet = 'keplr';\n      } else {\n        this.wallet = v;\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["BAvatar","BModal","BRow","BCol","BInputGroup","BFormInput","BFormGroup","BFormSelect","BFormSelectOption","BForm","BButton","BInputGroupAppend","BFormCheckbox","BOverlay","BAlert","required","email","url","between","alpha","integer","password","min","digits","alphaDash","length","extractAccountNumberAndSequence","getLocalAccounts","setLocalTxHistory","sign","timeIn","name","components","vSelect","WalletInputVue","ValidationProvider","ValidationObserver","ToastificationContent","Delegate","Redelegate","Withdraw","Unbond","Transfer","IBCTransfer","Vote","WithdrawCommission","GovDeposit","TransactionResult","directives","Ripple","props","type","default","modalId","validatorAddress","address","proposalId","proposalTitle","selectedChainName","data","modalTitle","historyName","selectedValidator","token","chainId","balance","IBCDenom","error","showDismissibleAlert","sequence","accountNumber","advance","fee","feeDenom","wallet","gas","memo","blockingMsg","actionName","showResult","txHash","computed","feeDenoms","accounts","isOwner","selectedAddress","selectedChain","config","methods","initialize","componentUpdate","obj","Object","handleOk","bvModalEvt","resetModal","sendTx","txMsgs","txFee","amount","denom","signerData","then","chain","op","hash","time","catch","updateWallet","v"],"sourceRoot":"src/views/components/OperationModal","sources":["index.vue"],"sourcesContent":["<template>\n  <b-modal\n    :id=\"modalId\"\n    centered\n    size=\"md\"\n    :title=\"modalTitle\"\n    scrollable\n    :hide-header-close=\"false\"\n    :hide-footer=\"showResult\"\n    modal-class=\"custom-transaction-modal\"\n    @hidden=\"resetModal\"\n    @show=\"initialize\"\n  >\n    <b-overlay\n      :show=\"!isOwner\"\n      rounded=\"sm\"\n    >\n      <template #overlay>\n        <div\n          class=\"text-center\"\n        >\n          <b-avatar\n            font-scale=\"3\"\n            variant=\"danger\"\n            animation=\"cylon\"\n          >\n            <feather-icon\n              icon=\"XCircleIcon\"\n              size=\"16\"\n            />\n          </b-avatar>\n          <p class=\"mt-1 font-weight-bolder\">\n            {{ blockingMsg }}\n          </p>\n        </div>\n      </template>\n      <validation-observer\n        v-if=\"!showResult\"\n        ref=\"simpleRules\"\n      >\n        <b-form>\n          <component\n            :is=\"type\"\n            ref=\"component\"\n            :address=\"selectedAddress\"\n            :validator-address=\"validatorAddress\"\n            :balance=\"balance\"\n            :proposal-id=\"proposalId\"\n            :proposal-title=\"proposalTitle\"\n            @update=\"componentUpdate\"\n          />\n          <b-row v-if=\"advance\">\n            <b-col cols=\"12\">\n              <b-form-group\n                label=\"Fee\"\n                label-for=\"Fee\"\n              >\n                <validation-provider\n                  v-slot=\"{ errors }\"\n                  rules=\"required|integer\"\n                  name=\"fee\"\n                >\n                  <b-input-group>\n                    <b-form-input v-model=\"fee\" />\n                    <b-input-group-append>\n                      <b-form-select\n                        v-model=\"feeDenom\"\n                        :options=\"feeDenoms\"\n                        value-field=\"denom\"\n                        text-field=\"denom\"\n                      />\n                    </b-input-group-append>\n                  </b-input-group>\n                  <small class=\"text-danger\">{{ errors[0] }}</small>\n                </validation-provider>\n              </b-form-group>\n            </b-col>\n            <b-col cols=\"12\">\n              <b-form-group\n                label=\"Gas\"\n                label-for=\"gas\"\n              >\n                <validation-provider\n                  v-slot=\"{ errors }\"\n                  name=\"gas\"\n                >\n                  <b-form-input\n                    id=\"gas\"\n                    v-model=\"gas\"\n                    type=\"number\"\n                  />\n                  <small class=\"text-danger\">{{ errors[0] }}</small>\n                </validation-provider>\n              </b-form-group>\n            </b-col>\n            <b-col cols=\"12\">\n              <b-form-group\n                label=\"Memo\"\n                label-for=\"Memo\"\n              >\n                <validation-provider\n                  v-slot=\"{ errors }\"\n                  name=\"memo\"\n                >\n                  <b-form-input\n                    id=\"Memo\"\n                    v-model=\"memo\"\n                    max=\"2\"\n                  />\n                  <small class=\"text-danger\">{{ errors[0] }}</small>\n                </validation-provider>\n              </b-form-group>\n            </b-col>\n          </b-row>\n          <b-row v-if=\"advance\">\n            <b-col>\n              <wallet-input-vue v-model=\"wallet\" />\n            </b-col>\n          </b-row>\n        </b-form>\n        <b-alert\n          v-model=\"showDismissibleAlert\"\n          variant=\"danger\"\n          dismissible\n        >\n          <div class=\"alert-body\">\n            <span>{{ error }}</span>\n          </div>\n        </b-alert>\n      </validation-observer>\n\n      <TransactionResult\n        v-else\n        :hash=\"txHash\"\n        :selected-chain=\"selectedChain\"\n      />\n    </b-overlay>\n    <template #modal-footer>\n      <div class=\"d-flex justify-content-between w-100\">\n        <div id=\"left-footer\">\n          <b-form-checkbox\n            v-if=\"isOwner\"\n            v-model=\"advance\"\n            name=\"advance\"\n            value=\"true\"\n          >\n            <small>Advanced</small>\n          </b-form-checkbox>\n        </div>\n        <b-button\n          v-if=\"isOwner\"\n          variant=\"primary\"\n          @click=\"handleOk\"\n        >\n          {{ actionName }}\n        </b-button>\n        <b-button\n          v-else\n          v-ripple.400=\"'rgba(255, 255, 255, 0.15)'\"\n          variant=\"outline-primary\"\n          to=\"/wallet/import\"\n        >\n          Connect Wallet\n        </b-button>\n      </div>\n    </template>\n  </b-modal>\n</template>\n\n<script>\nimport { ValidationProvider, ValidationObserver } from 'vee-validate'\nimport {\n  BAvatar, BModal, BRow, BCol, BInputGroup, BFormInput, BFormGroup, BFormSelect, BFormSelectOption,\n  BForm, BButton, BInputGroupAppend, BFormCheckbox, BOverlay, BAlert,\n} from 'bootstrap-vue'\nimport Ripple from 'vue-ripple-directive'\nimport {\n  required, email, url, between, alpha, integer, password, min, digits, alphaDash, length,\n} from '@validations'\nimport {\n  extractAccountNumberAndSequence, getLocalAccounts, setLocalTxHistory, sign, timeIn,\n} from '@/libs/utils'\nimport vSelect from 'vue-select'\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue'\n\nimport WalletInputVue from './WalletInput.vue'\nimport Delegate from './components/Delegate.vue'\nimport Redelegate from './components/Redelegate.vue'\nimport Withdraw from './components/Withdraw.vue'\nimport Unbond from './components/Unbond.vue'\nimport Transfer from './components/Transfer.vue'\nimport IBCTransfer from './components/IBCTransfer.vue'\nimport Vote from './components/Vote.vue'\nimport WithdrawCommission from './components/WithdrawCommission.vue'\nimport GovDeposit from './components/GovDeposit.vue'\nimport TransactionResult from './TransactionResult.vue'\n\nexport default {\n  name: 'DelegateDialogue',\n  components: {\n    BAlert,\n    BAvatar,\n    BModal,\n    BRow,\n    BCol,\n    BForm,\n    BInputGroup,\n    BFormInput,\n    BFormGroup,\n    BFormSelect,\n    BFormSelectOption,\n    BFormCheckbox,\n    vSelect,\n    BButton,\n    BInputGroupAppend,\n    BOverlay,\n    WalletInputVue,\n\n    ValidationProvider,\n    ValidationObserver,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent,\n    Delegate,\n    Redelegate,\n    Withdraw,\n    Unbond,\n    Transfer,\n    IBCTransfer,\n    Vote,\n    WithdrawCommission,\n    GovDeposit,\n    TransactionResult,\n  },\n  directives: {\n    Ripple,\n  },\n  props: {\n    type: {\n      type: String,\n      default: '',\n    },\n    modalId: {\n      type: String,\n      default: 'operation-modal',\n    },\n    validatorAddress: {\n      type: String,\n      default: null,\n    },\n    address: {\n      type: String,\n      default: null,\n    },\n    proposalId: {\n      type: Number,\n      default: null,\n    },\n    proposalTitle: {\n      type: String,\n      default: null,\n    },\n    selectedChainName: {\n      type: String,\n      default: null,\n    },\n  },\n  data() {\n    return {\n      modalTitle: '',\n      historyName: '',\n      selectedValidator: null,\n      token: '',\n      chainId: '',\n      balance: [],\n      IBCDenom: {},\n      error: null,\n      showDismissibleAlert: false,\n      sequence: 1,\n      accountNumber: 0,\n      advance: false,\n      fee: '900',\n      feeDenom: '',\n      wallet: 'ledgerUSB',\n      gas: '250000',\n      memo: '',\n      blockingMsg: this.address ? 'You are not the owner' : 'No available account found.',\n      actionName: 'Send',\n      showResult: false,\n      txHash: '',\n\n      required,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash,\n    }\n  },\n  computed: {\n    feeDenoms() {\n      if (!this.balance) return []\n      return this.balance.filter(item => !item.denom.startsWith('ibc'))\n    },\n    accounts() {\n      const accounts = getLocalAccounts()\n      const selectedWallet = this.$store.state.chains.defaultWallet\n      return accounts[selectedWallet]\n    },\n    isOwner() {\n      if (this.accounts) {\n        this.updateWallet(this.accounts.device)\n        if (this.accounts.address.findIndex(x => x.addr === this.selectedAddress) > -1) {\n          return true\n        }\n      }\n      return false\n    },\n    selectedAddress() {\n      if (this.address) {\n        return this.address\n      }\n      const chain = this.$store.state.chains.selected.chain_name\n      const selectedAddress = this.accounts.address.find(x => x.chain === chain)\n      return selectedAddress?.addr\n    },\n    selectedChain() {\n      let config = null\n      const allChains = localStorage.getItem('chains')\n      if (allChains && this.selectedChainName) {\n        config = JSON.parse(allChains)[this.selectedChainName]\n      }\n      return config\n    },\n  },\n  methods: {\n    initialize() {\n      if (this.isOwner && this.selectedAddress) {\n        this.$http.getLatestBlock().then(ret => {\n          this.chainId = ret.block.header.chain_id\n          const notSynced = timeIn(ret.block.header.time, 10, 'm')\n          if (notSynced) {\n            this.error = 'Client is not synced or blockchain is halted'\n          } else {\n            this.error = null\n          }\n        })\n        this.$http.getAuthAccount(this.selectedAddress).then(ret => {\n          const account = extractAccountNumberAndSequence(ret)\n          this.accountNumber = account.accountNumber\n          this.sequence = account.sequence\n        })\n        this.$http.getBankBalances(this.selectedAddress, this.selectedChain).then(res => {\n          if (res && res.length > 0) {\n            this.balance = res.reverse()\n            const token = this.balance.find(i => !i.denom.startsWith('ibc'))\n            this.token = token.denom\n            if (token) this.feeDenom = token.denom\n          }\n        })\n        this.fee = this.$store.state.chains.selected?.min_tx_fee || '1000'\n        this.feeDenom = this.$store.state.chains.selected?.assets[0]?.base || ''\n      }\n    },\n    componentUpdate(obj) {\n      Object.keys(obj).forEach(key => {\n        this[key] = obj[key]\n      })\n    },\n    handleOk(bvModalEvt) {\n      bvModalEvt.preventDefault()\n      this.$refs.simpleRules.validate().then(ok => {\n        if (ok) {\n          this.sendTx().then(ret => {\n            this.error = ret\n          })\n        }\n      })\n    },\n    resetModal() {\n      this.feeDenom = ''\n      this.error = null\n      this.showResult = false\n    },\n    async sendTx() {\n      const txMsgs = this.$refs.component.msg\n      if (txMsgs.length === 0) {\n        this.error = 'No delegation found'\n        return ''\n      }\n      if (!this.accountNumber) {\n        this.error = 'Account number should not be empty!'\n        return ''\n      }\n\n      const txFee = {\n        amount: [\n          {\n            amount: this.fee,\n            denom: this.feeDenom,\n          },\n        ],\n        gas: this.gas,\n      }\n\n      const signerData = {\n        accountNumber: this.accountNumber,\n        sequence: this.sequence,\n        chainId: this.chainId,\n      }\n\n      sign(\n        this.wallet,\n        this.chainId,\n        this.selectedAddress,\n        txMsgs,\n        txFee,\n        this.memo,\n        signerData,\n      ).then(bodyBytes => {\n        this.showResult = true\n        this.$http.broadcastTx(bodyBytes, this.selectedChain).then(res => {\n          this.txHash = res.tx_response.txhash\n          setLocalTxHistory({\n            chain: this.$store.state.chains.selected,\n            op: this.historyName,\n            hash: res.tx_response.txhash,\n            time: new Date(),\n          })\n        }).catch(e => {\n          this.showResult = false\n          this.error = e\n          this.showDismissibleAlert = true\n        })\n      }).catch(e => {\n        this.showResult = false\n        this.error = e\n        this.showDismissibleAlert = true\n      })\n      return ''\n    },\n    updateWallet(v) {\n      if (v && v === 'address') {\n        this.wallet = 'keplr'\n      } else {\n        this.wallet = v\n      }\n    },\n  },\n}\n</script>\n<style lang=\"scss\">\n@import '@core/scss/vue/libs/vue-select.scss';\n.custom-transaction-modal {\n  .modal-header {\n    .modal-title {\n      font-size: 24px;\n    }\n    .close {\n      margin: 0;\n    }\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}