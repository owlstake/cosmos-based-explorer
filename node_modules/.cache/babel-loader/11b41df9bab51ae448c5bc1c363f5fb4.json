{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.find.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BSkeleton, BSkeletonWrapper, BRow, BCol, VBTooltip, BFormInput, BCard, BAlert, BFormCheckbox, BButton, BBadge, BInputGroup, BInputGroupPrepend } from 'bootstrap-vue';\nimport { consensusPubkeyToHexAddress, getCachedValidators, timeIn, toDay } from '@/libs/utils';\nimport { Bech32, toHex } from '@cosmjs/encoding';\nexport default {\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BFormInput: BFormInput,\n    BCard: BCard,\n    BAlert: BAlert,\n    BButton: BButton,\n    BBadge: BBadge,\n    BFormCheckbox: BFormCheckbox,\n    BInputGroup: BInputGroup,\n    BSkeleton: BSkeleton,\n    BSkeletonWrapper: BSkeletonWrapper,\n    BInputGroupPrepend: BInputGroupPrepend\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n  data: function data() {\n    var chain = this.$route.params.chain;\n    var pinned = localStorage.getItem('pinned') ? localStorage.getItem('pinned').split(',') : '';\n    return {\n      loading: true,\n      missedFilter: false,\n      pinned: pinned,\n      chain: chain,\n      query: '',\n      validators: [],\n      missing: {},\n      blocks: Array.from('0'.repeat(50)).map(function (x) {\n        return {\n          sigs: {},\n          height: Number(x)\n        };\n      }),\n      syncing: false,\n      latestTime: ''\n    };\n  },\n  computed: {\n    uptime: function uptime() {\n      var _this = this;\n\n      var vals = this.query ? this.validators.filter(function (x) {\n        return String(x.description.moniker).indexOf(_this.query) > -1;\n      }) : this.validators;\n      vals.sort(function (a, b) {\n        return b.delegator_shares - a.delegator_shares;\n      });\n      var rets = vals.map(function (x) {\n        return {\n          validator: x.description,\n          address: consensusPubkeyToHexAddress(x.consensus_pubkey)\n        };\n      });\n\n      if (this.missedFilter) {\n        return rets.filter(function (x) {\n          return _this.missing[x.address].missed_blocks_counter > 0;\n        });\n      }\n\n      return rets;\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n\n    var cached = JSON.parse(getCachedValidators(this.$route.params.chain));\n\n    if (cached) {\n      this.validators = cached;\n    }\n\n    this.$http.getValidatorList().then(function (res) {\n      _this2.validators = res;\n    });\n    this.$http.getSlashingSigningInfo().then(function (res) {\n      if (res.info) {\n        res.info.forEach(function (x) {\n          if (x.address) {\n            var hex = toHex(Bech32.decode(x.address).data).toUpperCase();\n            _this2.missing[hex] = x;\n          }\n        });\n      }\n    });\n    this.initBlocks();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.blocks = []; // clear running tasks if it is not finish\n\n    this.syncing = false;\n    clearInterval(this.timer);\n  },\n  methods: {\n    pinValidator: function pinValidator() {\n      localStorage.setItem('pinned', this.pinned);\n    },\n    initBlocks: function initBlocks() {\n      var _this3 = this;\n\n      this.$http.getLatestBlock().then(function (d) {\n        var height = d.block.last_commit.height;\n\n        if (timeIn(d.block.header.time, 3, 'm')) {\n          _this3.syncing = true;\n        } else {\n          _this3.syncing = false;\n        }\n\n        _this3.latestTime = toDay(d.block.header.time, 'long');\n        var blocks = []; // update height\n\n        var promise = Promise.resolve();\n\n        var _loop = function _loop(i) {\n          blocks.unshift({\n            sigs: {},\n            height: i > 0 ? i : 0\n          });\n\n          if (i > height - 48 && i > 0) {\n            promise = promise.then(function () {\n              return new Promise(function (resolve) {\n                _this3.fetch_status(i, resolve);\n              });\n            });\n          }\n        };\n\n        for (var i = height - 1; i > height - 50; i -= 1) {\n          _loop(i);\n        }\n\n        var sigs = _this3.initColor();\n\n        d.block.last_commit.signatures.forEach(function (x) {\n          if (x.validator_address) sigs[x.validator_address] = 'bg-success';\n        });\n        blocks.push({\n          sigs: sigs,\n          height: height\n        });\n        _this3.blocks = blocks;\n        _this3.timer = setInterval(_this3.fetch_latest, 6000);\n        _this3.loading = false;\n      });\n    },\n    initColor: function initColor() {\n      var sigs = {};\n      this.validators.forEach(function (x) {\n        sigs[consensusPubkeyToHexAddress(x.consensus_pubkey)] = 'bg-danger';\n      });\n      return sigs;\n    },\n    fetch_status: function fetch_status(height, resolve) {\n      var _this4 = this;\n\n      var block = this.blocks.find(function (b) {\n        return b.height === height;\n      });\n\n      if (block) {\n        this.$http.getBlockByHeight(height).then(function (res) {\n          resolve();\n\n          var sigs = _this4.initColor();\n\n          res.block.last_commit.signatures.forEach(function (x) {\n            if (x.validator_address) sigs[x.validator_address] = 'bg-success';\n          });\n\n          _this4.$set(block, 'sigs', sigs);\n        });\n      }\n    },\n    fetch_latest: function fetch_latest() {\n      var _this5 = this;\n\n      this.$http.getLatestBlock().then(function (res) {\n        var sigs = _this5.initColor();\n\n        res.block.last_commit.signatures.forEach(function (x) {\n          if (x.validator_address) sigs[x.validator_address] = 'bg-success';\n        });\n\n        var block = _this5.blocks.find(function (b) {\n          return b.height === res.block.last_commit.height;\n        });\n\n        if (typeof block === 'undefined') {\n          // mei\n          // this.$set(block, 0, typeof sigs !== 'undefined')\n          if (_this5.blocks.length >= 50) _this5.blocks.shift();\n\n          _this5.blocks.push({\n            sigs: sigs,\n            height: res.block.last_commit.height\n          });\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}