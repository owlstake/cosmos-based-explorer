{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BCard, BCardHeader, BCardTitle, BCardBody, VBModal, BRow, BCol, BAvatar, BButton, BDropdown, BDropdownItem, VBTooltip } from 'bootstrap-vue';\nimport Ripple from 'vue-ripple-directive';\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue';\nimport { chartColors, formatNumber, formatTokenAmount, formatTokenDenom, getLocalAccounts, getLocalChains, getUserCurrency, getUserCurrencySign, numberWithCommas, setUserCurrency } from '@/libs/utils';\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue';\nimport AppCollapse from '@core/components/app-collapse/AppCollapse.vue';\nimport AppCollapseItem from '@core/components/app-collapse/AppCollapseItem.vue';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport ChartComponentDoughnut from './ChartComponentDoughnut.vue';\nimport EchartScatter from './components/charts/EchartScatter.vue';\nexport default {\n  components: {\n    BAvatar: BAvatar,\n    BCard: BCard,\n    BRow: BRow,\n    BButton: BButton,\n    BCol: BCol,\n    BCardHeader: BCardHeader,\n    BCardBody: BCardBody,\n    BCardTitle: BCardTitle,\n    BDropdown: BDropdown,\n    BDropdownItem: BDropdownItem,\n    // eslint-disable-next-line vue/no-unused-components\n    VBTooltip: VBTooltip,\n    FeatherIcon: FeatherIcon,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent: ToastificationContent,\n    ChartComponentDoughnut: ChartComponentDoughnut,\n    AppCollapse: AppCollapse,\n    AppCollapseItem: AppCollapseItem,\n    EchartScatter: EchartScatter,\n    OperationModal: OperationModal\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n    'b-modal': VBModal,\n    Ripple: Ripple\n  },\n  data: function data() {\n    return {\n      currency: getUserCurrencySign(),\n      currency2: getUserCurrency(),\n      selectedAddress: '',\n      selectedName: '',\n      transferWindow: false,\n      accounts: [],\n      balances: {},\n      delegations: {},\n      ibcDenom: {},\n      quotes: {},\n      operationModalType: '',\n      selectedChainName: '',\n      options: {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        // responsive: true,\n        title: {\n          display: true,\n          text: 'Token Portfolio'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: true\n        },\n        scales: {\n          yAxes: [{\n            // type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            type: 'logarithmic',\n            display: true,\n            position: 'left',\n            id: 'y-axis-1',\n            ticks: {\n              min: 0,\n              autoskipping: true,\n              display: true,\n              maxTicksLimit: 7,\n              callback: function callback(val) {\n                return formatNumber(val, true, 0);\n              },\n              color: 'red'\n            },\n            offset: true,\n            gridLines: {\n              display: true,\n              offsetGridLines: false\n            }\n          }, {\n            type: 'linear',\n            // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: false,\n            position: 'right',\n            id: 'y-axis-2',\n            gridLines: {\n              drawOnChartArea: true\n            }\n          }]\n        }\n      }\n    };\n  },\n  computed: {\n    calculateTotal: function calculateTotal() {\n      var total = 0;\n\n      if (this.calculateByDenom.value) {\n        Object.values(this.calculateByDenom.value).forEach(function (i) {\n          total += i;\n        });\n      }\n\n      return numberWithCommas(parseFloat(total.toFixed(2)));\n    },\n    scatters: function scatters() {\n      var _this = this;\n\n      var total = [];\n\n      if (this.calculateByDenom.qty) {\n        Object.entries(this.calculateByDenom.qty).forEach(function (i) {\n          var price = _this.getPrice(i[0]);\n\n          total.push([Math.sqrt(i[1]), Math.sqrt(price), i[1] * price, i[0]]);\n        });\n      }\n\n      return total.sort(function (a, b) {\n        return b[2] - a[2];\n      });\n    },\n    calculateTotalChange: function calculateTotalChange() {\n      var _this2 = this;\n\n      var total = 0;\n\n      if (this.calculateByDenom.value) {\n        Object.entries(this.calculateByDenom.value).forEach(function (i) {\n          total += i[1] * _this2.getChanges(i[0]) * 0.01;\n        });\n      }\n\n      return parseFloat(total.toFixed(2));\n    },\n    calculateByDenom: function calculateByDenom() {\n      var _this3 = this;\n\n      var v = Object.values(this.balances);\n      var total = {};\n      var qty = {};\n\n      if (v) {\n        v.forEach(function (tokens) {\n          tokens.forEach(function (x) {\n            var denom = _this3.formatDenom(x.denom);\n\n            if (total[denom]) {\n              total[denom] += _this3.formatCurrency(x.amount, x.denom);\n            } else {\n              total[denom] = _this3.formatCurrency(x.amount, x.denom);\n            }\n\n            if (qty[denom]) {\n              qty[denom] += _this3.formatAmount(x.amount, x.denom, false);\n            } else {\n              qty[denom] = _this3.formatAmount(x.amount, x.denom, false);\n            }\n          });\n        });\n      }\n\n      var d = Object.values(this.delegations);\n\n      if (d) {\n        d.forEach(function (tokens) {\n          tokens.forEach(function (x) {\n            var denom = _this3.formatDenom(x.denom);\n\n            if (total[denom]) {\n              total[denom] += _this3.formatCurrency(x.amount, x.denom);\n            } else {\n              total[denom] = _this3.formatCurrency(x.amount, x.denom);\n            }\n\n            if (qty[denom]) {\n              qty[denom] += _this3.formatAmount(x.amount, x.denom, false);\n            } else {\n              qty[denom] = _this3.formatAmount(x.amount, x.denom, false);\n            }\n          });\n        });\n      }\n\n      return {\n        value: total,\n        qty: qty\n      };\n    },\n    calculateChartDoughnut: function calculateChartDoughnut() {\n      var total = this.calculateByDenom;\n      var labels = [];\n      var data = [];\n      Object.entries(total.value).sort(function (a, b) {\n        return b[1] - a[1];\n      }).forEach(function (i) {\n        labels.push(i[0]);\n        data.push(i[1]);\n      });\n      return {\n        datasets: [{\n          labels: labels,\n          data: data,\n          backgroundColor: chartColors(),\n          borderWidth: 0,\n          pointStyle: 'rectRounded'\n        }]\n      };\n    }\n  },\n  created: function created() {\n    this.init();\n  },\n  mounted: function mounted() {},\n  methods: {\n    refreshPrice: function refreshPrice() {\n      this.$store.dispatch('chains/getQuotes');\n    },\n    init: function init() {\n      var _this4 = this;\n\n      this.accounts = getLocalAccounts();\n      var chains = getLocalChains();\n\n      if (this.accounts) {\n        Object.keys(this.accounts).forEach(function (acc) {\n          _this4.accounts[acc].address.forEach(function (add) {\n            _this4.$http.getBankBalances(add.addr, chains[add.chain]).then(function (res) {\n              if (res && res.length > 0) {\n                _this4.$set(_this4.balances, add.addr, res);\n\n                res.forEach(function (token) {\n                  if (token.denom.startsWith('ibc')) {\n                    _this4.$http.getIBCDenomTrace(token.denom, chains[add.chain]).then(function (denom) {\n                      _this4.$set(_this4.ibcDenom, token.denom, denom);\n                    });\n                  }\n                });\n              }\n            });\n\n            _this4.$http.getStakingDelegations(add.addr, chains[add.chain]).then(function (res) {\n              if (res.delegation_responses) {\n                var delegation = res.delegation_responses.map(function (x) {\n                  return x.balance;\n                }).reduce(function (t, c) {\n                  var t1 = t;\n\n                  if (t1[c.denom]) {\n                    t1[c.denom] += Number(c.amount);\n                  } else {\n                    t1[c.denom] = Number(c.amount);\n                  }\n\n                  return t1;\n                }, {});\n\n                _this4.$set(_this4.delegations, add.addr, Object.keys(delegation).map(function (x) {\n                  return {\n                    amount: String(delegation[x]),\n                    denom: x\n                  };\n                }));\n              }\n            }).catch(function () {});\n          });\n        });\n      }\n    },\n    setCurrency: function setCurrency(c) {\n      setUserCurrency(c);\n      this.currency2 = c;\n      this.currency = getUserCurrencySign();\n    },\n    transfer: function transfer(type, addr, chain) {\n      this.operationModalType = type;\n      this.selectedAddress = addr;\n      this.selectedChainName = chain;\n    },\n    completeAdd: function completeAdd() {\n      this.init();\n      this.$bvModal.hide('add-account');\n    },\n    formatDenom: function formatDenom(v) {\n      if (!v) return '';\n      var denom = v.startsWith('ibc') ? this.ibcDenom[v] : v;\n      return formatTokenDenom(denom);\n    },\n    formatTotalChange: function formatTotalChange(v) {\n      return numberWithCommas(v);\n    },\n    formatAmount: function formatAmount(v) {\n      var denom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'uatom';\n      var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (!v) return '';\n      var denom2 = denom.startsWith('ibc') ? this.ibcDenom[denom] : denom;\n      return formatTokenAmount(v, 2, denom2, format);\n    },\n    formatAddr: function formatAddr(v) {\n      return v.substring(0, 10).concat('...', v.substring(v.length - 10));\n    },\n    formatCurrency: function formatCurrency(amount, denom) {\n      var qty = this.formatAmount(amount, denom, false);\n      return parseFloat((qty * this.getPrice(denom)).toFixed(2));\n    },\n    priceColor: function priceColor(denom) {\n      var d2 = this.formatDenom(denom);\n      var quote = this.$store.state.chains.quotes[d2];\n\n      if (quote) {\n        var price = quote[\"\".concat(this.currency2, \"_24h_change\")];\n        return price > 0 ? 'text-success' : 'text-danger';\n      }\n\n      return '';\n    },\n    getPrice: function getPrice(denom) {\n      var d2 = this.formatDenom(denom);\n      var quote = this.$store.state.chains.quotes[d2];\n      return quote ? quote[this.currency2] || 0 : 0;\n    },\n    getChanges: function getChanges(denom) {\n      var d2 = this.formatDenom(denom);\n      var quote = this.$store.state.chains.quotes[d2];\n\n      if (quote) {\n        var price = quote[\"\".concat(this.currency2, \"_24h_change\")];\n        return price || 0;\n      }\n\n      return 0;\n    },\n    formatChanges: function formatChanges(denom) {\n      var price = this.getChanges(denom);\n\n      if (price > 0) {\n        return \"+\".concat(parseFloat(price.toFixed(2)), \"%\");\n      }\n\n      return '0';\n    },\n    formatPrice: function formatPrice(denom) {\n      var d2 = this.formatDenom(denom);\n      var quote = this.$store.state.chains.quotes[d2];\n\n      if (quote) {\n        var price = quote[this.currency2];\n        return price;\n      }\n\n      return 0;\n    },\n    formatBalance: function formatBalance(v) {\n      var _this5 = this;\n\n      var total = 0;\n      var balance = this.balances[v];\n\n      if (balance) {\n        var ret = balance.map(function (x) {\n          return _this5.formatCurrency(x.amount, x.denom);\n        }).reduce(function (t, c) {\n          return t + c;\n        });\n        total += ret;\n      }\n\n      var delegations = this.delegations[v];\n\n      if (delegations) {\n        var _ret = delegations.map(function (x) {\n          return _this5.formatCurrency(x.amount, x.denom);\n        }).reduce(function (t, c) {\n          return t + c;\n        }, 0);\n\n        total += _ret;\n      }\n\n      return numberWithCommas(parseFloat(total.toFixed(2)));\n    },\n    formatBalanceChanges: function formatBalanceChanges(v) {\n      var _this6 = this;\n\n      var total = 0;\n      var balance = this.balances[v];\n\n      if (balance) {\n        var ret = balance.map(function (x) {\n          return _this6.formatCurrency(x.amount, x.denom) * _this6.getChanges(x.denom) * 0.01;\n        }).reduce(function (t, c) {\n          return t + c;\n        });\n        total += ret;\n      }\n\n      var delegations = this.delegations[v];\n\n      if (delegations) {\n        var _ret2 = delegations.map(function (x) {\n          return _this6.formatCurrency(x.amount, x.denom) * _this6.getChanges(x.denom) * 0.01;\n        }).reduce(function (t, c) {\n          return t + c;\n        }, 0);\n\n        total += _ret2;\n      }\n\n      return total > 0 ? \"+\".concat(parseFloat(total.toFixed(2))) : parseFloat(total.toFixed(2));\n    },\n    formatBalanceChangesColor: function formatBalanceChangesColor(v) {\n      var total = this.formatBalanceChanges(v);\n      return total > 0 ? 'text-success' : 'text-danger';\n    },\n    removeAddress: function removeAddress(v) {\n      var _this7 = this;\n\n      Object.keys(this.accounts).forEach(function (key) {\n        var item = _this7.accounts[key];\n        var newAddrs = item.address.filter(function (a) {\n          return a.addr !== v;\n        });\n\n        if (newAddrs.length > 0) {\n          _this7.$set(item, 'address', newAddrs);\n        } else {\n          delete _this7.accounts[key];\n        }\n      });\n      localStorage.setItem('accounts', JSON.stringify(this.accounts));\n    },\n    updateDefaultWallet: function updateDefaultWallet(v) {\n      this.$store.commit('setDefaultWallet', v);\n    },\n    copy: function copy(v) {\n      var _this8 = this;\n\n      this.$copyText(v).then(function () {\n        _this8.$toast({\n          component: ToastificationContent,\n          props: {\n            title: 'Address copied',\n            icon: 'BellIcon'\n          }\n        });\n      }, function (e) {\n        _this8.$toast({\n          component: ToastificationContent,\n          props: {\n            title: \"Failed to copy address! \".concat(e),\n            icon: 'BellIcon',\n            variant: 'danger'\n          }\n        });\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8OA,SACAA,KADA,EACAC,WADA,EACAC,UADA,EACAC,SADA,EACAC,OADA,EACAC,IADA,EACAC,IADA,EACAC,OADA,EACAC,OADA,EAEAC,SAFA,EAEAC,aAFA,EAEAC,SAFA,QAGA,eAHA;AAIA;AACA;AACA,SACAC,WADA,EAEAC,YAFA,EAGAC,iBAHA,EAGAC,gBAHA,EAGAC,gBAHA,EAGAC,cAHA,EAGAC,eAHA,EAGAC,mBAHA,EAGAC,gBAHA,EAGAC,eAHA,QAIA,cAJA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAC;IACAf,gBADA;IAEAP,YAFA;IAGAK,UAHA;IAIAG,gBAJA;IAKAF,UALA;IAMAL,wBANA;IAOAE,oBAPA;IAQAD,sBARA;IASAO,oBATA;IAUAC,4BAVA;IAWA;IACAC,oBAZA;IAaAY,wBAbA;IAcA;IACAC,4CAfA;IAgBAC,8CAhBA;IAiBAC,wBAjBA;IAkBAC,gCAlBA;IAmBAC,4BAnBA;IAoBAC;EApBA,CADA;EAuBAC;IACA,sBADA;IAEA,kBAFA;IAGAC;EAHA,CAvBA;EA4BAC,IA5BA,kBA4BA;IACA;MACAC,+BADA;MAEAC,4BAFA;MAGAC,mBAHA;MAIAC,gBAJA;MAKAC,qBALA;MAMAC,YANA;MAOAC,YAPA;MAQAC,eARA;MASAC,YATA;MAUAC,UAVA;MAWAC,sBAXA;MAYAC,qBAZA;MAaAC;QACAC,0BADA;QAEAC;UACAC;QADA,CAFA;QAKA;QACAC;UACAD,aADA;UAEAE;QAFA,CANA;QAUAC;UACAC,aADA;UAEAC;QAFA,CAVA;QAcAC;UACAC;YACA;YACAC,mBAFA;YAGAR,aAHA;YAIAS,gBAJA;YAKAC,cALA;YAMAC;cACAC,MADA;cAEAC,kBAFA;cAGAb,aAHA;cAIAc,gBAJA;cAKAC,QALA,oBAKAC,GALA,EAKA;gBACA;cACA,CAPA;cAQAC;YARA,CANA;YAgBAC,YAhBA;YAiBAC;cACAnB,aADA;cAEAoB;YAFA;UAjBA,GAqBA;YACAZ,cADA;YACA;YACAR,cAFA;YAGAS,iBAHA;YAIAC,cAJA;YAKAS;cACAE;YADA;UALA,CArBA;QADA;MAdA;IAbA;EA6DA,CA1FA;EA2FAC;IACAC,cADA,4BACA;MACA;;MACA;QACAC;UACAC;QACA,CAFA;MAGA;;MACA;IACA,CATA;IAUAC,QAVA,sBAUA;MAAA;;MACA;;MACA;QACAF;UACA;;UACAC;QACA,CAHA;MAIA;;MACA;QAAA;MAAA;IACA,CAnBA;IAoBAE,oBApBA,kCAoBA;MAAA;;MACA;;MACA;QACAH;UACAC;QACA,CAFA;MAGA;;MACA;IACA,CA5BA;IA6BAG,gBA7BA,8BA6BA;MAAA;;MACA;MACA;MACA;;MACA;QACAC;UACAC;YACA;;YACA;cACAL;YACA,CAFA,MAEA;cACAA;YACA;;YACA;cACAM;YACA,CAFA,MAEA;cACAA;YACA;UACA,CAZA;QAaA,CAdA;MAeA;;MACA;;MACA;QACAC;UACAF;YACA;;YACA;cACAL;YACA,CAFA,MAEA;cACAA;YACA;;YACA;cACAM;YACA,CAFA,MAEA;cACAA;YACA;UACA,CAZA;QAaA,CAdA;MAeA;;MACA;QAAAE;QAAAF;MAAA;IACA,CArEA;IAsEAG,sBAtEA,oCAsEA;MACA;MACA;MACA;MACAV;QAAA;MAAA;QACAW;QACAnD;MACA,CAHA;MAIA;QACAoD,WACA;UACAD,cADA;UAEAnD,UAFA;UAGAqD,8BAHA;UAIAC,cAJA;UAKAC;QALA,CADA;MADA;IAWA;EAzFA,CA3FA;EAsLAC,OAtLA,qBAsLA;IACA;EACA,CAxLA;EAyLAC,OAzLA,qBAyLA,CACA,CA1LA;EA2LAC;IACAC,YADA,0BACA;MACA;IACA,CAHA;IAIAC,IAJA,kBAIA;MAAA;;MACA;MACA;;MACA;QACApB;UACA;YACA;cACA;gBACA;;gBACAqB;kBACA;oBACA;sBACA;oBACA,CAFA;kBAGA;gBACA,CANA;cAOA;YACA,CAXA;;YAYA;cACA;gBACA;kBAAA;gBAAA;kBACA;;kBACA;oBACAC;kBACA,CAFA,MAEA;oBACAA;kBACA;;kBACA;gBACA,CARA,EAQA,EARA;;gBASA;kBAAA;oBAAAC;oBAAAC;kBAAA;gBAAA;cACA;YACA,CAbA,EAaAC,KAbA,CAaA,cAbA;UAcA,CA3BA;QA4BA,CA7BA;MA8BA;IACA,CAvCA;IAwCAC,WAxCA,uBAwCAC,CAxCA,EAwCA;MACA9E;MACA;MACA;IACA,CA5CA;IA6CA+E,QA7CA,oBA6CA5C,IA7CA,EA6CA6C,IA7CA,EA6CAC,KA7CA,EA6CA;MACA;MACA;MACA;IACA,CAjDA;IAkDAC,WAlDA,yBAkDA;MACA;MACA;IACA,CArDA;IAsDAC,WAtDA,uBAsDA3B,CAtDA,EAsDA;MACA;MACA;MACA;IACA,CA1DA;IA2DA4B,iBA3DA,6BA2DA5B,CA3DA,EA2DA;MACA;IACA,CA7DA;IA8DA6B,YA9DA,wBA8DA7B,CA9DA,EA8DA;MAAA;MAAA;MACA;MACA;MACA;IACA,CAlEA;IAmEA8B,UAnEA,sBAmEA9B,CAnEA,EAmEA;MACA;IACA,CArEA;IAsEA+B,cAtEA,0BAsEAb,MAtEA,EAsEAC,KAtEA,EAsEA;MACA;MACA;IACA,CAzEA;IA0EAa,UA1EA,sBA0EAb,KA1EA,EA0EA;MACA;MACA;;MACA;QACA;QACA;MACA;;MACA;IACA,CAlFA;IAmFAc,QAnFA,oBAmFAd,KAnFA,EAmFA;MACA;MACA;MACA;IACA,CAvFA;IAwFAe,UAxFA,sBAwFAf,KAxFA,EAwFA;MACA;MACA;;MACA;QACA;QACA;MACA;;MACA;IACA,CAhGA;IAiGAgB,aAjGA,yBAiGAhB,KAjGA,EAiGA;MACA;;MACA;QACA;MACA;;MACA;IACA,CAvGA;IAwGAiB,WAxGA,uBAwGAjB,KAxGA,EAwGA;MACA;MACA;;MACA;QACA;QACA;MACA;;MACA;IACA,CAhHA;IAiHAkB,aAjHA,yBAiHArC,CAjHA,EAiHA;MAAA;;MACA;MACA;;MACA;QACA;UAAA;QAAA;UAAA;QAAA;QACAJ;MACA;;MACA;;MACA;QACA;UAAA;QAAA;UAAA;QAAA;;QACAA;MACA;;MACA;IACA,CA9HA;IA+HA0C,oBA/HA,gCA+HAtC,CA/HA,EA+HA;MAAA;;MACA;MACA;;MACA;QACA;UAAA;QAAA;UAAA;QAAA;QACAJ;MACA;;MACA;;MACA;QACA;UAAA;QAAA;UAAA;QAAA;;QACAA;MACA;;MACA;IACA,CA5IA;IA6IA2C,yBA7IA,qCA6IAvC,CA7IA,EA6IA;MACA;MACA;IACA,CAhJA;IAiJAwC,aAjJA,yBAiJAxC,CAjJA,EAiJA;MAAA;;MACAL;QACA;QACA;UAAA;QAAA;;QACA;UACA;QACA,CAFA,MAEA;UACA;QACA;MACA,CARA;MASA8C;IACA,CA5JA;IA6JAC,mBA7JA,+BA6JA1C,CA7JA,EA6JA;MACA;IACA,CA/JA;IAgKA2C,IAhKA,gBAgKA3C,CAhKA,EAgKA;MAAA;;MACA;QACA;UACA4C,gCADA;UAEAC;YACAzE,uBADA;YAEA0E;UAFA;QAFA;MAOA,CARA,EAQA;QACA;UACAF,gCADA;UAEAC;YACAzE,2CADA;YAEA0E,gBAFA;YAGAC;UAHA;QAFA;MAQA,CAjBA;IAkBA;EAnLA;AA3LA","names":["BCard","BCardHeader","BCardTitle","BCardBody","VBModal","BRow","BCol","BAvatar","BButton","BDropdown","BDropdownItem","VBTooltip","chartColors","formatNumber","formatTokenAmount","formatTokenDenom","getLocalAccounts","getLocalChains","getUserCurrency","getUserCurrencySign","numberWithCommas","setUserCurrency","components","FeatherIcon","ToastificationContent","ChartComponentDoughnut","AppCollapse","AppCollapseItem","EchartScatter","OperationModal","directives","Ripple","data","currency","currency2","selectedAddress","selectedName","transferWindow","accounts","balances","delegations","ibcDenom","quotes","operationModalType","selectedChainName","options","maintainAspectRatio","legend","display","title","text","tooltips","mode","intersect","scales","yAxes","type","position","id","ticks","min","autoskipping","maxTicksLimit","callback","val","color","offset","gridLines","offsetGridLines","drawOnChartArea","computed","calculateTotal","Object","total","scatters","calculateTotalChange","calculateByDenom","v","tokens","qty","d","value","calculateChartDoughnut","labels","datasets","backgroundColor","borderWidth","pointStyle","created","mounted","methods","refreshPrice","init","res","t1","amount","denom","catch","setCurrency","c","transfer","addr","chain","completeAdd","formatDenom","formatTotalChange","formatAmount","formatAddr","formatCurrency","priceColor","getPrice","getChanges","formatChanges","formatPrice","formatBalance","formatBalanceChanges","formatBalanceChangesColor","removeAddress","localStorage","updateDefaultWallet","copy","component","props","icon","variant"],"sourceRoot":"src/views","sources":["WalletAccounts.vue"],"sourcesContent":["<template>\n  <div class=\"text-center\">\n    <b-card\n      v-if=\"calculateTotalChange !== 0\"\n      border-variant=\"primary\"\n    >\n      <b-row class=\"mx-0 d-flex align-items-center\">\n        <b-col\n          md=\"4\"\n          class=\"py-0\"\n        >\n          <b-dropdown\n            :text=\"`Currency: ${currency2.toUpperCase()}`\"\n            size=\"sm\"\n            class=\"text-uppercase\"\n            variant=\"primary\"\n          >\n            <b-dropdown-item @click=\"setCurrency('usd')\">\n              USD\n            </b-dropdown-item>\n            <b-dropdown-item @click=\"setCurrency('cny')\">\n              CNY (人民币)\n            </b-dropdown-item>\n            <b-dropdown-item @click=\"setCurrency('eur')\">\n              EUR (Euro)\n            </b-dropdown-item>\n            <b-dropdown-item @click=\"setCurrency('jpy')\">\n              JPY (日本円)\n            </b-dropdown-item>\n            <b-dropdown-item @click=\"setCurrency('hkd')\">\n              HKD (港幣)\n            </b-dropdown-item>\n            <b-dropdown-item @click=\"setCurrency('sgd')\">\n              SGD (新加坡元)\n            </b-dropdown-item>\n            <b-dropdown-item @click=\"setCurrency('krw')\">\n              KRW (대한민국원)\n            </b-dropdown-item>\n          </b-dropdown>\n          <h2 class=\"mt-1 mb-0\">\n            {{ currency }}{{ (calculateTotal) }}\n          </h2>\n          <small\n            v-if=\"calculateTotalChange > 0\"\n            class=\"my-0 text-success\"\n          >\n            +{{ formatTotalChange(calculateTotalChange) }} (24h)\n          </small>\n          <small\n            v-else\n            class=\"my-0 text-danger\"\n          >\n            {{ formatTotalChange(calculateTotalChange) }} (24h)\n          </small>\n          <span @click=\"refreshPrice()\">\n            <feather-icon\n              icon=\"RefreshCwIcon\"\n              size=\"12\"\n            /></span>\n          <!-- chart -->\n          <chart-component-doughnut\n            :height=\"160\"\n            :width=\"160\"\n            :data=\"calculateChartDoughnut\"\n          />\n        </b-col>\n        <b-col\n          md=\"8\"\n        >\n          <echart-scatter\n            :items.sync=\"scatters\"\n            auto-resize\n          />\n        </b-col>\n      </b-row>\n    </b-card>\n\n    <div\n      v-for=\"item,index in accounts\"\n      :key=\"index\"\n    >\n      <div>\n        <div class=\"d-flex justify-content-between align-items-end mb-1\">\n          <b-button\n            v-ripple.400=\"'rgba(255, 255, 255, 0.15)'\"\n            variant=\"warning\"\n            :to=\"`/wallet/import?name=${item.name}`\"\n          >\n            <feather-icon\n              icon=\"EditIcon\"\n              class=\"mr-50\"\n            />\n            <span class=\"align-middle\">{{ item.name }}</span>\n          </b-button>\n          <div class=\"mr-50\">\n            <router-link\n              :to=\"`/wallet/import?name=${item.name}`\"\n              class=\"mr-50\"\n            >\n              <feather-icon\n                icon=\"EditIcon\"\n                class=\"mr-10\"\n              />\n              <span class=\"align-middle\">Edit</span>\n            </router-link>\n          </div>\n        </div>\n\n        <b-row>\n          <b-col\n            v-for=\"acc, j in item.address\"\n            :key=\"j\"\n            sm=\"12\"\n            md=\"6\"\n            xl=\"4\"\n          >\n\n            <b-card\n              no-body\n              class=\"card-browser-states\"\n            >\n              <b-card-header>\n                <div>\n                  <b-card-title> <span class=\"text-uppercase\">{{ acc.chain }}</span></b-card-title>\n                </div>\n                <feather-icon\n                  v-b-tooltip.hover.v-danger\n                  :title=\"`Remove ${acc.chain.toUpperCase()}`\"\n                  icon=\"XSquareIcon\"\n                  size=\"18\"\n                  class=\"cursor-pointer text-danger\"\n                  @click=\"removeAddress(acc.addr)\"\n                />\n              </b-card-header>\n              <b-card-body class=\"text-truncate\">\n                <b-row>\n                  <b-col>\n                    <div class=\"d-flex justify-content-between\">\n                      <b-avatar\n                        :src=\"acc.logo\"\n                        size=\"28\"\n                        variant=\"light-primary\"\n                        rounded\n                      />\n                      <div class=\"text-right\">\n                        <h4 class=\"my-0\">{{ currency }}{{ formatBalance(acc.addr) }}\n                        </h4>\n                        <small :class=\"formatBalanceChangesColor(acc.addr)\"> {{ formatBalanceChanges(acc.addr) }}</small>\n                      </div>\n                    </div>\n                    <app-collapse>\n                      <app-collapse-item title=\"Assets\">\n                        <template #header>\n                          <div>\n                            <feather-icon\n                              icon=\"CopyIcon\"\n                              @click=\"copy(acc.addr)\"\n                            />&nbsp;\n                            <small class=\"text-muted\">{{ formatAddr(acc.addr) }}</small>\n                          </div>\n                        </template>\n                        <div\n                          v-for=\"b,i in balances[acc.addr]\"\n                          :key=\"i\"\n                          class=\"d-flex justify-content-between\"\n                        >\n                          <div\n                            class=\"ml-25 font-weight-bolder text-uppercase text-success d-flex flex-column text-left\"\n                            title=\"Balance\"\n                          >\n                            {{ formatAmount(b.amount, b.denom) }} {{ formatDenom(b.denom) }}\n                            <span class=\"font-small-2 text-muted text-nowrap\">{{ currency }}{{ formatCurrency(b.amount, b.denom) }}</span>\n                          </div>\n                          <div class=\"d-flex flex-column text-right\">\n                            <span class=\"font-weight-bold mb-0\">{{ currency }}{{ formatPrice(b.denom) }}</span>\n                            <small\n                              :class=\"priceColor(b.denom)\"\n                              class=\"py-0\"\n                            >{{ formatChanges(b.denom) }}</small>\n                          </div>\n                        </div>\n                        <div\n                          v-for=\"b,i in delegations[acc.addr]\"\n                          :key=\"`d-${i}`\"\n                          class=\"d-flex justify-content-between align-items-center\"\n                        >\n                          <div\n                            class=\"ml-25 font-weight-bolder text-uppercase text-primary d-flex flex-column text-left\"\n                            title=\"Balance\"\n                          >\n                            {{ formatAmount(b.amount, b.denom) }} {{ formatDenom(b.denom) }}\n                            <span class=\"font-small-2 text-muted text-nowrap\">{{ currency }}{{ formatCurrency(b.amount, b.denom) }}</span>\n                          </div>\n                          <div class=\"d-flex flex-column text-right\">\n                            <span class=\"font-weight-bold mb-0\">{{ currency }}{{ formatPrice(b.denom) }}</span>\n                            <small\n                              :class=\"priceColor(b.denom)\"\n                              class=\"py-0\"\n                            >{{ formatChanges(b.denom) }}</small>\n                          </div>\n                        </div>\n                        <b-button\n                          v-if=\"balances[acc.addr]\"\n                          block\n                          size=\"sm\"\n                          variant=\"outline-primary\"\n                          :to=\"`/${acc.chain}/account/${acc.addr}`\"\n                          class=\"mt-1 mb-0\"\n                          @click=\"updateDefaultWallet(item.name)\"\n                        >\n                          <feather-icon icon=\"TrelloIcon\" /> Detail\n                        </b-button>\n                      </app-collapse-item>\n                    </app-collapse>\n                  </b-col>\n                </b-row>\n              </b-card-body>\n            </b-card>\n          </b-col>\n        </b-row>\n      </div>\n    </div>\n\n    <router-link to=\"/wallet/import\">\n      <b-card class=\"addzone\">\n        <feather-icon icon=\"PlusIcon\" />\n        Connect Wallet\n      </b-card>\n    </router-link>\n    <operation-modal\n      :type=\"operationModalType\"\n      :address=\"selectedAddress\"\n      :selected-chain-name=\"selectedChainName\"\n    />\n  </div>\n</template>\n\n<script>\nimport {\n  BCard, BCardHeader, BCardTitle, BCardBody, VBModal, BRow, BCol, BAvatar, BButton,\n  BDropdown, BDropdownItem, VBTooltip,\n} from 'bootstrap-vue'\nimport Ripple from 'vue-ripple-directive'\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue'\nimport {\n  chartColors,\n  formatNumber,\n  formatTokenAmount, formatTokenDenom, getLocalAccounts, getLocalChains, getUserCurrency, getUserCurrencySign, numberWithCommas, setUserCurrency,\n} from '@/libs/utils'\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue'\nimport AppCollapse from '@core/components/app-collapse/AppCollapse.vue'\nimport AppCollapseItem from '@core/components/app-collapse/AppCollapseItem.vue'\nimport OperationModal from '@/views/components/OperationModal/index.vue'\nimport ChartComponentDoughnut from './ChartComponentDoughnut.vue'\nimport EchartScatter from './components/charts/EchartScatter.vue'\n\nexport default {\n  components: {\n    BAvatar,\n    BCard,\n    BRow,\n    BButton,\n    BCol,\n    BCardHeader,\n    BCardBody,\n    BCardTitle,\n    BDropdown,\n    BDropdownItem,\n    // eslint-disable-next-line vue/no-unused-components\n    VBTooltip,\n    FeatherIcon,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent,\n    ChartComponentDoughnut,\n    AppCollapse,\n    AppCollapseItem,\n    EchartScatter,\n    OperationModal,\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n    'b-modal': VBModal,\n    Ripple,\n  },\n  data() {\n    return {\n      currency: getUserCurrencySign(),\n      currency2: getUserCurrency(),\n      selectedAddress: '',\n      selectedName: '',\n      transferWindow: false,\n      accounts: [],\n      balances: {},\n      delegations: {},\n      ibcDenom: {},\n      quotes: {},\n      operationModalType: '',\n      selectedChainName: '',\n      options: {\n        maintainAspectRatio: false,\n        legend: {\n          display: false,\n        },\n        // responsive: true,\n        title: {\n          display: true,\n          text: 'Token Portfolio',\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: true,\n        },\n        scales: {\n          yAxes: [{\n            // type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            type: 'logarithmic',\n            display: true,\n            position: 'left',\n            id: 'y-axis-1',\n            ticks: {\n              min: 0,\n              autoskipping: true,\n              display: true,\n              maxTicksLimit: 7,\n              callback(val) {\n                return formatNumber(val, true, 0)\n              },\n              color: 'red',\n            },\n            offset: true,\n            gridLines: {\n              display: true,\n              offsetGridLines: false,\n            },\n          }, {\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: false,\n            position: 'right',\n            id: 'y-axis-2',\n            gridLines: {\n              drawOnChartArea: true,\n            },\n          }],\n        },\n      },\n    }\n  },\n  computed: {\n    calculateTotal() {\n      let total = 0\n      if (this.calculateByDenom.value) {\n        Object.values(this.calculateByDenom.value).forEach(i => {\n          total += i\n        })\n      }\n      return numberWithCommas(parseFloat(total.toFixed(2)))\n    },\n    scatters() {\n      const total = []\n      if (this.calculateByDenom.qty) {\n        Object.entries(this.calculateByDenom.qty).forEach(i => {\n          const price = this.getPrice(i[0])\n          total.push([Math.sqrt(i[1]), Math.sqrt(price), i[1] * price, i[0]])\n        })\n      }\n      return total.sort((a, b) => b[2] - a[2])\n    },\n    calculateTotalChange() {\n      let total = 0\n      if (this.calculateByDenom.value) {\n        Object.entries(this.calculateByDenom.value).forEach(i => {\n          total += i[1] * this.getChanges(i[0]) * 0.01\n        })\n      }\n      return parseFloat(total.toFixed(2))\n    },\n    calculateByDenom() {\n      const v = Object.values(this.balances)\n      const total = {}\n      const qty = {}\n      if (v) {\n        v.forEach(tokens => {\n          tokens.forEach(x => {\n            const denom = this.formatDenom(x.denom)\n            if (total[denom]) {\n              total[denom] += this.formatCurrency(x.amount, x.denom)\n            } else {\n              total[denom] = this.formatCurrency(x.amount, x.denom)\n            }\n            if (qty[denom]) {\n              qty[denom] += this.formatAmount(x.amount, x.denom, false)\n            } else {\n              qty[denom] = this.formatAmount(x.amount, x.denom, false)\n            }\n          })\n        })\n      }\n      const d = Object.values(this.delegations)\n      if (d) {\n        d.forEach(tokens => {\n          tokens.forEach(x => {\n            const denom = this.formatDenom(x.denom)\n            if (total[denom]) {\n              total[denom] += this.formatCurrency(x.amount, x.denom)\n            } else {\n              total[denom] = this.formatCurrency(x.amount, x.denom)\n            }\n            if (qty[denom]) {\n              qty[denom] += this.formatAmount(x.amount, x.denom, false)\n            } else {\n              qty[denom] = this.formatAmount(x.amount, x.denom, false)\n            }\n          })\n        })\n      }\n      return { value: total, qty }\n    },\n    calculateChartDoughnut() {\n      const total = this.calculateByDenom\n      const labels = []\n      const data = []\n      Object.entries(total.value).sort((a, b) => b[1] - a[1]).forEach(i => {\n        labels.push(i[0])\n        data.push(i[1])\n      })\n      return {\n        datasets: [\n          {\n            labels,\n            data,\n            backgroundColor: chartColors(),\n            borderWidth: 0,\n            pointStyle: 'rectRounded',\n          },\n        ],\n      }\n    },\n  },\n  created() {\n    this.init()\n  },\n  mounted() {\n  },\n  methods: {\n    refreshPrice() {\n      this.$store.dispatch('chains/getQuotes')\n    },\n    init() {\n      this.accounts = getLocalAccounts()\n      const chains = getLocalChains()\n      if (this.accounts) {\n        Object.keys(this.accounts).forEach(acc => {\n          this.accounts[acc].address.forEach(add => {\n            this.$http.getBankBalances(add.addr, chains[add.chain]).then(res => {\n              if (res && res.length > 0) {\n                this.$set(this.balances, add.addr, res)\n                res.forEach(token => {\n                  if (token.denom.startsWith('ibc')) {\n                    this.$http.getIBCDenomTrace(token.denom, chains[add.chain]).then(denom => {\n                      this.$set(this.ibcDenom, token.denom, denom)\n                    })\n                  }\n                })\n              }\n            })\n            this.$http.getStakingDelegations(add.addr, chains[add.chain]).then(res => {\n              if (res.delegation_responses) {\n                const delegation = res.delegation_responses.map(x => x.balance).reduce((t, c) => {\n                  const t1 = t\n                  if (t1[c.denom]) {\n                    t1[c.denom] += Number(c.amount)\n                  } else {\n                    t1[c.denom] = Number(c.amount)\n                  }\n                  return t1\n                }, {})\n                this.$set(this.delegations, add.addr, Object.keys(delegation).map(x => ({ amount: String(delegation[x]), denom: x })))\n              }\n            }).catch(() => {})\n          })\n        })\n      }\n    },\n    setCurrency(c) {\n      setUserCurrency(c)\n      this.currency2 = c\n      this.currency = getUserCurrencySign()\n    },\n    transfer(type, addr, chain) {\n      this.operationModalType = type\n      this.selectedAddress = addr\n      this.selectedChainName = chain\n    },\n    completeAdd() {\n      this.init()\n      this.$bvModal.hide('add-account')\n    },\n    formatDenom(v) {\n      if (!v) return ''\n      const denom = (v.startsWith('ibc') ? this.ibcDenom[v] : v)\n      return formatTokenDenom(denom)\n    },\n    formatTotalChange(v) {\n      return numberWithCommas(v)\n    },\n    formatAmount(v, denom = 'uatom', format = true) {\n      if (!v) return ''\n      const denom2 = (denom.startsWith('ibc') ? this.ibcDenom[denom] : denom)\n      return formatTokenAmount(v, 2, denom2, format)\n    },\n    formatAddr(v) {\n      return v.substring(0, 10).concat('...', v.substring(v.length - 10))\n    },\n    formatCurrency(amount, denom) {\n      const qty = this.formatAmount(amount, denom, false)\n      return parseFloat((qty * this.getPrice(denom)).toFixed(2))\n    },\n    priceColor(denom) {\n      const d2 = this.formatDenom(denom)\n      const quote = this.$store.state.chains.quotes[d2]\n      if (quote) {\n        const price = quote[`${this.currency2}_24h_change`]\n        return price > 0 ? 'text-success' : 'text-danger'\n      }\n      return ''\n    },\n    getPrice(denom) {\n      const d2 = this.formatDenom(denom)\n      const quote = this.$store.state.chains.quotes[d2]\n      return quote ? quote[this.currency2] || 0 : 0\n    },\n    getChanges(denom) {\n      const d2 = this.formatDenom(denom)\n      const quote = this.$store.state.chains.quotes[d2]\n      if (quote) {\n        const price = quote[`${this.currency2}_24h_change`]\n        return price || 0\n      }\n      return 0\n    },\n    formatChanges(denom) {\n      const price = this.getChanges(denom)\n      if (price > 0) {\n        return `+${parseFloat(price.toFixed(2))}%`\n      }\n      return '0'\n    },\n    formatPrice(denom) {\n      const d2 = this.formatDenom(denom)\n      const quote = this.$store.state.chains.quotes[d2]\n      if (quote) {\n        const price = quote[this.currency2]\n        return price\n      }\n      return 0\n    },\n    formatBalance(v) {\n      let total = 0\n      const balance = this.balances[v]\n      if (balance) {\n        const ret = balance.map(x => this.formatCurrency(x.amount, x.denom)).reduce((t, c) => t + c)\n        total += ret\n      }\n      const delegations = this.delegations[v]\n      if (delegations) {\n        const ret = delegations.map(x => this.formatCurrency(x.amount, x.denom)).reduce((t, c) => t + c, 0)\n        total += ret\n      }\n      return numberWithCommas(parseFloat(total.toFixed(2)))\n    },\n    formatBalanceChanges(v) {\n      let total = 0\n      const balance = this.balances[v]\n      if (balance) {\n        const ret = balance.map(x => this.formatCurrency(x.amount, x.denom) * this.getChanges(x.denom) * 0.01).reduce((t, c) => t + c)\n        total += ret\n      }\n      const delegations = this.delegations[v]\n      if (delegations) {\n        const ret = delegations.map(x => this.formatCurrency(x.amount, x.denom) * this.getChanges(x.denom) * 0.01).reduce((t, c) => t + c, 0)\n        total += ret\n      }\n      return total > 0 ? `+${parseFloat(total.toFixed(2))}` : parseFloat(total.toFixed(2))\n    },\n    formatBalanceChangesColor(v) {\n      const total = this.formatBalanceChanges(v)\n      return total > 0 ? 'text-success' : 'text-danger'\n    },\n    removeAddress(v) {\n      Object.keys(this.accounts).forEach(key => {\n        const item = this.accounts[key]\n        const newAddrs = item.address.filter(a => a.addr !== v)\n        if (newAddrs.length > 0) {\n          this.$set(item, 'address', newAddrs)\n        } else {\n          delete this.accounts[key]\n        }\n      })\n      localStorage.setItem('accounts', JSON.stringify(this.accounts))\n    },\n    updateDefaultWallet(v) {\n      this.$store.commit('setDefaultWallet', v)\n    },\n    copy(v) {\n      this.$copyText(v).then(() => {\n        this.$toast({\n          component: ToastificationContent,\n          props: {\n            title: 'Address copied',\n            icon: 'BellIcon',\n          },\n        })\n      }, e => {\n        this.$toast({\n          component: ToastificationContent,\n          props: {\n            title: `Failed to copy address! ${e}`,\n            icon: 'BellIcon',\n            variant: 'danger',\n          },\n        })\n      })\n    },\n  },\n}\n</script>\n\n<style lang=\"css\">\n.addzone {\n    border: 2px dashed #ced4da;\n    background: #fff;\n    border-radius: 6px;\n    cursor: pointer;\n    box-shadow: none;\n}\n.addzone :hover {\n    border: 2px dashed #7367F0;\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module"}