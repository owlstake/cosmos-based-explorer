{"ast":null,"code":"import _classCallCheck from \"/root/cosmos-based-explorer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/root/cosmos-based-explorer/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport compareVersions from 'compare-versions';\nimport StdTx from './stdtx';\n\nvar WrapStdTx = /*#__PURE__*/function () {\n  function WrapStdTx() {\n    _classCallCheck(this, WrapStdTx);\n\n    this.std = true;\n    this.code = 0;\n    this.txhash = '';\n    this.data = '';\n    this.gas_used = '';\n    this.gas_wanted = '';\n    this.height = 0;\n    this.logs = [];\n    this.timestamp = '';\n    this.tx = new StdTx();\n    this.info = '';\n    this.raw_log = '';\n  }\n\n  _createClass(WrapStdTx, null, [{\n    key: \"create\",\n    value: function create(element) {\n      var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0.40';\n      var self = new WrapStdTx();\n\n      if (compareVersions(version, '0.40') < 1) {\n        if (element.txhash) {\n          self.txhash = element.txhash;\n          self.data = element.data;\n          self.gas_used = element.gas_used;\n          self.gas_wanted = element.gas_wanted;\n          self.height = Number(element.height);\n          self.logs = element.logs;\n          self.timestamp = element.timestamp;\n          self.tx = StdTx.create(element.tx);\n        } else {\n          self.std = false;\n          self.raw = element;\n        }\n      } else {\n        self.code = element.tx_response.code;\n        self.txhash = element.tx_response.txhash;\n        self.data = element.tx_response.data;\n        self.gas_used = element.tx_response.gas_used;\n        self.gas_wanted = element.tx_response.gas_wanted;\n        self.height = Number(element.tx_response.height);\n        self.info = element.tx_response.info;\n        self.logs = element.tx_response.logs;\n        self.timestamp = element.tx_response.timestamp;\n        self.tx = StdTx.create(element.tx, version);\n        self.raw_log = element.tx_response.raw_log;\n      }\n\n      return self;\n    }\n  }]);\n\n  return WrapStdTx;\n}();\n\nexport { WrapStdTx as default };","map":{"version":3,"names":["compareVersions","StdTx","WrapStdTx","std","code","txhash","data","gas_used","gas_wanted","height","logs","timestamp","tx","info","raw_log","element","version","self","Number","create","raw","tx_response"],"sources":["/root/cosmos-based-explorer/src/libs/data/wrapstdtx.js"],"sourcesContent":["import compareVersions from 'compare-versions'\nimport StdTx from './stdtx'\n\nexport default class WrapStdTx {\n  constructor() {\n    this.std = true\n    this.code = 0\n    this.txhash = ''\n    this.data = ''\n    this.gas_used = ''\n    this.gas_wanted = ''\n    this.height = 0\n    this.logs = []\n    this.timestamp = ''\n    this.tx = new StdTx()\n    this.info = ''\n    this.raw_log = ''\n  }\n\n  static create(element, version = '0.40') {\n    const self = new WrapStdTx()\n    if (compareVersions(version, '0.40') < 1) {\n      if (element.txhash) {\n        self.txhash = element.txhash\n        self.data = element.data\n        self.gas_used = element.gas_used\n        self.gas_wanted = element.gas_wanted\n        self.height = Number(element.height)\n        self.logs = element.logs\n        self.timestamp = element.timestamp\n        self.tx = StdTx.create(element.tx)\n      } else {\n        self.std = false\n        self.raw = element\n      }\n    } else {\n      self.code = element.tx_response.code\n      self.txhash = element.tx_response.txhash\n      self.data = element.tx_response.data\n      self.gas_used = element.tx_response.gas_used\n      self.gas_wanted = element.tx_response.gas_wanted\n      self.height = Number(element.tx_response.height)\n      self.info = element.tx_response.info\n      self.logs = element.tx_response.logs\n      self.timestamp = element.tx_response.timestamp\n      self.tx = StdTx.create(element.tx, version)\n      self.raw_log = element.tx_response.raw_log\n    }\n    return self\n  }\n}\n"],"mappings":";;;AAAA,OAAOA,eAAP,MAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;IAEqBC,S;EACnB,qBAAc;IAAA;;IACZ,KAAKC,GAAL,GAAW,IAAX;IACA,KAAKC,IAAL,GAAY,CAAZ;IACA,KAAKC,MAAL,GAAc,EAAd;IACA,KAAKC,IAAL,GAAY,EAAZ;IACA,KAAKC,QAAL,GAAgB,EAAhB;IACA,KAAKC,UAAL,GAAkB,EAAlB;IACA,KAAKC,MAAL,GAAc,CAAd;IACA,KAAKC,IAAL,GAAY,EAAZ;IACA,KAAKC,SAAL,GAAiB,EAAjB;IACA,KAAKC,EAAL,GAAU,IAAIX,KAAJ,EAAV;IACA,KAAKY,IAAL,GAAY,EAAZ;IACA,KAAKC,OAAL,GAAe,EAAf;EACD;;;;WAED,gBAAcC,OAAd,EAAyC;MAAA,IAAlBC,OAAkB,uEAAR,MAAQ;MACvC,IAAMC,IAAI,GAAG,IAAIf,SAAJ,EAAb;;MACA,IAAIF,eAAe,CAACgB,OAAD,EAAU,MAAV,CAAf,GAAmC,CAAvC,EAA0C;QACxC,IAAID,OAAO,CAACV,MAAZ,EAAoB;UAClBY,IAAI,CAACZ,MAAL,GAAcU,OAAO,CAACV,MAAtB;UACAY,IAAI,CAACX,IAAL,GAAYS,OAAO,CAACT,IAApB;UACAW,IAAI,CAACV,QAAL,GAAgBQ,OAAO,CAACR,QAAxB;UACAU,IAAI,CAACT,UAAL,GAAkBO,OAAO,CAACP,UAA1B;UACAS,IAAI,CAACR,MAAL,GAAcS,MAAM,CAACH,OAAO,CAACN,MAAT,CAApB;UACAQ,IAAI,CAACP,IAAL,GAAYK,OAAO,CAACL,IAApB;UACAO,IAAI,CAACN,SAAL,GAAiBI,OAAO,CAACJ,SAAzB;UACAM,IAAI,CAACL,EAAL,GAAUX,KAAK,CAACkB,MAAN,CAAaJ,OAAO,CAACH,EAArB,CAAV;QACD,CATD,MASO;UACLK,IAAI,CAACd,GAAL,GAAW,KAAX;UACAc,IAAI,CAACG,GAAL,GAAWL,OAAX;QACD;MACF,CAdD,MAcO;QACLE,IAAI,CAACb,IAAL,GAAYW,OAAO,CAACM,WAAR,CAAoBjB,IAAhC;QACAa,IAAI,CAACZ,MAAL,GAAcU,OAAO,CAACM,WAAR,CAAoBhB,MAAlC;QACAY,IAAI,CAACX,IAAL,GAAYS,OAAO,CAACM,WAAR,CAAoBf,IAAhC;QACAW,IAAI,CAACV,QAAL,GAAgBQ,OAAO,CAACM,WAAR,CAAoBd,QAApC;QACAU,IAAI,CAACT,UAAL,GAAkBO,OAAO,CAACM,WAAR,CAAoBb,UAAtC;QACAS,IAAI,CAACR,MAAL,GAAcS,MAAM,CAACH,OAAO,CAACM,WAAR,CAAoBZ,MAArB,CAApB;QACAQ,IAAI,CAACJ,IAAL,GAAYE,OAAO,CAACM,WAAR,CAAoBR,IAAhC;QACAI,IAAI,CAACP,IAAL,GAAYK,OAAO,CAACM,WAAR,CAAoBX,IAAhC;QACAO,IAAI,CAACN,SAAL,GAAiBI,OAAO,CAACM,WAAR,CAAoBV,SAArC;QACAM,IAAI,CAACL,EAAL,GAAUX,KAAK,CAACkB,MAAN,CAAaJ,OAAO,CAACH,EAArB,EAAyBI,OAAzB,CAAV;QACAC,IAAI,CAACH,OAAL,GAAeC,OAAO,CAACM,WAAR,CAAoBP,OAAnC;MACD;;MACD,OAAOG,IAAP;IACD;;;;;;SA9CkBf,S"},"metadata":{},"sourceType":"module"}