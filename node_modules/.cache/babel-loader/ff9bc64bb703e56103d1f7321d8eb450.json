{"ast":null,"code":"import \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.error.cause.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getLocalAccounts, getLocalChains } from '@/libs/utils';\nimport { BRow, BCol, BCard, BCardTitle, BAvatar, VBTooltip } from 'bootstrap-vue';\nimport FlipCountdown from 'vue2-flip-countdown';\nimport dayjs from 'dayjs';\nexport default {\n  name: 'WalletUpgradeEvents',\n  components: {\n    BAvatar: BAvatar,\n    BRow: BRow,\n    BCol: BCol,\n    BCard: BCard,\n    BCardTitle: BCardTitle,\n    FlipCountdown: FlipCountdown\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n  props: {\n    content: {\n      type: String,\n      default: function _default() {\n        return '';\n      }\n    }\n  },\n  data: function data() {\n    return {\n      proposals: [],\n      latest: {}\n    };\n  },\n  computed: {\n    list: function list() {\n      var _this = this;\n\n      return this.proposals.filter(function (x) {\n        return [2, 3].includes(x.status);\n      }).map(function (x) {\n        var x2 = x;\n        x2.countdown = _this.estmatetime(x.chain.chain_name, x.contents.plan);\n        x2.variant = dayjs().isAfter(dayjs(x2.countdown)) ? 'dark' : '';\n        return x2;\n      }).sort(function (a, b) {\n        return dayjs(b.voting_end_time).unix() - dayjs(a.voting_end_time).unix();\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    var accounts = getLocalAccounts();\n\n    if (accounts) {\n      var chains = getLocalChains();\n      var toQuery = {};\n      Object.keys(accounts).forEach(function (acc) {\n        accounts[acc].address.forEach(function (add) {\n          var conf = chains[add.chain];\n\n          if (conf) {\n            toQuery[add.chain] = conf;\n          }\n        });\n      });\n      Object.values(toQuery).forEach(function (item) {\n        _this2.fetchProposals(item);\n      });\n    }\n  },\n  methods: {\n    estmatetime: function estmatetime(chainname, plan) {\n      if (plan.height > 0) {\n        var latest = this.latest[chainname];\n\n        if (latest) {\n          var gap = plan.height - this.latest[chainname].height;\n\n          if (gap > 0) {\n            return dayjs().add(gap * 6, 'second').format('YYYY-MM-DD hh:mm:ss');\n          }\n        }\n\n        return '1990-01-01';\n      }\n\n      return dayjs(plan.time).format('YYYY-MM-DD hh:mm:ss');\n    },\n    fetchProposals: function fetchProposals(item) {\n      var _this3 = this;\n\n      this.$http.getGovernanceList('', item).then(function (data) {\n        data.proposals.forEach(function (p) {\n          var type = p.contents['@type'];\n\n          if (type.indexOf('SoftwareUpgradeProposal') > 0) {\n            var p2 = p;\n            p2.chain = item;\n\n            if (dayjs(p.voting_end_time).add(15, 'day').isAfter(dayjs())) {\n              _this3.proposals.push(p2);\n            }\n          }\n        });\n      }, function (err) {\n        throw new Error(err);\n      });\n      this.$http.getLatestBlock(item).then(function (b) {\n        _this3.$set(_this3.latest, item.chain_name, b.block.header);\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA,SACAA,IADA,EACAC,IADA,EACAC,KADA,EACAC,UADA,EACAC,OADA,EACAC,SADA,QAEA,eAFA;AAGA;AACA;AAEA;EACAC,2BADA;EAEAC;IACAH,gBADA;IAEAJ,UAFA;IAGAC,UAHA;IAIAC,YAJA;IAKAC,sBALA;IAMAK;EANA,CAFA;EAUAC;IACA;EADA,CAVA;EAaAC;IACAC;MACAC,YADA;MAEAC;QAAA;MAAA;IAFA;EADA,CAbA;EAmBAC,IAnBA,kBAmBA;IACA;MACAC,aADA;MAEAC;IAFA;EAIA,CAxBA;EAyBAC;IACAC,IADA,kBACA;MAAA;;MACA,sBACAC,MADA,CACA;QAAA;MAAA,CADA,EAEAC,GAFA,CAEA;QACA;QACAC;QACAA;QACA;MACA,CAPA,EAQAC,IARA,CAQA;QAAA;MAAA,CARA;IASA;EAXA,CAzBA;EAsCAC,OAtCA,qBAsCA;IAAA;;IACA;;IACA;MACA;MACA;MAEAC;QACAC;UACA;;UACA;YACAC;UACA;QACA,CALA;MAMA,CAPA;MASAF;QACA;MACA,CAFA;IAGA;EACA,CAzDA;EA0DAG;IACAC,WADA,uBACAC,SADA,EACAC,IADA,EACA;MACA;QACA;;QACA;UACA;;UACA;YACA;UACA;QACA;;QACA;MACA;;MACA;IACA,CAbA;IAcAC,cAdA,0BAcAC,IAdA,EAcA;MAAA;;MACA;QACAlB;UACA;;UACA;YACA;YACAmB;;YACA;cACA;YACA;UACA;QACA,CATA;MAUA,CAXA,EAWA;QACA;MACA,CAbA;MAcA;QACA;MACA,CAFA;IAGA;EAhCA;AA1DA","names":["BRow","BCol","BCard","BCardTitle","BAvatar","VBTooltip","name","components","FlipCountdown","directives","props","content","type","default","data","proposals","latest","computed","list","filter","map","x2","sort","mounted","Object","accounts","toQuery","methods","estmatetime","chainname","plan","fetchProposals","item","p2"],"sourceRoot":"src/views","sources":["WalletUpgradeEvents.vue"],"sourcesContent":["<template>\n  <div>\n    <b-row class=\"match-height\">\n      <b-col\n        v-for=\"(p,i) in list\"\n        :key=\"`${p.id}-${i}`\"\n        lg=\"6\"\n        md=\"12\"\n      >\n        <b-card :bg-variant=\"p.variant\">\n          <b-card-title class=\"mb-1\">\n            <b-avatar\n              v-b-tooltip.hover\n              :src=\"p.chain.logo\"\n              :title=\"p.chain.chain_name\"\n              variant=\"light-primary\"\n              size=\"22\"\n            />\n            #{{ p.id }}.\n            <router-link\n              :to=\"`/${p.chain.chain_name}/gov/${p.id}?from=/wallet/votes`\"\n            >\n              {{ p.title }} {{ p.status }}\n            </router-link>\n          </b-card-title>\n          <flip-countdown\n            :deadline=\"p.countdown\"\n            countdown-size=\"28px\"\n            label-size=\"12px\"\n          />\n        </b-card>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\nimport { getLocalAccounts, getLocalChains } from '@/libs/utils'\nimport {\n  BRow, BCol, BCard, BCardTitle, BAvatar, VBTooltip,\n} from 'bootstrap-vue'\nimport FlipCountdown from 'vue2-flip-countdown'\nimport dayjs from 'dayjs'\n\nexport default {\n  name: 'WalletUpgradeEvents',\n  components: {\n    BAvatar,\n    BRow,\n    BCol,\n    BCard,\n    BCardTitle,\n    FlipCountdown,\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n  },\n  props: {\n    content: {\n      type: String,\n      default: () => '',\n    },\n  },\n  data() {\n    return {\n      proposals: [],\n      latest: {},\n    }\n  },\n  computed: {\n    list() {\n      return this.proposals\n        .filter(x => [2, 3].includes(x.status))\n        .map(x => {\n          const x2 = x\n          x2.countdown = this.estmatetime(x.chain.chain_name, x.contents.plan)\n          x2.variant = dayjs().isAfter(dayjs(x2.countdown)) ? 'dark' : ''\n          return x2\n        })\n        .sort((a, b) => dayjs(b.voting_end_time).unix() - dayjs(a.voting_end_time).unix())\n    },\n  },\n  mounted() {\n    const accounts = getLocalAccounts()\n    if (accounts) {\n      const chains = getLocalChains()\n      const toQuery = {}\n\n      Object.keys(accounts).forEach(acc => {\n        accounts[acc].address.forEach(add => {\n          const conf = chains[add.chain]\n          if (conf) {\n            toQuery[add.chain] = conf\n          }\n        })\n      })\n\n      Object.values(toQuery).forEach(item => {\n        this.fetchProposals(item)\n      })\n    }\n  },\n  methods: {\n    estmatetime(chainname, plan) {\n      if (plan.height > 0) {\n        const latest = this.latest[chainname]\n        if (latest) {\n          const gap = plan.height - this.latest[chainname].height\n          if (gap > 0) {\n            return dayjs().add(gap * 6, 'second').format('YYYY-MM-DD hh:mm:ss')\n          }\n        }\n        return '1990-01-01'\n      }\n      return dayjs(plan.time).format('YYYY-MM-DD hh:mm:ss')\n    },\n    fetchProposals(item) {\n      this.$http.getGovernanceList('', item).then(data => {\n        data.proposals.forEach(p => {\n          const type = p.contents['@type']\n          if (type.indexOf('SoftwareUpgradeProposal') > 0) {\n            const p2 = p\n            p2.chain = item\n            if (dayjs(p.voting_end_time).add(15, 'day').isAfter(dayjs())) {\n              this.proposals.push(p2)\n            }\n          }\n        })\n      }, err => {\n        throw new Error(err)\n      })\n      this.$http.getLatestBlock(item).then(b => {\n        this.$set(this.latest, item.chain_name, b.block.header)\n      })\n    },\n  },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}