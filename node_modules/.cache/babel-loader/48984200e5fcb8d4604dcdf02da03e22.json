{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BTable, BCard, BCardHeader, BCardTitle, VBTooltip } from 'bootstrap-vue';\nimport { getCachedValidators, getStakingValidatorByHex, toDay } from '@/libs/utils'; // import fetch from 'node-fetch'\n\nexport default {\n  components: {\n    BCard,\n    BTable,\n    BCardHeader,\n    BCardTitle\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n\n  data() {\n    return {\n      islive: true,\n      blocks: [],\n      list_fields: [{\n        key: 'height',\n        sortable: true\n      }, {\n        key: 'hash',\n        thClass: 'd-none d-lg-block',\n        tdClass: 'd-none d-lg-block text-truncate'\n      }, {\n        key: 'proposer',\n        tdClass: 'text-truncate'\n      }, {\n        key: 'txs'\n      }, {\n        key: 'time',\n        thClass: 'd-none d-md-block',\n        tdClass: 'd-none d-md-block'\n      }]\n    };\n  },\n\n  created() {\n    this.$http.getLatestBlock().then(res => {\n      this.blocks.push(res);\n      const list = [];\n      const {\n        height\n      } = res.block.header;\n\n      for (let i = 1; i < 10; i += 1) {\n        list.push(height - i);\n      }\n\n      if (!getCachedValidators()) {\n        this.$http.getValidatorList();\n      }\n\n      let promise = Promise.resolve();\n      list.forEach(item => {\n        promise = promise.then(() => new Promise(resolve => {\n          this.$http.getBlockByHeight(item).then(b => {\n            resolve();\n            this.blocks.push(b);\n          });\n        }));\n      });\n      this.timer = setInterval(this.fetch, 6000);\n    });\n  },\n\n  beforeDestroy() {\n    this.islive = false;\n    clearInterval(this.timer);\n  },\n\n  methods: {\n    length: v => Array.isArray(v) ? v.length : 0,\n    formatTime: v => toDay(v, 'time'),\n\n    formatProposer(v) {\n      return getStakingValidatorByHex(this.$http.config.chain_name, v);\n    },\n\n    fetch() {\n      this.$http.getLatestBlock().then(b => {\n        const has = this.blocks.findIndex(x => x.block.header.height === b.block.header.height);\n        if (has < 0) this.blocks.unshift(b);\n        if (this.blocks.length > 200) this.blocks.pop();\n      });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}