{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { sha256 } from '@cosmjs/crypto';\nimport { toHex } from '@cosmjs/encoding';\nimport { BTable, BCardTitle, BCard } from 'bootstrap-vue';\nimport { formatTokenAmount, formatTokenDenom } from '@/libs/utils';\nexport default {\n  components: {\n    BCard,\n    BTable,\n    BCardTitle\n  },\n\n  data() {\n    return {\n      islive: true,\n      assets: [],\n      denoms: {},\n      cfield: [{\n        key: 'denom',\n        formatter: this.formatDenom,\n        tdClass: 'text-nowrap text-truncate overflow-hidden'\n      }, {\n        key: 'abbr',\n        label: 'Amount'\n      }]\n    };\n  },\n\n  created() {\n    this.$http.getAllIBCDenoms().then(x => {\n      x.denom_traces.forEach(trace => {\n        const hash = toHex(sha256(new TextEncoder().encode(`${trace.path}/${trace.base_denom}`)));\n        this.$set(this.denoms, `ibc/${hash.toUpperCase()}`, trace);\n      });\n    });\n    this.$http.getBankTotals().then(res => {\n      const toshow = res.sort();\n      this.assets = toshow.reverse().map(x => {\n        const xh = x;\n        xh.abbr = formatTokenAmount(x.amount, 0, x.denom);\n        return xh;\n      });\n    });\n  },\n\n  beforeDestroy() {\n    this.islive = false;\n  },\n\n  methods: {\n    formatDenom(v) {\n      if (this.denoms[v]) {\n        const trace = this.denoms[v];\n        return `* ${formatTokenDenom(trace.base_denom)} (${trace.path})`;\n      }\n\n      return formatTokenDenom(v);\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}