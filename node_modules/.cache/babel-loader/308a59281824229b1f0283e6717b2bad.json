{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BCard, BTable } from 'bootstrap-vue';\nimport { fromBase64 } from '@cosmjs/encoding';\nimport { decodeTxRaw } from '@cosmjs/proto-signing';\nimport Tx from '@/libs/data/tx';\nimport { abbrMessage, tokenFormatter } from '@/libs/utils';\nimport ObjectFieldComponent from './ObjectFieldComponent.vue';\nimport ArrayFieldComponent from './ArrayFieldComponent.vue';\nexport default {\n  components: {\n    BCard: BCard,\n    BTable: BTable,\n    ObjectFieldComponent: ObjectFieldComponent,\n    ArrayFieldComponent: ArrayFieldComponent\n  },\n  beforeRouteUpdate: function beforeRouteUpdate(to, from, next) {\n    var height = to.params.height;\n\n    if (height > 0 && height !== from.params.height) {\n      this.initData(height);\n      next();\n    }\n  },\n  data: function data() {\n    return {\n      block: {\n        block: {\n          header: {},\n          data: {},\n          evidence: {}\n        }\n      },\n      txs: null,\n      fields: [{\n        key: 'hash'\n      }, {\n        key: 'fee',\n        formatter: function formatter(v) {\n          return tokenFormatter(v);\n        }\n      }, {\n        key: 'messages',\n        formatter: function formatter(v) {\n          return abbrMessage(v);\n        }\n      }, {\n        key: 'memo'\n      }]\n    };\n  },\n  created: function created() {\n    var height = this.$route.params.height;\n    this.initData(height);\n  },\n  methods: {\n    initData: function initData(height) {\n      var _this = this;\n\n      this.$http.getBlockByHeight(height).then(function (res) {\n        _this.block = res;\n        var txs = res.block.data.txs;\n        if (txs === null) return;\n        var array = [];\n\n        for (var i = 0; i < txs.length; i += 1) {\n          var tx = new Tx();\n\n          try {\n            var origin = decodeTxRaw(fromBase64(txs[i]));\n            tx = Tx.create(origin);\n          } catch (e) {// catch errors\n          }\n\n          tx.setHash(txs[i]);\n          array.push(tx);\n        }\n\n        if (array.length > 0) _this.txs = array;\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACAC,YADA;IAEAC,cAFA;IAGAC,0CAHA;IAIAC;EAJA,CADA;EAOAC,iBAPA,6BAOAC,EAPA,EAOAC,IAPA,EAOAC,IAPA,EAOA;IACA;;IACA;MACA;MACAA;IACA;EACA,CAbA;EAcAC,IAdA,kBAcA;IACA;MACAC;QAAAA;UAAAC;UAAAF;UAAAG;QAAA;MAAA,CADA;MAEAC,SAFA;MAGAC,SACA;QAAAC;MAAA,CADA,EAEA;QAAAA;QAAAC;UAAA;QAAA;MAAA,CAFA,EAGA;QAAAD;QAAAC;UAAA;QAAA;MAAA,CAHA,EAIA;QAAAD;MAAA,CAJA;IAHA;EAUA,CAzBA;EA0BAE,OA1BA,qBA0BA;IACA;IACA;EACA,CA7BA;EA8BAC;IACAC,QADA,oBACAC,MADA,EACA;MAAA;;MACA;QACA;QACA;QACA;QACA;;QACA;UACA;;UACA;YACA;YACAC;UACA,CAHA,CAGA,WACA;UACA;;UACAA;UACAC;QACA;;QACA;MACA,CAjBA;IAkBA;EApBA;AA9BA","names":["components","BCard","BTable","ObjectFieldComponent","ArrayFieldComponent","beforeRouteUpdate","to","from","next","data","block","header","evidence","txs","fields","key","formatter","created","methods","initData","height","tx","array"],"sourceRoot":"src/views","sources":["Block.vue"],"sourcesContent":["<template>\n  <div>\n    <b-card title=\"Block Id\">\n      <object-field-component :tablefield=\"block.block_id\" />\n    </b-card>\n\n    <b-card title=\"Block Header\">\n      <object-field-component :tablefield=\"block.block.header\" />\n    </b-card>\n\n    <b-card\n      v-if=\"block.block.data.txs\"\n      title=\"Transaction\"\n    >\n      <b-table\n        :items=\"txs\"\n        :fields=\"fields\"\n        responsive=\"sm\"\n      >\n        <template #cell(hash)=\"data\">\n          <router-link :to=\"`../tx/${data.value}`\">\n            {{ data.value }}\n          </router-link>\n        </template>\n      </b-table>\n    </b-card>\n\n    <b-card\n      v-if=\"block.block.evidence.evidence\"\n      title=\"Evidence\"\n    >\n      <array-field-component :tablefield=\"block.block.evidence.evidence\" />\n    </b-card>\n\n    <b-card title=\"Last Commit\">\n      <object-field-component\n        :tablefield=\"block.block.last_commit\"\n        :small=\"true\"\n      />\n    </b-card>\n  </div>\n</template>\n\n<script>\nimport { BCard, BTable } from 'bootstrap-vue'\nimport { fromBase64 } from '@cosmjs/encoding'\nimport { decodeTxRaw } from '@cosmjs/proto-signing'\nimport Tx from '@/libs/data/tx'\nimport { abbrMessage, tokenFormatter } from '@/libs/utils'\nimport ObjectFieldComponent from './ObjectFieldComponent.vue'\nimport ArrayFieldComponent from './ArrayFieldComponent.vue'\n\nexport default {\n  components: {\n    BCard,\n    BTable,\n    ObjectFieldComponent,\n    ArrayFieldComponent,\n  },\n  beforeRouteUpdate(to, from, next) {\n    const { height } = to.params\n    if (height > 0 && height !== from.params.height) {\n      this.initData(height)\n      next()\n    }\n  },\n  data() {\n    return {\n      block: { block: { header: {}, data: {}, evidence: {} } },\n      txs: null,\n      fields: [\n        { key: 'hash' },\n        { key: 'fee', formatter: v => tokenFormatter(v) },\n        { key: 'messages', formatter: v => abbrMessage(v) },\n        { key: 'memo' },\n      ],\n    }\n  },\n  created() {\n    const { height } = this.$route.params\n    this.initData(height)\n  },\n  methods: {\n    initData(height) {\n      this.$http.getBlockByHeight(height).then(res => {\n        this.block = res\n        const { txs } = res.block.data\n        if (txs === null) return\n        const array = []\n        for (let i = 0; i < txs.length; i += 1) {\n          let tx = new Tx()\n          try {\n            const origin = decodeTxRaw(fromBase64(txs[i]))\n            tx = Tx.create(origin)\n          } catch (e) {\n            // catch errors\n          }\n          tx.setHash(txs[i])\n          array.push(tx)\n        }\n        if (array.length > 0) this.txs = array\n      })\n    },\n  },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}