{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BFormInput, BFormGroup, BInputGroupAppend } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount } from '@/libs/utils';\nimport vSelect from 'vue-select';\nexport default {\n  name: 'Redelegate',\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BInputGroup: BInputGroup,\n    BFormInput: BFormInput,\n    BFormGroup: BFormGroup,\n    vSelect: vSelect,\n    BInputGroupAppend: BInputGroupAppend,\n    ValidationProvider: ValidationProvider\n  },\n  props: {\n    validatorAddress: {\n      type: String,\n      default: null\n    },\n    address: {\n      type: String,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      selectedAddress: this.address,\n      unbundValidators: [],\n      validators: [],\n      toValidator: null,\n      token: '',\n      amount: null,\n      delegations: [],\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  computed: {\n    valOptions: function valOptions() {\n      var options = [];\n      var vals = this.validators.map(function (x) {\n        return {\n          value: x.operator_address,\n          label: \"\".concat(x.description.moniker, \" (\").concat(Number(x.commission.rate) * 100, \"%)\")\n        };\n      });\n\n      if (vals.length > 0) {\n        options.push({\n          value: null,\n          label: '=== ACTIVE VALIDATORS ==='\n        });\n        options = options.concat(vals);\n      }\n\n      var unbunded = this.unbundValidators.map(function (x) {\n        return {\n          value: x.operator_address,\n          label: \"* \".concat(x.description.moniker, \" (\").concat(Number(x.commission.rate) * 100, \"%)\")\n        };\n      });\n\n      if (unbunded.length > 0) {\n        options.push({\n          value: null,\n          label: '=== INACTIVE VALIDATORS ===',\n          disabled: true\n        });\n        options = options.concat(unbunded);\n      }\n\n      return options;\n    },\n    tokenOptions: function tokenOptions() {\n      var _this = this;\n\n      if (!this.delegations) return [];\n      return this.delegations.filter(function (x) {\n        return x.delegation.validator_address === _this.validatorAddress;\n      }).map(function (x) {\n        return {\n          value: x.balance.denom,\n          label: formatToken(x.balance)\n        };\n      });\n    },\n    msg: function msg() {\n      return [{\n        typeUrl: '/cosmos.staking.v1beta1.MsgBeginRedelegate',\n        value: {\n          delegatorAddress: this.address,\n          validatorSrcAddress: this.validatorAddress,\n          validatorDstAddress: this.toValidator,\n          amount: {\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token\n          }\n        }\n      }];\n    }\n  },\n  mounted: function mounted() {\n    this.$emit('update', {\n      modalTitle: 'Redelegate Token',\n      historyName: 'redelegate'\n    });\n    this.loadData();\n  },\n  methods: {\n    loadData: function loadData() {\n      var _this2 = this;\n\n      this.$http.getValidatorList().then(function (v) {\n        _this2.validators = v;\n      });\n      this.$http.getValidatorUnbondedList().then(function (v) {\n        _this2.unbundValidators = v;\n      });\n      this.$http.getStakingDelegations(this.address).then(function (res) {\n        _this2.delegations = res.delegation_responses;\n\n        _this2.delegations.forEach(function (x) {\n          if (x.delegation.validator_address === _this2.validatorAddress) {\n            _this2.token = x.balance.denom;\n\n            _this2.$emit('update', {\n              feeDenom: x.balance.denom\n            });\n          }\n        });\n      });\n    },\n    format: function format(v) {\n      return formatToken(v);\n    },\n    printDenom: function printDenom() {\n      return formatTokenDenom(this.token);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA;AACA,SACAA,IADA,EACAC,IADA,EACAC,WADA,EACAC,UADA,EACAC,UADA,EAEAC,iBAFA,QAGA,eAHA;AAIA,SACAC,QADA,EACAC,KADA,EACAC,GADA,EACAC,OADA,EACAC,KADA,EACAC,OADA,EACAC,QADA,EACAC,GADA,EACAC,MADA,EACAC,SADA,EACAC,MADA,QAEA,cAFA;AAGA,SACAC,WADA,EACAC,gBADA,EACAC,aADA,QAEA,cAFA;AAGA;AAEA;EACAC,kBADA;EAEAC;IACArB,UADA;IAEAC,UAFA;IAGAC,wBAHA;IAIAC,sBAJA;IAKAC,sBALA;IAMAkB,gBANA;IAOAjB,oCAPA;IAQAkB;EARA,CAFA;EAYAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA;EALA,CAZA;EAsBAE,IAtBA,kBAsBA;IACA;MACAC,6BADA;MAEAC,oBAFA;MAGAC,cAHA;MAIAC,iBAJA;MAKAC,SALA;MAMAC,YANA;MAOAC,eAPA;MASA9B,kBATA;MAUAM,kBAVA;MAWAL,YAXA;MAYAM,QAZA;MAaAF,gBAbA;MAcAH,QAdA;MAeAE,YAfA;MAgBAD,gBAhBA;MAiBAK,cAjBA;MAkBAE,cAlBA;MAmBAD;IAnBA;EAqBA,CA5CA;EA6CAsB;IACAC,UADA,wBACA;MACA;MACA;QAAA;UAAAC;UAAAC;QAAA;MAAA;;MACA;QACAC;UAAAF;UAAAC;QAAA;QACAC;MACA;;MACA;QAAA;UAAAF;UAAAC;QAAA;MAAA;;MACA;QACAC;UAAAF;UAAAC;UAAAE;QAAA;QACAD;MACA;;MACA;IACA,CAdA;IAeAE,YAfA,0BAeA;MAAA;;MACA;MACA;QAAA;MAAA;QAAA;UAAAJ;UAAAC;QAAA;MAAA;IACA,CAlBA;IAmBAI,GAnBA,iBAmBA;MACA;QACAC,qDADA;QAEAN;UACAO,8BADA;UAEAC,0CAFA;UAGAC,qCAHA;UAIAb;YACAA,8CADA;YAEAc;UAFA;QAJA;MAFA;IAYA;EAhCA,CA7CA;EA+EAC,OA/EA,qBA+EA;IACA;MACAC,8BADA;MAEAC;IAFA;IAIA;EACA,CArFA;EAsFAC;IACAC,QADA,sBACA;MAAA;;MACA;QACA;MACA,CAFA;MAGA;QACA;MACA,CAFA;MAGA;QACA;;QACA;UACA;YACA;;YACA;cACAC;YADA;UAGA;QACA,CAPA;MAQA,CAVA;IAWA,CAnBA;IAqBAC,MArBA,kBAqBAC,CArBA,EAqBA;MACA;IACA,CAvBA;IAwBAC,UAxBA,wBAwBA;MACA;IACA;EA1BA;AAtFA","names":["BRow","BCol","BInputGroup","BFormInput","BFormGroup","BInputGroupAppend","required","email","url","between","alpha","integer","password","min","digits","alphaDash","length","formatToken","formatTokenDenom","getUnitAmount","name","components","vSelect","ValidationProvider","props","validatorAddress","type","default","address","data","selectedAddress","unbundValidators","validators","toValidator","token","amount","delegations","computed","valOptions","value","label","options","disabled","tokenOptions","msg","typeUrl","delegatorAddress","validatorSrcAddress","validatorDstAddress","denom","mounted","modalTitle","historyName","methods","loadData","feeDenom","format","v","printDenom"],"sourceRoot":"src/views/components/OperationModal/components","sources":["Redelegate.vue"],"sourcesContent":["<template>\n  <div>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Delegator\"\n          label-for=\"Account\"\n        >\n          <validation-provider\n            #default=\"{ errors }\"\n            rules=\"required\"\n            name=\"Delegator\"\n          >\n            <b-form-input\n              v-model=\"address\"\n              readonly\n            />\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"From Validator\"\n          label-for=\"validator\"\n        >\n          <v-select\n            :value=\"validatorAddress\"\n            :options=\"valOptions\"\n            :reduce=\"val => val.value\"\n            placeholder=\"Select a validator\"\n            :disabled=\"true\"\n          />\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Current Delegation\"\n          label-for=\"Token\"\n        >\n          <validation-provider\n            #default=\"{ errors }\"\n            rules=\"required\"\n            name=\"Token\"\n          >\n            <v-select\n              v-model=\"token\"\n              :options=\"tokenOptions\"\n              :reduce=\"token => token.value\"\n            />\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"To Validator\"\n          label-for=\"validator\"\n        >\n          <v-select\n            v-model=\"toValidator\"\n            :options=\"valOptions\"\n            :reduce=\"val => val.value\"\n            placeholder=\"Select a validator\"\n            :selectable=\"(v) => v.value\"\n          />\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Amount\"\n          label-for=\"Amount\"\n        >\n          <validation-provider\n            v-slot=\"{ errors }\"\n            rules=\"required|regex:^([0-9\\.]+)$\"\n            name=\"amount\"\n          >\n            <b-input-group>\n              <b-form-input\n                id=\"Amount\"\n                v-model=\"amount\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Input a number\"\n                type=\"number\"\n              />\n              <b-input-group-append is-text>\n                {{ printDenom() }}\n              </b-input-group-append>\n            </b-input-group>\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\nimport { ValidationProvider } from 'vee-validate'\nimport {\n  BRow, BCol, BInputGroup, BFormInput, BFormGroup,\n  BInputGroupAppend,\n} from 'bootstrap-vue'\nimport {\n  required, email, url, between, alpha, integer, password, min, digits, alphaDash, length,\n} from '@validations'\nimport {\n  formatToken, formatTokenDenom, getUnitAmount,\n} from '@/libs/utils'\nimport vSelect from 'vue-select'\n\nexport default {\n  name: 'Redelegate',\n  components: {\n    BRow,\n    BCol,\n    BInputGroup,\n    BFormInput,\n    BFormGroup,\n    vSelect,\n    BInputGroupAppend,\n    ValidationProvider,\n  },\n  props: {\n    validatorAddress: {\n      type: String,\n      default: null,\n    },\n    address: {\n      type: String,\n      default: null,\n    },\n  },\n  data() {\n    return {\n      selectedAddress: this.address,\n      unbundValidators: [],\n      validators: [],\n      toValidator: null,\n      token: '',\n      amount: null,\n      delegations: [],\n\n      required,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash,\n    }\n  },\n  computed: {\n    valOptions() {\n      let options = []\n      const vals = this.validators.map(x => ({ value: x.operator_address, label: `${x.description.moniker} (${Number(x.commission.rate) * 100}%)` }))\n      if (vals.length > 0) {\n        options.push({ value: null, label: '=== ACTIVE VALIDATORS ===' })\n        options = options.concat(vals)\n      }\n      const unbunded = this.unbundValidators.map(x => ({ value: x.operator_address, label: `* ${x.description.moniker} (${Number(x.commission.rate) * 100}%)` }))\n      if (unbunded.length > 0) {\n        options.push({ value: null, label: '=== INACTIVE VALIDATORS ===', disabled: true })\n        options = options.concat(unbunded)\n      }\n      return options\n    },\n    tokenOptions() {\n      if (!this.delegations) return []\n      return this.delegations.filter(x => x.delegation.validator_address === this.validatorAddress).map(x => ({ value: x.balance.denom, label: formatToken(x.balance) }))\n    },\n    msg() {\n      return [{\n        typeUrl: '/cosmos.staking.v1beta1.MsgBeginRedelegate',\n        value: {\n          delegatorAddress: this.address,\n          validatorSrcAddress: this.validatorAddress,\n          validatorDstAddress: this.toValidator,\n          amount: {\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token,\n          },\n        },\n      }]\n    },\n  },\n  mounted() {\n    this.$emit('update', {\n      modalTitle: 'Redelegate Token',\n      historyName: 'redelegate',\n    })\n    this.loadData()\n  },\n  methods: {\n    loadData() {\n      this.$http.getValidatorList().then(v => {\n        this.validators = v\n      })\n      this.$http.getValidatorUnbondedList().then(v => {\n        this.unbundValidators = v\n      })\n      this.$http.getStakingDelegations(this.address).then(res => {\n        this.delegations = res.delegation_responses\n        this.delegations.forEach(x => {\n          if (x.delegation.validator_address === this.validatorAddress) {\n            this.token = x.balance.denom\n            this.$emit('update', {\n              feeDenom: x.balance.denom,\n            })\n          }\n        })\n      })\n    },\n\n    format(v) {\n      return formatToken(v)\n    },\n    printDenom() {\n      return formatTokenDenom(this.token)\n    },\n  },\n}\n</script>\n<style lang=\"scss\">\n@import '@core/scss/vue/libs/vue-select.scss';\n</style>\n"]},"metadata":{},"sourceType":"module"}