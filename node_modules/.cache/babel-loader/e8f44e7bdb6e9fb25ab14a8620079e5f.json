{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.number.constructor.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ValidationProvider } from 'vee-validate';\nimport { BRow, BCol, BInputGroup, BFormInput, BFormGroup, BFormSelect, BFormSelectOption, BInputGroupAppend } from 'bootstrap-vue';\nimport { required, email, url, between, alpha, integer, password, min, digits, alphaDash, length } from '@validations';\nimport { formatToken, formatTokenDenom, getUnitAmount } from '@/libs/utils';\nimport vSelect from 'vue-select';\nexport default {\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BInputGroup: BInputGroup,\n    BFormInput: BFormInput,\n    BFormGroup: BFormGroup,\n    BFormSelect: BFormSelect,\n    BFormSelectOption: BFormSelectOption,\n    vSelect: vSelect,\n    BInputGroupAppend: BInputGroupAppend,\n    ValidationProvider: ValidationProvider\n  },\n  props: {\n    validatorAddress: {\n      type: String,\n      default: null\n    },\n    address: {\n      type: String,\n      default: null\n    },\n    balance: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      selectedAddress: this.address,\n      availableAddress: [],\n      validators: [],\n      unbundValidators: [],\n      selectedValidator: this.validatorAddress,\n      token: '',\n      amount: null,\n      selectedChain: '',\n      required: required,\n      password: password,\n      email: email,\n      min: min,\n      integer: integer,\n      url: url,\n      alpha: alpha,\n      between: between,\n      digits: digits,\n      length: length,\n      alphaDash: alphaDash\n    };\n  },\n  computed: {\n    valOptions: function valOptions() {\n      var options = [];\n      var vals = this.validators.map(function (x) {\n        return {\n          value: x.operator_address,\n          label: \"\".concat(x.description.moniker, \" (\").concat(Number(x.commission.rate) * 100, \"%)\")\n        };\n      });\n\n      if (vals.length > 0) {\n        options.push({\n          value: null,\n          label: '=== ACTIVE VALIDATORS ==='\n        });\n        options = options.concat(vals);\n      }\n\n      var unbunded = this.unbundValidators.map(function (x) {\n        return {\n          value: x.operator_address,\n          label: \"* \".concat(x.description.moniker, \" (\").concat(Number(x.commission.rate) * 100, \"%)\")\n        };\n      });\n\n      if (unbunded.length > 0) {\n        options.push({\n          value: null,\n          label: '=== INACTIVE VALIDATORS ===',\n          disabled: true\n        });\n        options = options.concat(unbunded);\n      }\n\n      return options;\n    },\n    balanceOptions: function balanceOptions() {\n      return this.setupBalance();\n    },\n    msg: function msg() {\n      return [{\n        typeUrl: '/cosmos.staking.v1beta1.MsgDelegate',\n        value: {\n          delegatorAddress: this.selectedAddress,\n          validatorAddress: this.selectedValidator,\n          amount: {\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token\n          }\n        }\n      }];\n    },\n    IBCDenom: function IBCDenom() {\n      return this.$store.state.chains.denoms;\n    }\n  },\n  mounted: function mounted() {\n    this.$emit('update', {\n      modalTitle: 'Delegate Token',\n      historyName: 'delegate'\n    });\n    this.loadData();\n  },\n  methods: {\n    loadData: function loadData() {\n      var _this = this;\n\n      this.$http.getValidatorList().then(function (v) {\n        _this.validators = v;\n      });\n      this.$http.getValidatorUnbondedList().then(function (v) {\n        _this.unbundValidators = v;\n      });\n    },\n    setupBalance: function setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom;\n        return this.balance;\n      }\n\n      return [];\n    },\n    printDenom: function printDenom() {\n      return formatTokenDenom(this.token);\n    },\n    format: function format(v) {\n      return formatToken(v, this.IBCDenom, 6);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA;AACA,SACAA,IADA,EACAC,IADA,EACAC,WADA,EACAC,UADA,EACAC,UADA,EACAC,WADA,EACAC,iBADA,EAEAC,iBAFA,QAGA,eAHA;AAIA,SACAC,QADA,EACAC,KADA,EACAC,GADA,EACAC,OADA,EACAC,KADA,EACAC,OADA,EACAC,QADA,EACAC,GADA,EACAC,MADA,EACAC,SADA,EACAC,MADA,QAEA,cAFA;AAGA,SACAC,WADA,EACAC,gBADA,EACAC,aADA,QAEA,cAFA;AAGA;AAEA;EACAC;IACAtB,UADA;IAEAC,UAFA;IAGAC,wBAHA;IAIAC,sBAJA;IAKAC,sBALA;IAMAC,wBANA;IAOAC,oCAPA;IAQAiB,gBARA;IASAhB,oCATA;IAWAiB;EAXA,CADA;EAcAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA,CALA;IASAE;MACAH,WADA;MAEAC;QAAA;MAAA;IAFA;EATA,CAdA;EA4BAG,IA5BA,kBA4BA;IACA;MACAC,6BADA;MAEAC,oBAFA;MAGAC,cAHA;MAIAC,oBAJA;MAKAC,wCALA;MAMAC,SANA;MAOAC,YAPA;MAQAC,iBARA;MASA/B,kBATA;MAUAM,kBAVA;MAWAL,YAXA;MAYAM,QAZA;MAaAF,gBAbA;MAcAH,QAdA;MAeAE,YAfA;MAgBAD,gBAhBA;MAiBAK,cAjBA;MAkBAE,cAlBA;MAmBAD;IAnBA;EAqBA,CAlDA;EAmDAuB;IACAC,UADA,wBACA;MACA;MACA;QAAA;UAAAC;UAAAC;QAAA;MAAA;;MACA;QACAC;UAAAF;UAAAC;QAAA;QACAC;MACA;;MACA;QAAA;UAAAF;UAAAC;QAAA;MAAA;;MACA;QACAC;UAAAF;UAAAC;UAAAE;QAAA;QACAD;MACA;;MACA;IACA,CAdA;IAeAE,cAfA,4BAeA;MACA;IACA,CAjBA;IAkBAC,GAlBA,iBAkBA;MACA;QACAC,8CADA;QAEAN;UACAO,sCADA;UAEAvB,wCAFA;UAGAY;YACAA,8CADA;YAEAY;UAFA;QAHA;MAFA;IAWA,CA9BA;IA+BAC,QA/BA,sBA+BA;MACA;IACA;EAjCA,CAnDA;EAsFAC,OAtFA,qBAsFA;IACA;MACAC,4BADA;MAEAC;IAFA;IAIA;EACA,CA5FA;EA6FAC;IACAC,QADA,sBACA;MAAA;;MACA;QACA;MACA,CAFA;MAGA;QACA;MACA,CAFA;IAGA,CARA;IASAC,YATA,0BASA;MACA;QACA;QACA;MACA;;MACA;IACA,CAfA;IAgBAC,UAhBA,wBAgBA;MACA;IACA,CAlBA;IAmBAC,MAnBA,kBAmBAC,CAnBA,EAmBA;MACA;IACA;EArBA;AA7FA","names":["BRow","BCol","BInputGroup","BFormInput","BFormGroup","BFormSelect","BFormSelectOption","BInputGroupAppend","required","email","url","between","alpha","integer","password","min","digits","alphaDash","length","formatToken","formatTokenDenom","getUnitAmount","components","vSelect","ValidationProvider","props","validatorAddress","type","default","address","balance","data","selectedAddress","availableAddress","validators","unbundValidators","selectedValidator","token","amount","selectedChain","computed","valOptions","value","label","options","disabled","balanceOptions","msg","typeUrl","delegatorAddress","denom","IBCDenom","mounted","modalTitle","historyName","methods","loadData","setupBalance","printDenom","format","v"],"sourceRoot":"src/views/components/OperationModal/components","sources":["Delegate.vue"],"sourcesContent":["<template>\n  <div>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Delegator\"\n          label-for=\"Delegator\"\n        >\n          <validation-provider\n            #default=\"{ errors }\"\n            rules=\"required\"\n            name=\"Delegator\"\n          >\n            <b-form-input\n              v-model=\"selectedAddress\"\n              readonly\n            />\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <validation-provider\n          #default=\"{ errors }\"\n          rules=\"required\"\n          name=\"Validator\"\n        >\n          <b-form-group\n            label=\"Validator\"\n            label-for=\"validator\"\n          >\n            <v-select\n              v-model=\"selectedValidator\"\n              :options=\"valOptions\"\n              :reduce=\"val => val.value\"\n              placeholder=\"Select a validator\"\n              :readonly=\"validatorAddress\"\n              :selectable=\"(v) => v.value\"\n            />\n          </b-form-group>\n          <small class=\"text-danger\">{{ errors[0] }}</small>\n        </validation-provider>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Available Token\"\n          label-for=\"Token\"\n        >\n          <validation-provider\n            #default=\"{ errors }\"\n            rules=\"required\"\n            name=\"Token\"\n          >\n            <b-form-select\n              v-model=\"token\"\n              text-field=\"label\"\n            >\n              <b-form-select-option\n                v-for=\"x in balanceOptions\"\n                :key=\"x.denom\"\n                :value=\"x.denom\"\n              >\n                {{ format(x) }}\n              </b-form-select-option>\n            </b-form-select>\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <b-form-group\n          label=\"Amount\"\n          label-for=\"Amount\"\n        >\n          <validation-provider\n            v-slot=\"{ errors }\"\n            rules=\"required|regex:^([0-9\\.]+)$\"\n            name=\"amount\"\n          >\n            <b-input-group>\n              <b-form-input\n                id=\"Amount\"\n                v-model=\"amount\"\n                :state=\"errors.length > 0 ? false:null\"\n                placeholder=\"Input a number\"\n                type=\"number\"\n              />\n              <b-input-group-append is-text>\n                {{ printDenom() }}\n              </b-input-group-append>\n            </b-input-group>\n            <small class=\"text-danger\">{{ errors[0] }}</small>\n          </validation-provider>\n        </b-form-group>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\nimport { ValidationProvider } from 'vee-validate'\nimport {\n  BRow, BCol, BInputGroup, BFormInput, BFormGroup, BFormSelect, BFormSelectOption,\n  BInputGroupAppend,\n} from 'bootstrap-vue'\nimport {\n  required, email, url, between, alpha, integer, password, min, digits, alphaDash, length,\n} from '@validations'\nimport {\n  formatToken, formatTokenDenom, getUnitAmount,\n} from '@/libs/utils'\nimport vSelect from 'vue-select'\n\nexport default {\n  components: {\n    BRow,\n    BCol,\n    BInputGroup,\n    BFormInput,\n    BFormGroup,\n    BFormSelect,\n    BFormSelectOption,\n    vSelect,\n    BInputGroupAppend,\n\n    ValidationProvider,\n  },\n  props: {\n    validatorAddress: {\n      type: String,\n      default: null,\n    },\n    address: {\n      type: String,\n      default: null,\n    },\n    balance: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      selectedAddress: this.address,\n      availableAddress: [],\n      validators: [],\n      unbundValidators: [],\n      selectedValidator: this.validatorAddress,\n      token: '',\n      amount: null,\n      selectedChain: '',\n      required,\n      password,\n      email,\n      min,\n      integer,\n      url,\n      alpha,\n      between,\n      digits,\n      length,\n      alphaDash,\n    }\n  },\n  computed: {\n    valOptions() {\n      let options = []\n      const vals = this.validators.map(x => ({ value: x.operator_address, label: `${x.description.moniker} (${Number(x.commission.rate) * 100}%)` }))\n      if (vals.length > 0) {\n        options.push({ value: null, label: '=== ACTIVE VALIDATORS ===' })\n        options = options.concat(vals)\n      }\n      const unbunded = this.unbundValidators.map(x => ({ value: x.operator_address, label: `* ${x.description.moniker} (${Number(x.commission.rate) * 100}%)` }))\n      if (unbunded.length > 0) {\n        options.push({ value: null, label: '=== INACTIVE VALIDATORS ===', disabled: true })\n        options = options.concat(unbunded)\n      }\n      return options\n    },\n    balanceOptions() {\n      return this.setupBalance()\n    },\n    msg() {\n      return [{\n        typeUrl: '/cosmos.staking.v1beta1.MsgDelegate',\n        value: {\n          delegatorAddress: this.selectedAddress,\n          validatorAddress: this.selectedValidator,\n          amount: {\n            amount: getUnitAmount(this.amount, this.token),\n            denom: this.token,\n          },\n        },\n      }]\n    },\n    IBCDenom() {\n      return this.$store.state.chains.denoms\n    },\n  },\n  mounted() {\n    this.$emit('update', {\n      modalTitle: 'Delegate Token',\n      historyName: 'delegate',\n    })\n    this.loadData()\n  },\n  methods: {\n    loadData() {\n      this.$http.getValidatorList().then(v => {\n        this.validators = v\n      })\n      this.$http.getValidatorUnbondedList().then(v => {\n        this.unbundValidators = v\n      })\n    },\n    setupBalance() {\n      if (this.balance && this.balance.length > 0) {\n        this.token = this.balance[0].denom\n        return this.balance\n      }\n      return []\n    },\n    printDenom() {\n      return formatTokenDenom(this.token)\n    },\n    format(v) {\n      return formatToken(v, this.IBCDenom, 6)\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}