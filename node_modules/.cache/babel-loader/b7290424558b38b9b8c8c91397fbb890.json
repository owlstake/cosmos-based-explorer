{"ast":null,"code":"import \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport { isToday } from './utils';\nexport var kFormatter = function kFormatter(num) {\n  return num > 999 ? \"\".concat((num / 1000).toFixed(1), \"k\") : num;\n};\nexport var title = function title(value) {\n  var replacer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n  if (!value) return '';\n  var str = value.toString();\n  var arr = str.split(replacer);\n  var capitalizedArray = [];\n  arr.forEach(function (word) {\n    var capitalized = word.charAt(0).toUpperCase() + word.slice(1);\n    capitalizedArray.push(capitalized);\n  });\n  return capitalizedArray.join(' ');\n};\nexport var avatarText = function avatarText(value) {\n  if (!value) return '';\n  var nameArray = value.split(' ');\n  return nameArray.map(function (word) {\n    return word.charAt(0).toUpperCase();\n  }).join('');\n};\n/**\n * Format and return date in Humanize format\n * Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n * Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\n * @param {String} value date to format\n * @param {Object} formatting Intl object to format with\n */\n\nexport var formatDate = function formatDate(value) {\n  var formatting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric'\n  };\n  if (!value) return value;\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\n};\n/**\n * Return short human friendly month representation of date\n * Can also convert date to only time if date is of today (Better UX)\n * @param {String} value date to format\n * @param {Boolean} toTimeForCurrentDay Shall convert to time if day is today/current\n */\n\nexport var formatDateToMonthShort = function formatDateToMonthShort(value) {\n  var toTimeForCurrentDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var date = new Date(value);\n  var formatting = {\n    month: 'short',\n    day: 'numeric'\n  };\n\n  if (toTimeForCurrentDay && isToday(date)) {\n    formatting = {\n      hour: 'numeric',\n      minute: 'numeric'\n    };\n  }\n\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\n}; // Strip all the tags from markup and return plain text\n\nexport var filterTags = function filterTags(value) {\n  return value.replace(/<\\/?[^>]+(>|$)/g, '');\n};","map":{"version":3,"names":["isToday","kFormatter","num","toFixed","title","value","replacer","str","toString","arr","split","capitalizedArray","forEach","word","capitalized","charAt","toUpperCase","slice","push","join","avatarText","nameArray","map","formatDate","formatting","month","day","year","Intl","DateTimeFormat","format","Date","formatDateToMonthShort","toTimeForCurrentDay","date","hour","minute","filterTags","replace"],"sources":["/root/cosmos-based-explorer/src/@core/utils/filter.js"],"sourcesContent":["import { isToday } from './utils'\n\nexport const kFormatter = num => (num > 999 ? `${(num / 1000).toFixed(1)}k` : num)\n\nexport const title = (value, replacer = ' ') => {\n  if (!value) return ''\n  const str = value.toString()\n\n  const arr = str.split(replacer)\n  const capitalizedArray = []\n  arr.forEach(word => {\n    const capitalized = word.charAt(0).toUpperCase() + word.slice(1)\n    capitalizedArray.push(capitalized)\n  })\n  return capitalizedArray.join(' ')\n}\n\nexport const avatarText = value => {\n  if (!value) return ''\n  const nameArray = value.split(' ')\n  return nameArray.map(word => word.charAt(0).toUpperCase()).join('')\n}\n\n/**\n * Format and return date in Humanize format\n * Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\n * Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\n * @param {String} value date to format\n * @param {Object} formatting Intl object to format with\n */\nexport const formatDate = (value, formatting = { month: 'short', day: 'numeric', year: 'numeric' }) => {\n  if (!value) return value\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\n}\n\n/**\n * Return short human friendly month representation of date\n * Can also convert date to only time if date is of today (Better UX)\n * @param {String} value date to format\n * @param {Boolean} toTimeForCurrentDay Shall convert to time if day is today/current\n */\nexport const formatDateToMonthShort = (value, toTimeForCurrentDay = true) => {\n  const date = new Date(value)\n  let formatting = { month: 'short', day: 'numeric' }\n\n  if (toTimeForCurrentDay && isToday(date)) {\n    formatting = { hour: 'numeric', minute: 'numeric' }\n  }\n\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\n}\n\n// Strip all the tags from markup and return plain text\nexport const filterTags = value => value.replace(/<\\/?[^>]+(>|$)/g, '')\n"],"mappings":";;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,SAAxB;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,GAAG;EAAA,OAAKA,GAAG,GAAG,GAAN,aAAe,CAACA,GAAG,GAAG,IAAP,EAAaC,OAAb,CAAqB,CAArB,CAAf,SAA4CD,GAAjD;AAAA,CAAtB;AAEP,OAAO,IAAME,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAA2B;EAAA,IAAnBC,QAAmB,uEAAR,GAAQ;EAC9C,IAAI,CAACD,KAAL,EAAY,OAAO,EAAP;EACZ,IAAME,GAAG,GAAGF,KAAK,CAACG,QAAN,EAAZ;EAEA,IAAMC,GAAG,GAAGF,GAAG,CAACG,KAAJ,CAAUJ,QAAV,CAAZ;EACA,IAAMK,gBAAgB,GAAG,EAAzB;EACAF,GAAG,CAACG,OAAJ,CAAY,UAAAC,IAAI,EAAI;IAClB,IAAMC,WAAW,GAAGD,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BH,IAAI,CAACI,KAAL,CAAW,CAAX,CAAnD;IACAN,gBAAgB,CAACO,IAAjB,CAAsBJ,WAAtB;EACD,CAHD;EAIA,OAAOH,gBAAgB,CAACQ,IAAjB,CAAsB,GAAtB,CAAP;AACD,CAXM;AAaP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAf,KAAK,EAAI;EACjC,IAAI,CAACA,KAAL,EAAY,OAAO,EAAP;EACZ,IAAMgB,SAAS,GAAGhB,KAAK,CAACK,KAAN,CAAY,GAAZ,CAAlB;EACA,OAAOW,SAAS,CAACC,GAAV,CAAc,UAAAT,IAAI;IAAA,OAAIA,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,WAAf,EAAJ;EAAA,CAAlB,EAAoDG,IAApD,CAAyD,EAAzD,CAAP;AACD,CAJM;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAAClB,KAAD,EAA6E;EAAA,IAArEmB,UAAqE,uEAAxD;IAAEC,KAAK,EAAE,OAAT;IAAkBC,GAAG,EAAE,SAAvB;IAAkCC,IAAI,EAAE;EAAxC,CAAwD;EACrG,IAAI,CAACtB,KAAL,EAAY,OAAOA,KAAP;EACZ,OAAO,IAAIuB,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiCL,UAAjC,EAA6CM,MAA7C,CAAoD,IAAIC,IAAJ,CAAS1B,KAAT,CAApD,CAAP;AACD,CAHM;AAKP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAM2B,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAC3B,KAAD,EAAuC;EAAA,IAA/B4B,mBAA+B,uEAAT,IAAS;EAC3E,IAAMC,IAAI,GAAG,IAAIH,IAAJ,CAAS1B,KAAT,CAAb;EACA,IAAImB,UAAU,GAAG;IAAEC,KAAK,EAAE,OAAT;IAAkBC,GAAG,EAAE;EAAvB,CAAjB;;EAEA,IAAIO,mBAAmB,IAAIjC,OAAO,CAACkC,IAAD,CAAlC,EAA0C;IACxCV,UAAU,GAAG;MAAEW,IAAI,EAAE,SAAR;MAAmBC,MAAM,EAAE;IAA3B,CAAb;EACD;;EAED,OAAO,IAAIR,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiCL,UAAjC,EAA6CM,MAA7C,CAAoD,IAAIC,IAAJ,CAAS1B,KAAT,CAApD,CAAP;AACD,CATM,C,CAWP;;AACA,OAAO,IAAMgC,UAAU,GAAG,SAAbA,UAAa,CAAAhC,KAAK;EAAA,OAAIA,KAAK,CAACiC,OAAN,CAAc,iBAAd,EAAiC,EAAjC,CAAJ;AAAA,CAAxB"},"metadata":{},"sourceType":"module"}