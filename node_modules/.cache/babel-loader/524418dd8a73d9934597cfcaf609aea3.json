{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BAvatar, BCardFooter, BRow, BCol, BBreadcrumb, BCard, BCardBody, BInputGroup, BFormInput, BInputGroupAppend, BButton } from 'bootstrap-vue';\nimport fetch from 'node-fetch';\nimport { consensusPubkeyToHexAddress, getLocalChains } from '@/libs/utils';\nimport vSelect from 'vue-select';\nimport AppFooter from '@/@core/layouts/components/AppFooter.vue';\nimport FullHeader from './components/FullHeader.vue';\nexport default {\n  components: {\n    FullHeader: FullHeader,\n    BBreadcrumb: BBreadcrumb,\n    BRow: BRow,\n    BCol: BCol,\n    BCard: BCard,\n    BCardBody: BCardBody,\n    BCardFooter: BCardFooter,\n    BInputGroup: BInputGroup,\n    BFormInput: BFormInput,\n    BInputGroupAppend: BInputGroupAppend,\n    BButton: BButton,\n    BAvatar: BAvatar,\n    vSelect: vSelect,\n    AppFooter: AppFooter\n  },\n  data: function data() {\n    var chains = getLocalChains();\n    var selected = 'agoric';\n    return {\n      navs: [{\n        text: 'Tools'\n      }, {\n        text: 'Consensus Monitor'\n      }],\n      showPrevote: false,\n      rpc: \"\".concat(chains[selected].rpc[0], \"/consensus_state\"),\n      httpstatus: 200,\n      httpStatusText: '',\n      roundState: {},\n      selected: selected,\n      chains: chains,\n      vals: [],\n      positions: []\n    };\n  },\n  created: function created() {\n    this.validators();\n  },\n  methods: {\n    color: function color(i, txt) {\n      if (i === this.roundState.proposer.index) {\n        return txt === 'nil-Vote' ? 'outline-primary' : 'primary';\n      }\n\n      return txt === 'nil-Vote' ? 'outline-secondary' : 'success';\n    },\n    update: function update() {\n      var _this = this;\n\n      fetch(this.rpc).then(function (data) {\n        _this.httpstatus = data.status;\n        _this.httpStatusText = data.httpStatusText;\n        return data.json();\n      }).then(function (res) {\n        _this.roundState = res.result.round_state;\n      }).catch(function (err) {\n        _this.httpstatus = 500;\n        _this.httpStatusText = err;\n      });\n    },\n    validators: function validators() {\n      var _this2 = this;\n\n      var conf = this.chains[this.selected];\n      this.$http.getValidatorList(conf).then(function (data) {\n        _this2.vals = data.map(function (x) {\n          var x2 = x;\n          x2.hex = consensusPubkeyToHexAddress(x.consensus_pubkey);\n          return x2;\n        });\n      });\n    },\n    onchange: function onchange(v) {\n      var _this3 = this;\n\n      this.httpstatus = 200;\n      this.httpStatusText = '';\n      this.roundState = {};\n      this.selected = v.chain_name;\n      this.rpc = \"\".concat(v.rpc[0], \"/consensus_state\"); // used for mapping nil-vote validators\n\n      fetch(\"\".concat(v.rpc[0], \"/validators?per_page=100\")).then(function (data) {\n        return data.json();\n      }).then(function (res2) {\n        _this3.positions = res2.result.validators;\n\n        if (res2.result.total > 100) {\n          fetch(\"\".concat(v.rpc[0], \"/validators?page=2&per_page=100\")).then(function (data) {\n            return data.json();\n          }).then(function (res) {\n            _this3.positions = _this3.positions.concat(res.result.validators);\n          });\n        }\n      }).catch(function (err) {\n        _this3.httpstatus = 500;\n        _this3.httpStatusText = err;\n      });\n      this.validators();\n    },\n    showName: function showName(i, text) {\n      var _this4 = this,\n          _val$description2;\n\n      if (text === 'nil-Vote') {\n        if (this.positions[i]) {\n          var _val$description;\n\n          var _val = this.vals.find(function (x) {\n            return x.hex === _this4.positions[i].address;\n          });\n\n          return (_val === null || _val === void 0 ? void 0 : (_val$description = _val.description) === null || _val$description === void 0 ? void 0 : _val$description.moniker) || i;\n        }\n\n        return i;\n      }\n\n      var txt = text.substring(text.indexOf(':') + 1, text.indexOf(' '));\n      var val = this.vals.find(function (x) {\n        return x.hex.startsWith(txt);\n      });\n      return (val === null || val === void 0 ? void 0 : (_val$description2 = val.description) === null || _val$description2 === void 0 ? void 0 : _val$description2.moniker) || txt;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuGA,SACAA,OADA,EACAC,WADA,EACAC,IADA,EACAC,IADA,EAEAC,WAFA,EAEAC,KAFA,EAEAC,SAFA,EAEAC,WAFA,EAEAC,UAFA,EAEAC,iBAFA,EAEAC,OAFA,QAGA,eAHA;AAIA;AACA;AACA;AACA;AACA;AAEA;EACAC;IACAC,sBADA;IAEAR,wBAFA;IAGAF,UAHA;IAIAC,UAJA;IAKAE,YALA;IAMAC,oBANA;IAOAL,wBAPA;IAQAM,wBARA;IASAC,sBATA;IAUAC,oCAVA;IAWAC,gBAXA;IAYAV,gBAZA;IAaAa,gBAbA;IAcAC;EAdA,CADA;EAkBAC,IAlBA,kBAkBA;IACA;IACA;IACA;MACAC,OACA;QACAC;MADA,CADA,EAIA;QACAA;MADA,CAJA,CADA;MASAC,kBATA;MAUAC,2DAVA;MAWAC,eAXA;MAYAC,kBAZA;MAaAC,cAbA;MAcAC,kBAdA;MAeAC,cAfA;MAgBAC,QAhBA;MAiBAC;IAjBA;EAmBA,CAxCA;EAyCAC,OAzCA,qBAyCA;IACA;EACA,CA3CA;EA4CAC;IACAC,KADA,iBACAC,CADA,EACAC,GADA,EACA;MACA;QACA;MACA;;MACA;IACA,CANA;IAOAC,MAPA,oBAOA;MAAA;;MACAC;QACA;QACA;QACA;MACA,CAJA,EAIAC,IAJA,CAIA;QACA;MACA,CANA,EAMAC,KANA,CAMA;QACA;QACA;MACA,CATA;IAUA,CAlBA;IAmBAC,UAnBA,wBAmBA;MAAA;;MACA;MACA;QACA;UACA;UACAC;UACA;QACA,CAJA;MAKA,CANA;IAOA,CA5BA;IA6BAC,QA7BA,oBA6BAC,CA7BA,EA6BA;MAAA;;MACA;MACA;MACA;MACA;MACA,mDALA,CAMA;;MACAN;QAAA;MAAA;QACA;;QACA;UACAA;YAAA;UAAA;YACA;UACA,CAFA;QAGA;MACA,CAPA,EAOAE,KAPA,CAOA;QACA;QACA;MACA,CAVA;MAWA;IACA,CAhDA;IAiDAK,QAjDA,oBAiDAV,CAjDA,EAiDAb,IAjDA,EAiDA;MAAA;MAAA;;MACA;QACA;UAAA;;UACA;YAAA;UAAA;;UACA;QACA;;QACA;MACA;;MACA;MACA;QAAA;MAAA;MACA;IACA;EA5DA;AA5CA","names":["BAvatar","BCardFooter","BRow","BCol","BBreadcrumb","BCard","BCardBody","BInputGroup","BFormInput","BInputGroupAppend","BButton","components","FullHeader","vSelect","AppFooter","data","navs","text","showPrevote","rpc","httpstatus","httpStatusText","roundState","selected","chains","vals","positions","created","methods","color","i","txt","update","fetch","then","catch","validators","x2","onchange","v","showName"],"sourceRoot":"src/views","sources":["ConsensusStates.vue"],"sourcesContent":["<template>\n  <div class=\"container-md\">\n    <full-header />\n    <b-card class=\"d-flex justify-content-start my-1\">\n      <b-breadcrumb :items=\"navs\" />\n    </b-card>\n\n    <b-card>\n      <b-row>\n        <b-col\n          sm=\"12\"\n          md=\"4\"\n        >\n          <v-select\n            v-model=\"selected\"\n            :options=\"Object.values(chains)\"\n            label=\"chain_name\"\n            @input=\"onchange\"\n          >\n            <template #no-options=\"\">\n              Please select a chain.\n            </template>\n            <template #option=\"{ chain_name, logo }\">\n              <b-avatar\n                :src=\"logo\"\n                size=\"16\"\n                variant=\"light-primary\"\n                class=\"align-middle mr-50\"\n              />\n              <span> {{ chain_name.toUpperCase() }}</span>\n            </template>\n          </v-select>\n        </b-col>\n        <b-col>\n          <b-input-group>\n            <b-form-input\n              v-model=\"rpc\"\n              placeholder=\"Button on both side\"\n            />\n            <b-input-group-append>\n              <b-button\n                variant=\"outline-primary\"\n                @click=\"update()\"\n              >\n                Moniter\n              </b-button>\n            </b-input-group-append>\n          </b-input-group>\n        </b-col>\n      </b-row>\n      <div\n        v-if=\"httpstatus !== 200\"\n        class=\"text-danger\"\n      >\n        {{ httpstatus }}: {{ httpStatusText }}\n      </div>\n    </b-card>\n    <b-card\n      v-if=\"roundState['height/round/step']\"\n      :title=\"`Height/Round/Step: ${roundState['height/round/step']}`\"\n    >\n      <div\n        v-for=\"item in roundState.height_vote_set\"\n        :key=\"item.round\"\n      >\n        Round: {{ item.round }} {{ item.precommits_bit_array }}\n        <b-card-body class=\"px-0\">\n          <b-button\n            v-for=\"(pre, i) in item.precommits\"\n            :key=\"i\"\n            size=\"sm\"\n            style=\"margin: 2px;\"\n            :variant=\"color(i, pre)\"\n          >\n            <small>{{ showName(i, pre) }}</small>\n          </b-button>\n        </b-card-body>\n      </div>\n      <b-card-footer>\n        <b-button\n          variant=\"primary\"\n          size=\"sm\"\n        />  Proposer Signed\n        <b-button\n          variant=\"outline-primary\"\n          size=\"sm\"\n        />  Proposer Not Signed\n        <b-button\n          variant=\"success\"\n          size=\"sm\"\n        /> Signed\n        <b-button\n          variant=\"outline-secondary\"\n          size=\"sm\"\n        /> Not Signed\n      </b-card-footer>\n\n    </b-card>\n    <app-footer class=\"mb-1\" />\n  </div>\n</template>\n\n<script>\nimport {\n  BAvatar, BCardFooter, BRow, BCol,\n  BBreadcrumb, BCard, BCardBody, BInputGroup, BFormInput, BInputGroupAppend, BButton,\n} from 'bootstrap-vue'\nimport fetch from 'node-fetch'\nimport { consensusPubkeyToHexAddress, getLocalChains } from '@/libs/utils'\nimport vSelect from 'vue-select'\nimport AppFooter from '@/@core/layouts/components/AppFooter.vue'\nimport FullHeader from './components/FullHeader.vue'\n\nexport default {\n  components: {\n    FullHeader,\n    BBreadcrumb,\n    BRow,\n    BCol,\n    BCard,\n    BCardBody,\n    BCardFooter,\n    BInputGroup,\n    BFormInput,\n    BInputGroupAppend,\n    BButton,\n    BAvatar,\n    vSelect,\n    AppFooter,\n  },\n\n  data() {\n    const chains = getLocalChains()\n    const selected = 'agoric'\n    return {\n      navs: [\n        {\n          text: 'Tools',\n        },\n        {\n          text: 'Consensus Monitor',\n        },\n      ],\n      showPrevote: false,\n      rpc: `${chains[selected].rpc[0]}/consensus_state`,\n      httpstatus: 200,\n      httpStatusText: '',\n      roundState: {},\n      selected,\n      chains,\n      vals: [],\n      positions: [],\n    }\n  },\n  created() {\n    this.validators()\n  },\n  methods: {\n    color(i, txt) {\n      if (i === this.roundState.proposer.index) {\n        return txt === 'nil-Vote' ? 'outline-primary' : 'primary'\n      }\n      return txt === 'nil-Vote' ? 'outline-secondary' : 'success'\n    },\n    update() {\n      fetch(this.rpc).then(data => {\n        this.httpstatus = data.status\n        this.httpStatusText = data.httpStatusText\n        return data.json()\n      }).then(res => {\n        this.roundState = res.result.round_state\n      }).catch(err => {\n        this.httpstatus = 500\n        this.httpStatusText = err\n      })\n    },\n    validators() {\n      const conf = this.chains[this.selected]\n      this.$http.getValidatorList(conf).then(data => {\n        this.vals = data.map(x => {\n          const x2 = x\n          x2.hex = consensusPubkeyToHexAddress(x.consensus_pubkey)\n          return x2\n        })\n      })\n    },\n    onchange(v) {\n      this.httpstatus = 200\n      this.httpStatusText = ''\n      this.roundState = {}\n      this.selected = v.chain_name\n      this.rpc = `${v.rpc[0]}/consensus_state`\n      // used for mapping nil-vote validators\n      fetch(`${v.rpc[0]}/validators?per_page=100`).then(data => data.json()).then(res2 => {\n        this.positions = res2.result.validators\n        if (res2.result.total > 100) {\n          fetch(`${v.rpc[0]}/validators?page=2&per_page=100`).then(data => data.json()).then(res => {\n            this.positions = this.positions.concat(res.result.validators)\n          })\n        }\n      }).catch(err => {\n        this.httpstatus = 500\n        this.httpStatusText = err\n      })\n      this.validators()\n    },\n    showName(i, text) {\n      if (text === 'nil-Vote') {\n        if (this.positions[i]) {\n          const val = this.vals.find(x => x.hex === this.positions[i].address)\n          return val?.description?.moniker || i\n        }\n        return i\n      }\n      const txt = text.substring(text.indexOf(':') + 1, text.indexOf(' '))\n      const val = this.vals.find(x => x.hex.startsWith(txt))\n      return val?.description?.moniker || txt\n    },\n  },\n\n}\n</script>\n<style lang=\"scss\">\n@import '@core/scss/vue/libs/vue-select.scss';\n</style>\n"]},"metadata":{},"sourceType":"module"}