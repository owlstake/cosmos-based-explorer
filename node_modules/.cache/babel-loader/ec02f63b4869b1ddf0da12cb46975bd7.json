{"ast":null,"code":"import \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.number.constructor.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BCard, BCardHeader, BCardTitle, BCardBody, BMediaBody, BMedia, BMediaAside, BAvatar, BButton } from 'bootstrap-vue';\nimport { formatToken, numberWithCommas } from '@/libs/utils';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nexport default {\n  components: {\n    BButton: BButton,\n    BCard: BCard,\n    BCardHeader: BCardHeader,\n    BCardTitle: BCardTitle,\n    BCardBody: BCardBody,\n    BMediaBody: BMediaBody,\n    BMedia: BMedia,\n    BMediaAside: BMediaAside,\n    BAvatar: BAvatar,\n    OperationModal: OperationModal\n  },\n  props: {\n    data: {\n      type: Object,\n      required: true\n    },\n    validator: {\n      type: String,\n      required: true\n    },\n    address: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  computed: {\n    denoms: function denoms() {\n      return this.$store.state.chains.denoms;\n    }\n  },\n  methods: {\n    formatNumber: function formatNumber(value) {\n      if (value < 1) return value;\n\n      if (value.indexOf('.') > 0) {\n        // eslint-disable-next-line no-undef\n        return numberWithCommas(BigInt(value.substring(0, value.indexOf('.'))));\n      } // eslint-disable-next-line no-undef\n\n\n      return numberWithCommas(BigInt(Number(value).toFixed(0)));\n    },\n    formatDenom: function formatDenom(value) {\n      return formatToken(value, this.denoms, 2);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgGA,SACAA,KADA,EACAC,WADA,EACAC,UADA,EACAC,SADA,EACAC,UADA,EACAC,MADA,EACAC,WADA,EACAC,OADA,EACAC,OADA,QAEA,eAFA;AAGA;AACA;AAEA;EACAC;IACAD,gBADA;IAEAR,YAFA;IAGAC,wBAHA;IAIAC,sBAJA;IAKAC,oBALA;IAMAC,sBANA;IAOAC,cAPA;IAQAC,wBARA;IASAC,gBATA;IAUAG;EAVA,CADA;EAaAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA,CALA;IASAE;MACAH,YADA;MAEAC;IAFA;EATA,CAbA;EA2BAF,IA3BA,kBA2BA;IACA;EAEA,CA9BA;EA+BAK;IACAC,MADA,oBACA;MACA;IACA;EAHA,CA/BA;EAoCAC;IACAC,YADA,wBACAC,KADA,EACA;MACA;;MACA;QACA;QACA;MACA,CALA,CAMA;;;MACA;IACA,CATA;IAUAC,WAVA,uBAUAD,KAVA,EAUA;MACA;IACA;EAZA;AApCA","names":["BCard","BCardHeader","BCardTitle","BCardBody","BMediaBody","BMedia","BMediaAside","BAvatar","BButton","components","OperationModal","props","data","type","required","validator","address","computed","denoms","methods","formatNumber","value","formatDenom"],"sourceRoot":"src/views","sources":["StakingRewardComponent.vue"],"sourcesContent":["<template>\n  <b-card\n    class=\"card-transaction\"\n    no-body\n  >\n    <b-card-header>\n      <b-card-title>Outstanding Rewards</b-card-title>\n      <feather-icon\n        v-b-modal.WithdrawCommission\n        icon=\"MoreVerticalIcon\"\n        size=\"18\"\n        class=\"cursor-pointer\"\n      />\n    </b-card-header>\n\n    <b-card-body\n      class=\"overflow-auto\"\n      style=\"max-height:220px;\"\n    >\n      <div\n        v-for=\"d in data.self_bond_rewards\"\n        :key=\"d.amount\"\n        class=\"transaction-item\"\n      >\n        <b-media no-body>\n          <b-media-aside>\n            <b-avatar\n              rounded\n              size=\"42\"\n              variant=\"light-success\"\n              text=\"R\"\n              title=\"Rewards\"\n            />\n          </b-media-aside>\n          <b-media-body>\n            <h6 class=\"transaction-title\">\n              {{ formatDenom(d) }}\n            </h6>\n            <small>{{ formatNumber(d.amount) }}</small>\n          </b-media-body>\n        </b-media>\n        <small\n          class=\"text-success d-none d-xl-block \"\n        >\n          Reward\n        </small>\n      </div>\n      <div\n        v-for=\"d in data.val_commission\"\n        :key=\"d.amount\"\n        class=\"transaction-item\"\n      >\n        <b-media no-body>\n          <b-media-aside>\n            <b-avatar\n              rounded\n              size=\"42\"\n              variant=\"light-primary\"\n              text=\"C\"\n              title=\"Commission\"\n            />\n          </b-media-aside>\n          <b-media-body>\n            <h6 class=\"transaction-title\">\n              {{ formatDenom(d) }}\n            </h6>\n            <small>{{ formatNumber(d.amount) }}</small>\n          </b-media-body>\n        </b-media>\n        <small\n          class=\"text-primary d-none d-xl-block\"\n        >\n          Commission\n        </small>\n      </div>\n    </b-card-body>\n    <b-card-body class=\"pt-0\">\n      <b-button\n        v-b-modal.WithdrawCommission\n        block\n        size=\"sm\"\n        variant=\"primary\"\n      >\n        Withdraw Commission\n      </b-button>\n    </b-card-body>\n    <operation-modal\n      type=\"WithdrawCommission\"\n      modal-id=\"WithdrawCommission\"\n      :address=\"address\"\n      :validator-address=\"validator\"\n    />\n  </b-card>\n</template>\n\n<script>\nimport {\n  BCard, BCardHeader, BCardTitle, BCardBody, BMediaBody, BMedia, BMediaAside, BAvatar, BButton,\n} from 'bootstrap-vue'\nimport { formatToken, numberWithCommas } from '@/libs/utils'\nimport OperationModal from '@/views/components/OperationModal/index.vue'\n\nexport default {\n  components: {\n    BButton,\n    BCard,\n    BCardHeader,\n    BCardTitle,\n    BCardBody,\n    BMediaBody,\n    BMedia,\n    BMediaAside,\n    BAvatar,\n    OperationModal,\n  },\n  props: {\n    data: {\n      type: Object,\n      required: true,\n    },\n    validator: {\n      type: String,\n      required: true,\n    },\n    address: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n    }\n  },\n  computed: {\n    denoms() {\n      return this.$store.state.chains.denoms\n    },\n  },\n  methods: {\n    formatNumber(value) {\n      if (value < 1) return value\n      if (value.indexOf('.') > 0) {\n      // eslint-disable-next-line no-undef\n        return numberWithCommas(BigInt(value.substring(0, value.indexOf('.'))))\n      }\n      // eslint-disable-next-line no-undef\n      return numberWithCommas(BigInt(Number(value).toFixed(0)))\n    },\n    formatDenom(value) {\n      return formatToken(value, this.denoms, 2)\n    },\n  },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}