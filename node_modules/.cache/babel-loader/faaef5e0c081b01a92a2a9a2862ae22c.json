{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\n// eslint-disable-next-line object-curly-newline\nimport { ref, watch, inject, computed } from '@vue/composition-api';\nimport store from '@/store';\nimport { isNavGroupActive } from '@core/layouts/utils';\nexport default function useVerticalNavMenuGroup(item) {\n  // ------------------------------------------------\n  // isVerticalMenuCollapsed\n  // ------------------------------------------------\n  var isVerticalMenuCollapsed = computed(function () {\n    return store.state.verticalMenu.isVerticalMenuCollapsed;\n  });\n  watch(isVerticalMenuCollapsed, function (val) {\n    /* eslint-disable no-use-before-define */\n    // * Handles case if routing is done outside of vertical menu\n    // i.e. From Customizer Collapse or Using Link\n    if (!isMouseHovered.value) {\n      if (val) isOpen.value = false;else if (!val && isActive.value) isOpen.value = true;\n    }\n    /* eslint-enable */\n\n  }); // ------------------------------------------------\n  // isMouseHovered\n  // ------------------------------------------------\n\n  var isMouseHovered = inject('isMouseHovered'); // Collapse menu when menu is collapsed and show on open\n\n  watch(isMouseHovered, function (val) {\n    if (isVerticalMenuCollapsed.value) {\n      // * we have used `val && val && isActive.value` to only open active menu on mouseEnter and close all menu on mouseLeave\n      // * If we don't use `isActive.value` with `val` it can open other groups which are not active as well\n      // eslint-disable-next-line no-use-before-define\n      isOpen.value = val && isActive.value;\n    }\n  }); // ------------------------------------------------\n  // openGroups\n  // ------------------------------------------------\n\n  var openGroups = inject('openGroups'); // Collapse other groups if one group is opened\n\n  watch(openGroups, function (currentOpenGroups) {\n    var clickedGroup = currentOpenGroups[currentOpenGroups.length - 1]; // If current group is not clicked group or current group is not active => Proceed with closing it\n    // eslint-disable-next-line no-use-before-define\n\n    if (clickedGroup !== item.title && !isActive.value) {\n      // If clicked group is not child of current group\n      // eslint-disable-next-line no-use-before-define\n      if (!doesHaveChild(clickedGroup)) isOpen.value = false;\n    }\n  }); // ------------------------------------------------\n  // isOpen\n  // ------------------------------------------------\n\n  var isOpen = ref(false);\n  watch(isOpen, function (val) {\n    // if group is opened push it to the array\n    if (val) openGroups.value.push(item.title);\n  });\n\n  var updateGroupOpen = function updateGroupOpen(val) {\n    // eslint-disable-next-line no-use-before-define\n    isOpen.value = val;\n  }; // ------------------------------------------------\n  // isActive\n  // ------------------------------------------------\n\n\n  var isActive = ref(false);\n  watch(isActive, function (val) {\n    /*\n      If menu is collapsed and not hovered(optional) then don't open group\n    */\n    if (val) {\n      if (!isVerticalMenuCollapsed.value) isOpen.value = val;\n    } else {\n      isOpen.value = val;\n    }\n  });\n\n  var updateIsActive = function updateIsActive() {\n    isActive.value = isNavGroupActive(item.children);\n  }; // ------------------------------------------------\n  // Other Methods\n  // ------------------------------------------------\n\n\n  var doesHaveChild = function doesHaveChild(title) {\n    return item.children.some(function (child) {\n      return child.title === title;\n    });\n  };\n\n  return {\n    isOpen: isOpen,\n    isActive: isActive,\n    updateGroupOpen: updateGroupOpen,\n    openGroups: openGroups,\n    isMouseHovered: isMouseHovered,\n    updateIsActive: updateIsActive\n  };\n}","map":{"version":3,"names":["ref","watch","inject","computed","store","isNavGroupActive","useVerticalNavMenuGroup","item","isVerticalMenuCollapsed","state","verticalMenu","val","isMouseHovered","value","isOpen","isActive","openGroups","currentOpenGroups","clickedGroup","length","title","doesHaveChild","push","updateGroupOpen","updateIsActive","children","some","child"],"sources":["/root/cosmos-based-explorer/src/@core/layouts/layout-vertical/components/vertical-nav-menu/components/vertical-nav-menu-group/useVerticalNavMenuGroup.js"],"sourcesContent":["// eslint-disable-next-line object-curly-newline\nimport { ref, watch, inject, computed } from '@vue/composition-api'\nimport store from '@/store'\nimport { isNavGroupActive } from '@core/layouts/utils'\n\nexport default function useVerticalNavMenuGroup(item) {\n  // ------------------------------------------------\n  // isVerticalMenuCollapsed\n  // ------------------------------------------------\n  const isVerticalMenuCollapsed = computed(() => store.state.verticalMenu.isVerticalMenuCollapsed)\n\n  watch(isVerticalMenuCollapsed, val => {\n    /* eslint-disable no-use-before-define */\n    // * Handles case if routing is done outside of vertical menu\n    // i.e. From Customizer Collapse or Using Link\n    if (!isMouseHovered.value) {\n      if (val) isOpen.value = false\n      else if (!val && isActive.value) isOpen.value = true\n    }\n    /* eslint-enable */\n  })\n\n  // ------------------------------------------------\n  // isMouseHovered\n  // ------------------------------------------------\n  const isMouseHovered = inject('isMouseHovered')\n\n  // Collapse menu when menu is collapsed and show on open\n  watch(isMouseHovered, val => {\n    if (isVerticalMenuCollapsed.value) {\n      // * we have used `val && val && isActive.value` to only open active menu on mouseEnter and close all menu on mouseLeave\n      // * If we don't use `isActive.value` with `val` it can open other groups which are not active as well\n      // eslint-disable-next-line no-use-before-define\n      isOpen.value = val && isActive.value\n    }\n  })\n\n  // ------------------------------------------------\n  // openGroups\n  // ------------------------------------------------\n  const openGroups = inject('openGroups')\n\n  // Collapse other groups if one group is opened\n  watch(openGroups, currentOpenGroups => {\n    const clickedGroup = currentOpenGroups[currentOpenGroups.length - 1]\n\n    // If current group is not clicked group or current group is not active => Proceed with closing it\n    // eslint-disable-next-line no-use-before-define\n    if (clickedGroup !== item.title && !isActive.value) {\n      // If clicked group is not child of current group\n      // eslint-disable-next-line no-use-before-define\n      if (!doesHaveChild(clickedGroup)) isOpen.value = false\n    }\n  })\n\n  // ------------------------------------------------\n  // isOpen\n  // ------------------------------------------------\n  const isOpen = ref(false)\n  watch(isOpen, val => {\n    // if group is opened push it to the array\n    if (val) openGroups.value.push(item.title)\n  })\n\n  const updateGroupOpen = val => {\n    // eslint-disable-next-line no-use-before-define\n    isOpen.value = val\n  }\n\n  // ------------------------------------------------\n  // isActive\n  // ------------------------------------------------\n  const isActive = ref(false)\n  watch(isActive, val => {\n    /*\n      If menu is collapsed and not hovered(optional) then don't open group\n    */\n    if (val) {\n      if (!isVerticalMenuCollapsed.value) isOpen.value = val\n    } else {\n      isOpen.value = val\n    }\n  })\n\n  const updateIsActive = () => {\n    isActive.value = isNavGroupActive(item.children)\n  }\n\n  // ------------------------------------------------\n  // Other Methods\n  // ------------------------------------------------\n\n  const doesHaveChild = title => item.children.some(child => child.title === title)\n\n  return {\n    isOpen,\n    isActive,\n    updateGroupOpen,\n    openGroups,\n    isMouseHovered,\n    updateIsActive,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}