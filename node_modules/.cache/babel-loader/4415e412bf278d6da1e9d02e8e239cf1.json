{"ast":null,"code":"import _typeof from \"/root/cosmos-based-explorer/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BRow, BCol, BAlert, BCard } from 'bootstrap-vue';\nimport { formatNumber, formatTokenAmount, getUserCurrency, isToken, percent, timeIn, toDay, toDuration, tokenFormatter } from '@/libs/utils';\nimport SummaryParmetersComponent from './SummaryParmetersComponent.vue';\nimport SummaryAssetsComponent from './SummaryAssetsComponent.vue';\nimport SummaryPriceChart from './SummaryPriceChart.vue';\nexport default {\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BAlert: BAlert,\n    BCard: BCard,\n    SummaryParmetersComponent: SummaryParmetersComponent,\n    SummaryAssetsComponent: SummaryAssetsComponent,\n    SummaryPriceChart: SummaryPriceChart\n  },\n  data: function data() {\n    return {\n      syncing: false,\n      latestTime: '',\n      marketData: null,\n      chain: {\n        title: '',\n        class: 'border-primary',\n        items: [{\n          subtitle: 'height',\n          icon: 'BoxIcon',\n          color: 'light-success'\n        }, {\n          subtitle: 'bonded_and_supply',\n          icon: 'DollarSignIcon',\n          color: 'light-danger'\n        }, {\n          subtitle: 'bonded_ratio',\n          icon: 'PercentIcon',\n          color: 'light-warning'\n        }, {\n          subtitle: 'inflation',\n          icon: 'TrendingUpIcon',\n          color: 'light-primary'\n        }]\n      },\n      staking: {\n        title: 'Staking Parameters',\n        items: []\n      },\n      distribution: {\n        title: 'Distribution Parameters',\n        items: []\n      },\n      slashing: {\n        title: 'Slashing Parameters',\n        items: null\n      },\n      mint: {\n        title: 'Mint Parameters',\n        items: null\n      },\n      gov: {\n        title: 'Governance Parameters',\n        items: []\n      }\n    };\n  },\n  computed: {\n    marketChartData: function marketChartData() {\n      if (this.marketData && this.marketData.prices) {\n        var labels = this.marketData.prices.map(function (x) {\n          return x[0];\n        });\n        var data = this.marketData.prices.map(function (x) {\n          return x[1];\n        });\n        return {\n          labels: labels,\n          datasets: [{\n            label: \"Price (\".concat(getUserCurrency().toUpperCase(), \")\"),\n            data: data,\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderColor: 'rgba(54, 162, 235, 1)',\n            borderWidth: 1,\n            pointStyle: 'dash',\n            barThickness: 15\n          }]\n        };\n      }\n\n      return null;\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$http.getLatestBlock().then(function (res) {\n      var height = _this.chain.items.findIndex(function (x) {\n        return x.subtitle === 'height';\n      });\n\n      _this.$set(_this.chain, 'title', \"Chain ID: \".concat(res.block.header.chain_id));\n\n      _this.$set(_this.chain.items[height], 'title', res.block.header.height);\n\n      if (timeIn(res.block.header.time, 3, 'm')) {\n        _this.syncing = true;\n      } else {\n        _this.syncing = false;\n      }\n\n      _this.latestTime = toDay(res.block.header.time, 'long');\n    });\n    this.$http.getMarketChart().then(function (res) {\n      _this.marketData = res;\n    });\n    this.$http.getStakingParameters().then(function (res) {\n      _this.staking = _this.normalize(res, 'Staking Parameters');\n      Promise.all([_this.$http.getStakingPool(), _this.$http.getBankTotal(res.bond_denom)]).then(function (pool) {\n        var bondedAndSupply = _this.chain.items.findIndex(function (x) {\n          return x.subtitle === 'bonded_and_supply';\n        });\n\n        _this.$set(_this.chain.items[bondedAndSupply], 'title', \"\".concat(formatNumber(formatTokenAmount(pool[0].bondedToken, 2, res.bond_denom, false), true, 0), \"/\").concat(formatNumber(formatTokenAmount(pool[1].amount, 2, res.bond_denom, false), true, 0)));\n\n        var bondedRatio = _this.chain.items.findIndex(function (x) {\n          return x.subtitle === 'bonded_ratio';\n        });\n\n        _this.$set(_this.chain.items[bondedRatio], 'title', \"\".concat(percent(pool[0].bondedToken / pool[1].amount), \"%\"));\n      });\n    });\n    this.$http.getSlashingParameters().then(function (res) {\n      _this.slashing = _this.normalize(res, 'Slashing Parameters');\n    });\n    var conf = this.$http.getSelectedConfig();\n\n    if (conf.excludes && conf.excludes.indexOf('mint') > -1) {\n      this.mint = null;\n    } else {\n      this.$http.getMintingInflation().then(function (res) {\n        var chainIndex = _this.chain.items.findIndex(function (x) {\n          return x.subtitle === 'inflation';\n        });\n\n        _this.$set(_this.chain.items[chainIndex], 'title', \"\".concat(percent(res), \"%\"));\n      });\n      this.$http.getMintParameters().then(function (res) {\n        _this.mint = _this.normalize(res, 'Minting Parameters');\n      });\n    }\n\n    this.$http.getDistributionParameters().then(function (res) {\n      _this.distribution = _this.normalize(res, 'Distribution Parameters');\n    });\n\n    if (conf.excludes && conf.excludes.indexOf('governance') > -1) {\n      this.gov.items = [];\n    } else {\n      Promise.all([this.$http.getGovernanceParameterDeposit(), this.$http.getGovernanceParameterTallying(), this.$http.getGovernanceParameterVoting()]).then(function (data) {\n        var items = [];\n        data.forEach(function (item) {\n          var values = _this.normalize(item, '').items;\n\n          items = items.concat(values);\n        });\n        _this.gov.items = items;\n\n        _this.$set(_this.gov, 'items', items);\n      });\n    }\n  },\n  methods: {\n    normalize: function normalize(data, title) {\n      if (!data) return null;\n      var items = this.makeItems(data);\n      return {\n        title: title,\n        items: items\n      };\n    },\n    makeItems: function makeItems(data) {\n      var _this2 = this;\n\n      return Object.keys(data).map(function (k) {\n        if (isToken(data[k])) {\n          return {\n            title: tokenFormatter(data[k]),\n            subtitle: k\n          };\n        }\n\n        if (typeof data[k] === 'boolean') {\n          return {\n            title: data[k],\n            subtitle: k\n          };\n        }\n\n        return {\n          title: _this2.convert(data[k]),\n          subtitle: k\n        };\n      });\n    },\n    convert: function convert(v) {\n      var _this3 = this;\n\n      if (_typeof(v) === 'object') {\n        var v2 = {};\n        Object.entries(v).forEach(function (e) {\n          var k = e[0];\n          var x = e[1];\n          v2[k] = _this3.convert(x);\n        });\n        return v2;\n      }\n\n      var d = parseFloat(v);\n      if (d === 0) return 0;\n\n      if (d < 1.01) {\n        return \"\".concat(percent(d), \"%\");\n      }\n\n      if (d > 1000000000) {\n        return \"\".concat(toDuration(d / 1000000));\n      }\n\n      if (d > 0) {\n        return d.toFixed();\n      }\n\n      return v;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,SACAA,IADA,EACAC,IADA,EACAC,MADA,EACAC,KADA,QAEA,eAFA;AAGA,SACAC,YADA,EACAC,iBADA,EACAC,eADA,EACAC,OADA,EACAC,OADA,EACAC,MADA,EACAC,KADA,EACAC,UADA,EACAC,cADA,QAEA,cAFA;AAIA;AACA;AACA;AAEA;EACAC;IACAb,UADA;IAEAC,UAFA;IAGAC,cAHA;IAIAC,YAJA;IAKAW,oDALA;IAMAC,8CANA;IAOAC;EAPA,CADA;EAUAC,IAVA,kBAUA;IACA;MACAC,cADA;MAEAC,cAFA;MAGAC,gBAHA;MAIAC;QACAC,SADA;QAEAC,uBAFA;QAGAC,QACA;UAAAC;UAAAC;UAAAC;QAAA,CADA,EAEA;UAAAF;UAAAC;UAAAC;QAAA,CAFA,EAGA;UAAAF;UAAAC;UAAAC;QAAA,CAHA,EAIA;UAAAF;UAAAC;UAAAC;QAAA,CAJA;MAHA,CAJA;MAcAC;QACAN,2BADA;QAEAE;MAFA,CAdA;MAkBAK;QACAP,gCADA;QAEAE;MAFA,CAlBA;MAsBAM;QACAR,4BADA;QAEAE;MAFA,CAtBA;MA0BAO;QACAT,wBADA;QAEAE;MAFA,CA1BA;MA8BAQ;QACAV,8BADA;QAEAE;MAFA;IA9BA;EAmCA,CA9CA;EA+CAS;IACAC,eADA,6BACA;MACA;QACA;UAAA;QAAA;QACA;UAAA;QAAA;QACA;UACAC,cADA;UAEAC,WACA;YACAC,6DADA;YAEApB,UAFA;YAGAqB,0CAHA;YAIAC,oCAJA;YAKAC,cALA;YAMAC,kBANA;YAOAC;UAPA,CADA;QAFA;MAcA;;MACA;IACA;EArBA,CA/CA;EAsEAC,OAtEA,qBAsEA;IAAA;;IACA;MACA;QAAA;MAAA;;MAEA;;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;;MACA;IACA,CAXA;IAaA;MACA;IACA,CAFA;IAIA;MACA;MACAC,sFACAC,IADA,CACA;QACA;UAAA;QAAA;;QACA;;QACA;UAAA;QAAA;;QACA;MACA,CANA;IAOA,CATA;IAUA;MACA;IACA,CAFA;IAIA;;IACA;MACA;IACA,CAFA,MAEA;MACA;QACA;UAAA;QAAA;;QACA;MACA,CAHA;MAIA;QACA;MACA,CAFA;IAGA;;IAEA;MACA;IACA,CAFA;;IAGA;MACA;IACA,CAFA,MAEA;MACAD,aACA,0CADA,EAEA,2CAFA,EAGA,yCAHA,GAIAC,IAJA,CAIA;QACA;QACA5B;UACA;;UACAO;QACA,CAHA;QAIA;;QACA;MACA,CAZA;IAaA;EACA,CAvIA;EAwIAsB;IACAC,SADA,qBACA9B,IADA,EACAK,KADA,EACA;MACA;MACA;MACA;QACAA,YADA;QAEAE;MAFA;IAIA,CARA;IASAwB,SATA,qBASA/B,IATA,EASA;MAAA;;MACA;QACA;UACA;YAAAK;YAAAG;UAAA;QACA;;QACA;UACA;YAAAH;YAAAG;UAAA;QACA;;QACA;UAAAH;UAAAG;QAAA;MACA,CARA;IASA,CAnBA;IAoBAwB,OApBA,mBAoBAC,CApBA,EAoBA;MAAA;;MACA;QACA;QACAC;UACA;UACA;UACAC;QACA,CAJA;QAKA;MACA;;MACA;MACA;;MACA;QACA;MACA;;MACA;QACA;MACA;;MACA;QACA;MACA;;MACA;IACA;EA1CA;AAxIA","names":["BRow","BCol","BAlert","BCard","formatNumber","formatTokenAmount","getUserCurrency","isToken","percent","timeIn","toDay","toDuration","tokenFormatter","components","SummaryParmetersComponent","SummaryAssetsComponent","SummaryPriceChart","data","syncing","latestTime","marketData","chain","title","class","items","subtitle","icon","color","staking","distribution","slashing","mint","gov","computed","marketChartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","pointStyle","barThickness","created","Promise","then","methods","normalize","makeItems","convert","v","Object","v2"],"sourceRoot":"src/views","sources":["Summary.vue"],"sourcesContent":["<template>\n  <div>\n    <b-alert\n      variant=\"danger\"\n      :show=\"syncing\"\n    >\n      <div class=\"alert-body\">\n        <span>No new blocks have been produced since  <strong>{{ latestTime }}</strong> </span>\n      </div>\n    </b-alert>\n    <b-row>\n      <b-col>\n        <summary-parmeters-component\n          :data=\"chain\"\n        />\n      </b-col>\n    </b-row>\n    <b-row v-if=\"marketChartData\">\n      <b-col>\n        <b-card>\n          <summary-price-chart\n            :chart-data=\"marketChartData\"\n            :height=\"150\"\n            :min-height=\"150\"\n          />\n        </b-card>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <summary-assets-component />\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <summary-parmeters-component :data=\"mint\" />\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <summary-parmeters-component :data=\"staking\" />\n      </b-col>\n    </b-row>\n    <b-row v-if=\"gov.items.length > 0\">\n      <b-col>\n        <summary-parmeters-component :data=\"gov\" />\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <summary-parmeters-component :data=\"distribution\" />\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col>\n        <summary-parmeters-component :data=\"slashing\" />\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\nimport {\n  BRow, BCol, BAlert, BCard,\n} from 'bootstrap-vue'\nimport {\n  formatNumber, formatTokenAmount, getUserCurrency, isToken, percent, timeIn, toDay, toDuration, tokenFormatter,\n} from '@/libs/utils'\n\nimport SummaryParmetersComponent from './SummaryParmetersComponent.vue'\nimport SummaryAssetsComponent from './SummaryAssetsComponent.vue'\nimport SummaryPriceChart from './SummaryPriceChart.vue'\n\nexport default {\n  components: {\n    BRow,\n    BCol,\n    BAlert,\n    BCard,\n    SummaryParmetersComponent,\n    SummaryAssetsComponent,\n    SummaryPriceChart,\n  },\n  data() {\n    return {\n      syncing: false,\n      latestTime: '',\n      marketData: null,\n      chain: {\n        title: '',\n        class: 'border-primary',\n        items: [\n          { subtitle: 'height', icon: 'BoxIcon', color: 'light-success' },\n          { subtitle: 'bonded_and_supply', icon: 'DollarSignIcon', color: 'light-danger' },\n          { subtitle: 'bonded_ratio', icon: 'PercentIcon', color: 'light-warning' },\n          { subtitle: 'inflation', icon: 'TrendingUpIcon', color: 'light-primary' },\n        ],\n      },\n      staking: {\n        title: 'Staking Parameters',\n        items: [],\n      },\n      distribution: {\n        title: 'Distribution Parameters',\n        items: [],\n      },\n      slashing: {\n        title: 'Slashing Parameters',\n        items: null,\n      },\n      mint: {\n        title: 'Mint Parameters',\n        items: null,\n      },\n      gov: {\n        title: 'Governance Parameters',\n        items: [],\n      },\n    }\n  },\n  computed: {\n    marketChartData() {\n      if (this.marketData && this.marketData.prices) {\n        const labels = this.marketData.prices.map(x => x[0])\n        const data = this.marketData.prices.map(x => x[1])\n        return {\n          labels,\n          datasets: [\n            {\n              label: `Price (${getUserCurrency().toUpperCase()})`,\n              data,\n              backgroundColor: 'rgba(54, 162, 235, 0.2)',\n              borderColor: 'rgba(54, 162, 235, 1)',\n              borderWidth: 1,\n              pointStyle: 'dash',\n              barThickness: 15,\n            },\n          ],\n        }\n      }\n      return null\n    },\n  },\n  created() {\n    this.$http.getLatestBlock().then(res => {\n      const height = this.chain.items.findIndex(x => x.subtitle === 'height')\n\n      this.$set(this.chain, 'title', `Chain ID: ${res.block.header.chain_id}`)\n      this.$set(this.chain.items[height], 'title', res.block.header.height)\n      if (timeIn(res.block.header.time, 3, 'm')) {\n        this.syncing = true\n      } else {\n        this.syncing = false\n      }\n      this.latestTime = toDay(res.block.header.time, 'long')\n    })\n\n    this.$http.getMarketChart().then(res => {\n      this.marketData = res\n    })\n\n    this.$http.getStakingParameters().then(res => {\n      this.staking = this.normalize(res, 'Staking Parameters')\n      Promise.all([this.$http.getStakingPool(), this.$http.getBankTotal(res.bond_denom)])\n        .then(pool => {\n          const bondedAndSupply = this.chain.items.findIndex(x => x.subtitle === 'bonded_and_supply')\n          this.$set(this.chain.items[bondedAndSupply], 'title', `${formatNumber(formatTokenAmount(pool[0].bondedToken, 2, res.bond_denom, false), true, 0)}/${formatNumber(formatTokenAmount(pool[1].amount, 2, res.bond_denom, false), true, 0)}`)\n          const bondedRatio = this.chain.items.findIndex(x => x.subtitle === 'bonded_ratio')\n          this.$set(this.chain.items[bondedRatio], 'title', `${percent(pool[0].bondedToken / pool[1].amount)}%`)\n        })\n    })\n    this.$http.getSlashingParameters().then(res => {\n      this.slashing = this.normalize(res, 'Slashing Parameters')\n    })\n\n    const conf = this.$http.getSelectedConfig()\n    if (conf.excludes && conf.excludes.indexOf('mint') > -1) {\n      this.mint = null\n    } else {\n      this.$http.getMintingInflation().then(res => {\n        const chainIndex = this.chain.items.findIndex(x => x.subtitle === 'inflation')\n        this.$set(this.chain.items[chainIndex], 'title', `${percent(res)}%`)\n      })\n      this.$http.getMintParameters().then(res => {\n        this.mint = this.normalize(res, 'Minting Parameters')\n      })\n    }\n\n    this.$http.getDistributionParameters().then(res => {\n      this.distribution = this.normalize(res, 'Distribution Parameters')\n    })\n    if (conf.excludes && conf.excludes.indexOf('governance') > -1) {\n      this.gov.items = []\n    } else {\n      Promise.all([\n        this.$http.getGovernanceParameterDeposit(),\n        this.$http.getGovernanceParameterTallying(),\n        this.$http.getGovernanceParameterVoting(),\n      ]).then(data => {\n        let items = []\n        data.forEach(item => {\n          const values = this.normalize(item, '').items\n          items = items.concat(values)\n        })\n        this.gov.items = items\n        this.$set(this.gov, 'items', items)\n      })\n    }\n  },\n  methods: {\n    normalize(data, title) {\n      if (!data) return null\n      const items = this.makeItems(data)\n      return {\n        title,\n        items,\n      }\n    },\n    makeItems(data) {\n      return Object.keys(data).map(k => {\n        if (isToken(data[k])) {\n          return { title: tokenFormatter(data[k]), subtitle: k }\n        }\n        if (typeof data[k] === 'boolean') {\n          return { title: data[k], subtitle: k }\n        }\n        return { title: this.convert(data[k]), subtitle: k }\n      })\n    },\n    convert(v) {\n      if (typeof v === 'object') {\n        const v2 = {}\n        Object.entries(v).forEach(e => {\n          const k = e[0]\n          const x = e[1]\n          v2[k] = this.convert(x)\n        })\n        return v2\n      }\n      const d = parseFloat(v)\n      if (d === 0) return 0\n      if (d < 1.01) {\n        return `${percent(d)}%`\n      }\n      if (d > 1000000000) {\n        return `${toDuration(d / 1000000)}`\n      }\n      if (d > 0) {\n        return d.toFixed()\n      }\n      return v\n    },\n  },\n}\n</script>\n\n<style>\n\n</style>\n"]},"metadata":{},"sourceType":"module"}