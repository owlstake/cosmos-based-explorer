{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { $themeColors } from '@themeConfig';\nimport dayjs from 'dayjs';\nimport { BCard, BAvatar, BPopover, BTable, BRow, BCol, BTableSimple, BTr, BTd, BTbody, BCardHeader, BCardTitle, BButton, BCardBody, VBModal, BButtonGroup, VBTooltip, BPagination } from 'bootstrap-vue';\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue';\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue';\nimport Ripple from 'vue-ripple-directive';\nimport VueQr from 'vue-qr';\nimport chainAPI from '@/libs/fetch';\nimport { formatToken, formatTokenAmount, formatTokenDenom, getStakingValidatorOperator, percent, tokenFormatter, toDay, toDuration, abbrMessage, abbrAddress, getUserCurrency, getUserCurrencySign, numberWithCommas, toETHAddress } from '@/libs/utils';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport ObjectFieldComponent from './ObjectFieldComponent.vue';\nimport ChartComponentDoughnut from './ChartComponentDoughnut.vue';\nexport default {\n  components: {\n    BRow: BRow,\n    BCol: BCol,\n    BCard: BCard,\n    BAvatar: BAvatar,\n    BPopover: BPopover,\n    BTable: BTable,\n    FeatherIcon: FeatherIcon,\n    VueQr: VueQr,\n    BTableSimple: BTableSimple,\n    BTbody: BTbody,\n    BCardHeader: BCardHeader,\n    BCardTitle: BCardTitle,\n    BCardBody: BCardBody,\n    BButton: BButton,\n    BButtonGroup: BButtonGroup,\n    BTr: BTr,\n    BTd: BTd,\n    BPagination: BPagination,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent: ToastificationContent,\n    ObjectFieldComponent: ObjectFieldComponent,\n    ChartComponentDoughnut: ChartComponentDoughnut,\n    OperationModal: OperationModal\n  },\n  directives: {\n    'b-modal': VBModal,\n    'b-tooltip': VBTooltip,\n    Ripple: Ripple\n  },\n  beforeRouteUpdate: function beforeRouteUpdate(to, from, next) {\n    var _this = this;\n\n    // const { address } = this.$route.params\n    var address = to.params.address;\n\n    if (address !== from.params.hash) {\n      this.address = address;\n      this.$http.getAuthAccount(this.address).then(function (acc) {\n        _this.account = acc;\n\n        _this.initial();\n\n        _this.$http.getTxsBySender(_this.address).then(function (res) {\n          _this.transactions = res;\n        });\n      }).catch(function (err) {\n        _this.error = err;\n      });\n      next();\n    }\n  },\n  data: function data() {\n    var address = this.$route.params.address;\n    return {\n      currency: getUserCurrencySign(),\n      selectedValidator: '',\n      totalCurrency: 0,\n      address: address,\n      account: null,\n      assets: [],\n      reward: [],\n      delegations: [],\n      redelegations: [],\n      unbonding: [],\n      quotes: {},\n      transactions: [],\n      stakingParameters: {},\n      operationModalType: '',\n      error: null\n    };\n  },\n  computed: {\n    accountTitle: function accountTitle() {\n      if (this.account && this.account.type) {\n        return this.account.type.substring(this.account.type.indexOf('/') + 1);\n      }\n\n      return 'Profile';\n    },\n    txs: function txs() {\n      if (this.transactions.txs) {\n        return this.transactions.tx_responses.map(function (x) {\n          return {\n            height: Number(x.height),\n            txhash: x.txhash,\n            msgs: abbrMessage(x.tx.body.messages),\n            time: toDay(x.timestamp)\n          };\n        });\n      }\n\n      return [];\n    },\n    assetTable: function assetTable() {\n      var _this2 = this;\n\n      var total = [];\n      var sum = 0;\n      var sumCurrency = 0;\n      total = total.concat(this.assets.map(function (x) {\n        var xh = x;\n        xh.type = 'Balance';\n        xh.color = 'success';\n        xh.icon = 'CreditCardIcon';\n        xh.currency = _this2.formatCurrency(xh.amount, xh.denom);\n        sumCurrency += xh.currency;\n        sum += Number(xh.amount);\n        return xh;\n      }));\n      var stakingDenom = '';\n\n      if (this.delegations && this.delegations.length > 0) {\n        var temp = 0;\n        this.delegations.forEach(function (x) {\n          var xh = x.balance;\n          temp += Number(xh.amount);\n          sumCurrency += _this2.formatCurrency(xh.amount, xh.denom);\n          sum += Number(xh.amount);\n          stakingDenom = xh.denom;\n        });\n        total.push({\n          type: 'Delegation',\n          color: 'primary',\n          icon: 'LockIcon',\n          amount: temp,\n          denom: stakingDenom,\n          currency: this.formatCurrency(temp, stakingDenom)\n        });\n      }\n\n      if (this.reward.total) {\n        total = total.concat(this.reward.total.map(function (x) {\n          var xh = x;\n          xh.type = 'Reward';\n          xh.color = 'warning';\n          xh.icon = 'TrendingUpIcon';\n          xh.currency = _this2.formatCurrency(xh.amount, xh.denom);\n          sumCurrency += xh.currency;\n          sum += Number(xh.amount);\n          return xh;\n        }));\n      }\n\n      if (this.unbonding) {\n        var tmp1 = 0;\n        this.unbonding.forEach(function (x) {\n          x.entries.forEach(function (e) {\n            tmp1 += Number(e.balance);\n          });\n        });\n        if (this.stakingParameters) stakingDenom = this.stakingParameters.bond_denom;\n        var unbonding = this.formatCurrency(tmp1, stakingDenom);\n        sumCurrency += unbonding;\n        sum += tmp1;\n        total.push({\n          type: 'unbonding',\n          color: 'danger',\n          icon: 'TrendingDownIcon',\n          denom: stakingDenom,\n          amount: tmp1,\n          percent: 0,\n          currency: unbonding\n        });\n      }\n\n      total = total.map(function (x) {\n        var xh = x;\n        xh.percent = percent(Number(x.amount) / sum);\n        return xh;\n      });\n      return {\n        items: total,\n        currency: parseFloat(sumCurrency.toFixed(2))\n      };\n    },\n    chartData: function chartData() {\n      var data = this.assetTable.items.reduce(function (t, c) {\n        var th = t;\n\n        if (t[c.type]) {\n          th[c.type] += Number(c.amount);\n        } else {\n          th[c.type] = Number(c.amount);\n        }\n\n        return th;\n      }, []);\n      return {\n        datasets: [{\n          labels: Object.keys(data),\n          data: Object.values(data),\n          backgroundColor: [$themeColors.success, $themeColors.primary, $themeColors.warning, $themeColors.danger, $themeColors.info],\n          borderWidth: 0,\n          pointStyle: 'rectRounded'\n        }]\n      };\n    },\n    deleTable: function deleTable() {\n      var _this3 = this;\n\n      var re = [];\n\n      if (this.reward.rewards && this.delegations && this.delegations.length > 0) {\n        this.delegations.forEach(function (e) {\n          var reward = _this3.reward.rewards.find(function (r) {\n            return r.validator_address === e.delegation.validator_address;\n          });\n\n          re.push({\n            validator: getStakingValidatorOperator(_this3.$http.config.chain_name, e.delegation.validator_address, 8),\n            token: formatToken(e.balance, {}, 2),\n            reward: tokenFormatter(reward.reward, _this3.denoms),\n            action: e.delegation.validator_address\n          });\n        });\n      }\n\n      return re;\n    },\n    accTable: function accTable() {\n      var table = {};\n\n      if (this.account && this.account.type === 'cosmos-sdk/PeriodicVestingAccount') {\n        table = this.account.value;\n      }\n\n      return table;\n    },\n    denoms: function denoms() {\n      return this.$store.state.chains.denoms;\n    },\n    isEthAddr: function isEthAddr() {\n      return JSON.stringify(this.account).indexOf('PubKeyEthSecp256k1') > 0;\n    }\n  },\n  created: function created() {\n    var _this4 = this;\n\n    this.$http.getAuthAccount(this.address).then(function (acc) {\n      _this4.account = acc;\n\n      _this4.initial();\n\n      _this4.$http.getTxsBySender(_this4.address).then(function (res) {\n        _this4.transactions = res;\n      });\n\n      _this4.$http.getStakingParameters().then(function (res) {\n        _this4.stakingParameters = res;\n      });\n    }).catch(function (err) {\n      _this4.error = err;\n    });\n  },\n  mounted: function mounted() {\n    var _this5 = this;\n\n    var elem = document.getElementById('txevent');\n    elem.addEventListener('txcompleted', function () {\n      _this5.initial();\n    });\n  },\n  methods: {\n    initial: function initial() {\n      var _this6 = this;\n\n      this.$http.getBankAccountBalance(this.address).then(function (bal) {\n        _this6.assets = bal;\n        bal.forEach(function (x) {\n          var symbol = formatTokenDenom(x.denom);\n\n          if (!_this6.quotes[symbol] && symbol.indexOf('/') === -1) {\n            chainAPI.fetchTokenQuote(symbol).then(function (quote) {\n              _this6.$set(_this6.quotes, symbol, quote);\n            });\n          }\n        });\n      });\n      this.$http.getStakingReward(this.address).then(function (res) {\n        _this6.reward = res;\n      });\n      this.$http.getStakingDelegations(this.address).then(function (res) {\n        _this6.delegations = res.delegation_responses || res;\n      });\n      this.$http.getStakingUnbonding(this.address).then(function (res) {\n        _this6.unbonding = res.unbonding_responses || res;\n      });\n    },\n    formatNumber: function formatNumber(v) {\n      return numberWithCommas(v);\n    },\n    pageload: function pageload(v) {\n      var _this7 = this;\n\n      this.$http.getTxsBySender(this.address, v).then(function (res) {\n        _this7.transactions = res;\n      });\n    },\n    selectValue: function selectValue(v, type) {\n      this.selectedValidator = v;\n      this.setOperationModalType(type);\n    },\n    setOperationModalType: function setOperationModalType(type) {\n      this.operationModalType = type;\n    },\n    formatHash: abbrAddress,\n    formatDenom: function formatDenom(v) {\n      return formatTokenDenom(this.denoms[v] ? this.denoms[v] : v);\n    },\n    formatAmount: function formatAmount(v) {\n      var dec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      var denom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'uatom';\n      var format = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      return formatTokenAmount(v, dec, denom, format);\n    },\n    formatToken: function formatToken(v) {\n      return tokenFormatter(v, this.denoms);\n    },\n    formatCurrency: function formatCurrency(amount, denom) {\n      var qty = this.formatAmount(amount, 2, denom, false);\n      var d2 = this.formatDenom(denom);\n      var userCurrency = getUserCurrency();\n      var quote = this.$store.state.chains.quotes[d2];\n\n      if (quote) {\n        var price = quote[userCurrency];\n        return parseFloat((qty * price).toFixed(2));\n      }\n\n      return 0;\n    },\n    formatDate: function formatDate(v) {\n      return dayjs(v).format('YYYY-MM-DD HH:mm:ss');\n    },\n    formatTime: function formatTime(v) {\n      return toDay(Number(v) * 1000);\n    },\n    formatLength: function formatLength(v) {\n      return toDuration(Number(v) * 1000);\n    },\n    copy: function copy() {\n      var _this8 = this;\n\n      this.$copyText(this.address).then(function () {\n        _this8.$toast({\n          component: ToastificationContent,\n          props: {\n            title: 'Address copied',\n            icon: 'BellIcon'\n          }\n        });\n      }, function (e) {\n        _this8.$toast({\n          component: ToastificationContent,\n          props: {\n            title: \"Failed to copy address! \".concat(e),\n            icon: 'BellIcon',\n            variant: 'danger'\n          }\n        });\n      });\n    },\n    ethaddress: function ethaddress() {\n      return toETHAddress(this.address);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgaA;AACA;AACA,SACAA,KADA,EACAC,OADA,EACAC,QADA,EACAC,MADA,EACAC,IADA,EACAC,IADA,EACAC,YADA,EACAC,GADA,EACAC,GADA,EACAC,MADA,EACAC,WADA,EACAC,UADA,EACAC,OADA,EACAC,SADA,EACAC,OADA,EAEAC,YAFA,EAEAC,SAFA,EAEAC,WAFA,QAGA,eAHA;AAIA;AACA;AACA;AACA;AACA;AACA,SACAC,WADA,EACAC,iBADA,EACAC,gBADA,EACAC,2BADA,EACAC,OADA,EACAC,cADA,EACAC,KADA,EAEAC,UAFA,EAEAC,WAFA,EAEAC,WAFA,EAEAC,eAFA,EAEAC,mBAFA,EAEAC,gBAFA,EAEAC,YAFA,QAGA,cAHA;AAIA;AACA;AACA;AAEA;EACAC;IACA5B,UADA;IAEAC,UAFA;IAGAL,YAHA;IAIAC,gBAJA;IAKAC,kBALA;IAMAC,cANA;IAOA8B,wBAPA;IAQAC,YARA;IASA5B,0BATA;IAUAG,cAVA;IAWAC,wBAXA;IAYAC,sBAZA;IAaAE,oBAbA;IAcAD,gBAdA;IAeAG,0BAfA;IAgBAR,QAhBA;IAiBAC,QAjBA;IAkBAS,wBAlBA;IAmBA;IACAkB,4CApBA;IAqBAC,0CArBA;IAsBAC,8CAtBA;IAuBAC;EAvBA,CADA;EA0BAC;IACA,kBADA;IAEA,sBAFA;IAGAC;EAHA,CA1BA;EA+BAC,iBA/BA,6BA+BAC,EA/BA,EA+BAC,IA/BA,EA+BAC,IA/BA,EA+BA;IAAA;;IACA;IACA;;IACA;MACA;MACA;QACA;;QACA;;QACA;UACA;QACA,CAFA;MAGA,CANA,EAMAC,KANA,CAMA;QACA;MACA,CARA;MASAD;IACA;EACA,CA/CA;EAgDAE,IAhDA,kBAgDA;IACA;IACA;MACAC,+BADA;MAEAC,qBAFA;MAGAC,gBAHA;MAIAC,gBAJA;MAKAC,aALA;MAMAC,UANA;MAOAC,UAPA;MAQAC,eARA;MASAC,iBATA;MAUAC,aAVA;MAWAC,UAXA;MAYAC,gBAZA;MAaAC,qBAbA;MAcAC,sBAdA;MAeAC;IAfA;EAiBA,CAnEA;EAoEAC;IACAC,YADA,0BACA;MACA;QACA;MACA;;MACA;IACA,CANA;IAOAC,GAPA,iBAOA;MACA;QACA;UAAA;YACAC,wBADA;YAEAC,gBAFA;YAGAC,qCAHA;YAIAC;UAJA;QAAA;MAMA;;MACA;IACA,CAjBA;IAkBAC,UAlBA,wBAkBA;MAAA;;MACA;MACA;MACA;MACAC;QACA;QACAC;QACAA;QACAA;QACAA;QACAC;QACAC;QACA;MACA,CATA;MAWA;;MAEA;QACA;QACA;UACA;UACAC;UACAF;UACAC;UACAE;QACA,CANA;QAOAL;UACAM,kBADA;UAEAC,gBAFA;UAGAC,gBAHA;UAIAC,YAJA;UAKAC,mBALA;UAMAjC;QANA;MAQA;;MAEA;QACAuB;UACA;UACAC;UACAA;UACAA;UACAA;UACAC;UACAC;UACA;QACA,CATA;MAUA;;MACA;QACA;QACA;UACAQ;YACAC;UACA,CAFA;QAGA,CAJA;QAKA;QACA;QACAV;QACAC;QACAH;UACAM,iBADA;UAEAC,eAFA;UAGAC,wBAHA;UAIAE,mBAJA;UAKAD,YALA;UAMAzD,UANA;UAOAyB;QAPA;MASA;;MACAuB;QACA;QACAC;QACA;MACA,CAJA;MAKA;QACAY,YADA;QAEApC;MAFA;IAIA,CAhGA;IAiGAqC,SAjGA,uBAiGA;MACA;QACA;;QACA;UACAC;QACA,CAFA,MAEA;UACAA;QACA;;QACA;MACA,CARA,EAQA,EARA;MASA;QACAC,WACA;UACAC,yBADA;UAEAzC,yBAFA;UAGA0C,2HAHA;UAIAC,cAJA;UAKAC;QALA,CADA;MADA;IAWA,CAtHA;IAuHAC,SAvHA,uBAuHA;MAAA;;MACA;;MACA;QACA;UACA;YAAA;UAAA;;UACAC;YACAC,yGADA;YAEAC,oCAFA;YAGAzC,oDAHA;YAIA0C;UAJA;QAMA,CARA;MASA;;MACA;IACA,CArIA;IAsIAC,QAtIA,sBAsIA;MACA;;MACA;QACAC;MACA;;MACA;IACA,CA5IA;IA6IAC,MA7IA,oBA6IA;MACA;IACA,CA/IA;IAgJAC,SAhJA,uBAgJA;MACA;IACA;EAlJA,CApEA;EAwNAC,OAxNA,qBAwNA;IAAA;;IACA;MACA;;MACA;;MACA;QACA;MACA,CAFA;;MAGA;QACA;MACA,CAFA;IAGA,CATA,EASAvD,KATA,CASA;MACA;IACA,CAXA;EAYA,CArOA;EAsOAwD,OAtOA,qBAsOA;IAAA;;IACA;IACAC;MACA;IACA,CAFA;EAGA,CA3OA;EA4OAC;IACAC,OADA,qBACA;MAAA;;MACA;QACA;QACAC;UACA;;UACA;YACAC;cACA;YACA,CAFA;UAGA;QACA,CAPA;MAQA,CAVA;MAWA;QACA;MACA,CAFA;MAGA;QACA;MACA,CAFA;MAGA;QACA;MACA,CAFA;IAGA,CAtBA;IAuBAC,YAvBA,wBAuBAC,CAvBA,EAuBA;MACA;IACA,CAzBA;IA0BAC,QA1BA,oBA0BAD,CA1BA,EA0BA;MAAA;;MACA;QACA;MACA,CAFA;IAGA,CA9BA;IA+BAE,WA/BA,uBA+BAF,CA/BA,EA+BAhC,IA/BA,EA+BA;MACA;MACA;IACA,CAlCA;IAmCAmC,qBAnCA,iCAmCAnC,IAnCA,EAmCA;MACA;IACA,CArCA;IAsCAoC,uBAtCA;IAuCAC,WAvCA,uBAuCAL,CAvCA,EAuCA;MACA;IACA,CAzCA;IA0CAM,YA1CA,wBA0CAN,CA1CA,EA0CA;MAAA;MAAA;MAAA;MACA;IACA,CA5CA;IA6CA1F,WA7CA,uBA6CA0F,CA7CA,EA6CA;MACA;IACA,CA/CA;IAgDAO,cAhDA,0BAgDApC,MAhDA,EAgDAC,KAhDA,EAgDA;MACA;MACA;MACA;MACA;;MACA;QACA;QACA;MACA;;MACA;IACA,CA1DA;IA2DAoC;MAAA;IAAA,CA3DA;IA4DAC;MAAA;IAAA,CA5DA;IA6DAC;MAAA;IAAA,CA7DA;IA8DAC,IA9DA,kBA8DA;MAAA;;MACA;QACA;UACAC,gCADA;UAEAC;YACAC,uBADA;YAEA5C;UAFA;QAFA;MAOA,CARA,EAQA;QACA;UACA0C,gCADA;UAEAC;YACAC,2CADA;YAEA5C,gBAFA;YAGA6C;UAHA;QAFA;MAQA,CAjBA;IAkBA,CAjFA;IAkFAC,UAlFA,wBAkFA;MACA;IACA;EApFA;AA5OA","names":["BCard","BAvatar","BPopover","BTable","BRow","BCol","BTableSimple","BTr","BTd","BTbody","BCardHeader","BCardTitle","BButton","BCardBody","VBModal","BButtonGroup","VBTooltip","BPagination","formatToken","formatTokenAmount","formatTokenDenom","getStakingValidatorOperator","percent","tokenFormatter","toDay","toDuration","abbrMessage","abbrAddress","getUserCurrency","getUserCurrencySign","numberWithCommas","toETHAddress","components","FeatherIcon","VueQr","ToastificationContent","ObjectFieldComponent","ChartComponentDoughnut","OperationModal","directives","Ripple","beforeRouteUpdate","to","from","next","catch","data","currency","selectedValidator","totalCurrency","address","account","assets","reward","delegations","redelegations","unbonding","quotes","transactions","stakingParameters","operationModalType","error","computed","accountTitle","txs","height","txhash","msgs","time","assetTable","total","xh","sumCurrency","sum","temp","stakingDenom","type","color","icon","amount","denom","x","tmp1","items","chartData","th","datasets","labels","backgroundColor","borderWidth","pointStyle","deleTable","re","validator","token","action","accTable","table","denoms","isEthAddr","created","mounted","elem","methods","initial","bal","chainAPI","formatNumber","v","pageload","selectValue","setOperationModalType","formatHash","formatDenom","formatAmount","formatCurrency","formatDate","formatTime","formatLength","copy","component","props","title","variant","ethaddress"],"sourceRoot":"src/views","sources":["WalletAccountDetail.vue"],"sourcesContent":["<template>\n  <div>\n    <div v-if=\"!error\">\n      <b-card\n        bg-variant=\"secondary\"\n        style=\"color: #fff\"\n      >\n        <div\n          class=\"d-flex flex-row align-items-center text-truncate\"\n        >\n          <b-avatar\n            id=\"address-qr\"\n            rounded\n            size=\"52\"\n          >\n            <feather-icon\n              icon=\"CameraIcon\"\n              size=\"32\"\n            />\n          </b-avatar>\n          <div class=\"ml-2\">\n            <h3\n              style=\"color: #fff\"\n              class=\"mb-0\"\n            >\n              Address: <feather-icon\n                icon=\"CopyIcon\"\n                size=\"18\"\n                @click=\"copy()\"\n              />\n            </h3>\n            {{ address }}\n            <span v-if=\"isEthAddr\"> - {{ ethaddress() }}</span>\n          </div>\n        </div>\n      </b-card>\n      <b-card\n        class=\"d-flex flex-row\"\n      >\n        <b-card-header class=\"pt-0 pl-0 pr-0\">\n          <b-card-title>Assets</b-card-title>\n          <div>\n            <b-button\n              v-b-modal.operation-modal\n              variant=\"primary\"\n              size=\"sm\"\n              class=\"mr-25\"\n              @click=\"setOperationModalType('Transfer')\"\n            >\n              <feather-icon\n                icon=\"SendIcon\"\n                class=\"d-md-none\"\n              /><small class=\"d-none d-md-block\">Transfer</small>\n            </b-button>\n            <b-button\n              v-b-modal.operation-modal\n              variant=\"danger\"\n              size=\"sm\"\n              @click=\"setOperationModalType('IBCTransfer')\"\n            ><feather-icon\n               icon=\"SendIcon\"\n               class=\"d-md-none\"\n             />\n              <span class=\"d-none d-md-block\">IBC Transfer</span>\n            </b-button>\n          </div>\n        </b-card-header>\n        <b-card-body class=\"pl-0 pr-0\">\n          <b-row>\n            <b-col\n              xm=\"12\"\n              md=\"4\"\n            >\n              <chart-component-doughnut\n                v-if=\"chartData\"\n                :height=\"235\"\n                :width=\"235\"\n                :data=\"chartData\"\n                class=\"mb-3\"\n              />\n            </b-col>\n            <b-col\n              class=\"border-left d-none d-md-block\"\n              md=\"1\"\n            />\n            <b-col\n              xm=\"12\"\n              md=\"7\"\n            >\n              <!-- tokens -->\n              <div\n                v-for=\"(token, index) in assetTable.items\"\n                :key=\"`asset-${index}`\"\n                class=\"d-flex justify-content-between mb-1\"\n              >\n                <div class=\"d-flex align-items-center\">\n                  <b-avatar\n                    :variant=\"`light-${token.color}`\"\n                    rounded\n                  >\n                    <feather-icon\n                      :icon=\"token.icon\"\n                      size=\"16\"\n                      :class=\"`text-${token.color}`\"\n                    />\n                  </b-avatar>\n                  <span class=\"font-weight-bold ml-75 d-none d-md-block\">{{ token.type }} </span>\n                  <span class=\"ml-25\">{{ token.percent }}%</span>\n                </div>\n                <div class=\"d-flex flex-column\">\n                  <span\n                    v-b-tooltip.hover.top=\"token.denom\"\n                    class=\"text-right\"\n                  >{{ formatToken(token) }}</span>\n                  <small class=\"text-right\">{{ currency }}{{ formatNumber(token.currency) }}</small>\n                </div>\n              </div>\n              <!--/ tokens -->\n              <div class=\"text-right border-top pt-1\">\n                <h2>Total: {{ currency }}{{ formatNumber(assetTable.currency) }}</h2>\n              </div>\n            </b-col>\n          </b-row>\n        </b-card-body>\n      </b-card>\n      <b-card\n        v-if=\"unbonding && unbonding.length > 0\"\n      >\n        <b-card-header class=\"pt-0 pl-0 pr-0\">\n          <b-card-title>Unbonding Tokens</b-card-title>\n        </b-card-header>\n        <b-card-body class=\"pl-0 pr-0\">\n          <b-row\n            v-for=\"item in unbonding\"\n            :key=\"item.validator_address\"\n          >\n            <b-col cols=\"12\">\n              <span class=\"font-weight-bolder\">From: <router-link :to=\"`../staking/${item.validator_address}`\">{{ item.validator_address }}</router-link></span>\n            </b-col>\n            <b-col cols=\"12\">\n              <b-table\n                :items=\"item.entries\"\n                class=\"mt-1\"\n                striped\n                hover\n                responsive=\"sm\"\n                stacked=\"sm\"\n              >\n                <template #cell(completion_time)=\"data\">\n                  {{ formatDate(data.item.completion_time) }}\n                </template>\n                <template #cell(initial_balance)=\"data\">\n                  {{ data.item.initial_balance }}{{ stakingParameters.bond_denom }}\n                </template>\n                <template #cell(balance)=\"data\">\n                  {{ data.item.balance }}{{ stakingParameters.bond_denom }}\n                </template>\n              </b-table>\n            </b-col>\n          </b-row>\n        </b-card-body>\n      </b-card>\n      <b-card\n        v-if=\"delegations\"\n      >\n        <b-card-header class=\"pt-0 pl-0 pr-0\">\n          <b-card-title>Delegation</b-card-title>\n          <div>\n            <b-button\n              v-b-modal.operation-modal\n              variant=\"primary\"\n              size=\"sm\"\n              class=\"mr-25\"\n              @click=\"setOperationModalType('Delegate')\"\n            >\n              <feather-icon\n                icon=\"LogInIcon\"\n                class=\"d-md-none\"\n              /><small class=\"d-none d-md-block\">Delegate</small>\n            </b-button>\n            <b-button\n              v-if=\"delegations\"\n              v-b-modal.operation-modal\n              variant=\"primary\"\n              size=\"sm\"\n              @click=\"setOperationModalType('Withdraw')\"\n            >\n              <feather-icon\n                icon=\"ShareIcon\"\n                class=\"d-md-none\"\n              /><small class=\"d-none d-md-block\"> Withdraw Rewards</small>\n            </b-button>\n          </div>\n        </b-card-header>\n        <b-card-body class=\"pl-0 pr-0\">\n          <b-table\n            :items=\"deleTable\"\n            stacked=\"sm\"\n          >\n            <template #cell(action)=\"data\">\n              <!-- size -->\n              <b-button-group\n                size=\"sm\"\n              >\n                <b-button\n                  v-b-modal.operation-modal\n                  v-ripple.400=\"'rgba(113, 102, 240, 0.15)'\"\n                  v-b-tooltip.hover.top=\"'Delegate'\"\n                  variant=\"outline-primary\"\n                  @click=\"selectValue(data.value,'Delegate')\"\n                >\n                  <feather-icon icon=\"LogInIcon\" />\n                </b-button>\n                <b-button\n                  v-b-modal.operation-modal\n                  v-ripple.400=\"'rgba(113, 102, 240, 0.15)'\"\n                  v-b-tooltip.hover.top=\"'Redelegate'\"\n                  variant=\"outline-primary\"\n                  @click=\"selectValue(data.value,'Redelegate')\"\n                >\n                  <feather-icon icon=\"ShuffleIcon\" />\n                </b-button>\n                <b-button\n                  v-b-modal.operation-modal\n                  v-ripple.400=\"'rgba(113, 102, 240, 0.15)'\"\n                  v-b-tooltip.hover.top=\"'Unbond'\"\n                  variant=\"outline-primary\"\n                  @click=\"selectValue(data.value,'Unbond')\"\n                >\n                  <feather-icon icon=\"LogOutIcon\" />\n                </b-button>\n              </b-button-group>\n            </template>\n          </b-table>\n        </b-card-body>\n      </b-card>\n\n      <b-card title=\"Transactions\">\n        <b-table\n          :items=\"txs\"\n          striped\n          hover\n          responsive=\"sm\"\n          stacked=\"sm\"\n        >\n          <template #cell(height)=\"data\">\n            <router-link :to=\"`../blocks/${data.item.height}`\">\n              {{ data.item.height }}\n            </router-link>\n          </template>\n          <template #cell(txhash)=\"data\">\n            <router-link :to=\"`../tx/${data.item.txhash}`\">\n              {{ formatHash(data.item.txhash) }}\n            </router-link>\n          </template>\n        </b-table>\n\n        <b-pagination\n          v-if=\"Number(transactions.page_total) > 1\"\n          :total-rows=\"transactions.total_count\"\n          :per-page=\"transactions.limit\"\n          :value=\"transactions.page_number\"\n          align=\"center\"\n          class=\"mt-1\"\n          @change=\"pageload\"\n        />\n      </b-card>\n\n      <b-card\n        v-if=\"account\"\n        title=\"Profile\"\n        class=\"text-trancate\"\n      >\n        <b-table-simple stacked=\"sm\">\n          <b-tbody v-if=\"account.type === 'cosmos-sdk/BaseAccount'\">\n            <b-tr>\n              <b-td>\n                Account Type\n              </b-td><b-td> {{ account.type }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td class=\"max-width:100px;\">\n                Account Number\n              </b-td><b-td> {{ account.value.account_number }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Sequence </b-td><b-td> {{ account.value.sequence }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Public Key </b-td><b-td> <object-field-component :tablefield=\"account.value.public_key\" /> </b-td>\n            </b-tr>\n          </b-tbody>\n          <b-tbody v-else-if=\"account.type === 'cosmos-sdk/PeriodicVestingAccount' && account.value.base_vesting_account\">\n            <b-tr>\n              <b-td>\n                Account Type\n              </b-td>\n              <b-td>\n                {{ account.type }}\n              </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td>\n                Account Number\n              </b-td><b-td> {{ account.value.base_vesting_account.base_account.account_number }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Sequence </b-td><b-td> {{ account.value.base_vesting_account.base_account.sequence }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Public Key </b-td><b-td> <object-field-component :tablefield=\"account.value.base_vesting_account.base_account.public_key\" /> </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Original Vesting </b-td><b-td> {{ formatToken(account.value.base_vesting_account.original_vesting) }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Delegated Free </b-td><b-td> {{ formatToken(account.value.base_vesting_account.delegated_free) }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Delegated Vesting </b-td><b-td> {{ formatToken(account.value.base_vesting_account.delegated_vesting) }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Vesting Time </b-td><b-td> {{ formatTime(account.value.start_time) }} - {{ formatTime(account.value.base_vesting_account.end_time) }}</b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Vesting Periods </b-td>\n              <b-td>\n                <b-table-simple>\n                  <th>Length</th><th>Amount</th>\n                  <b-tr\n                    v-for=\"p, index in account.value.vesting_periods\"\n                    :key=\"index\"\n                  >\n                    <td><small>{{ p.length }} <br>{{ formatLength(p.length) }}</small> </td><td>{{ formatToken(p.amount) }}</td>\n                  </b-tr>\n                </b-table-simple>\n              </b-td>\n            </b-tr>\n          </b-tbody>\n          <b-tbody v-else-if=\"account.type === 'cosmos-sdk/DelayedVestingAccount' && account.value.base_vesting_account\">\n            <b-tr>\n              <b-td>\n                Account Type\n              </b-td><b-td> {{ account.type }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td style=\"max-width:100px;\">\n                Account Number\n              </b-td><b-td> {{ account.value.base_vesting_account.base_account.account_number }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Sequence </b-td><b-td> {{ account.value.base_vesting_account.base_account.sequence }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Public Key </b-td><b-td> <object-field-component :tablefield=\"account.value.base_vesting_account.base_account.public_key\" /> </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Original Vesting </b-td><b-td> {{ formatToken(account.value.base_vesting_account.original_vesting) }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Delegated Free </b-td><b-td> {{ formatToken(account.value.base_vesting_account.delegated_free) }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> Delegated Vesting </b-td><b-td> {{ formatToken(account.value.base_vesting_account.delegated_vesting) }} </b-td>\n            </b-tr>\n            <b-tr>\n              <b-td> End Time </b-td><b-td> {{ formatTime(account.value.base_vesting_account.end_time) }}</b-td>\n            </b-tr>\n          </b-tbody>\n          <object-field-component\n            v-else\n            :tablefield=\"account.value || account\"\n          />\n        </b-table-simple>\n      </b-card>\n\n      <b-popover\n        target=\"address-qr\"\n        variant=\"dark\"\n        triggers=\"hover\"\n        placement=\"bottom\"\n      >\n        <vue-qr :text=\"address\" />\n      </b-popover>\n\n      <operation-modal\n        :type=\"operationModalType\"\n        :address=\"address\"\n        :validator-address=\"selectedValidator\"\n      />\n      <div id=\"txevent\" />\n    </div>\n    <div v-else>\n      <div class=\"misc-inner p-2 p-sm-3\">\n        <div class=\"w-100 text-center\">\n          <h2 class=\"mb-1\">\n            Account not found  🕵🏻‍♀️\n          </h2>\n          <p class=\"mb-2\">\n            Oops! 😖 {{ error }}.\n          </p>\n\n          <b-button\n            variant=\"primary\"\n            class=\"mb-2 btn-sm-block\"\n            :to=\"{path:'../'}\"\n          >\n            Back to home\n          </b-button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { $themeColors } from '@themeConfig'\nimport dayjs from 'dayjs'\nimport {\n  BCard, BAvatar, BPopover, BTable, BRow, BCol, BTableSimple, BTr, BTd, BTbody, BCardHeader, BCardTitle, BButton, BCardBody, VBModal,\n  BButtonGroup, VBTooltip, BPagination,\n} from 'bootstrap-vue'\nimport FeatherIcon from '@/@core/components/feather-icon/FeatherIcon.vue'\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue'\nimport Ripple from 'vue-ripple-directive'\nimport VueQr from 'vue-qr'\nimport chainAPI from '@/libs/fetch'\nimport {\n  formatToken, formatTokenAmount, formatTokenDenom, getStakingValidatorOperator, percent, tokenFormatter, toDay,\n  toDuration, abbrMessage, abbrAddress, getUserCurrency, getUserCurrencySign, numberWithCommas, toETHAddress,\n} from '@/libs/utils'\nimport OperationModal from '@/views/components/OperationModal/index.vue'\nimport ObjectFieldComponent from './ObjectFieldComponent.vue'\nimport ChartComponentDoughnut from './ChartComponentDoughnut.vue'\n\nexport default {\n  components: {\n    BRow,\n    BCol,\n    BCard,\n    BAvatar,\n    BPopover,\n    BTable,\n    FeatherIcon,\n    VueQr,\n    BTableSimple,\n    BTbody,\n    BCardHeader,\n    BCardTitle,\n    BCardBody,\n    BButton,\n    BButtonGroup,\n    BTr,\n    BTd,\n    BPagination,\n    // eslint-disable-next-line vue/no-unused-components\n    ToastificationContent,\n    ObjectFieldComponent,\n    ChartComponentDoughnut,\n    OperationModal,\n  },\n  directives: {\n    'b-modal': VBModal,\n    'b-tooltip': VBTooltip,\n    Ripple,\n  },\n  beforeRouteUpdate(to, from, next) {\n    // const { address } = this.$route.params\n    const { address } = to.params\n    if (address !== from.params.hash) {\n      this.address = address\n      this.$http.getAuthAccount(this.address).then(acc => {\n        this.account = acc\n        this.initial()\n        this.$http.getTxsBySender(this.address).then(res => {\n          this.transactions = res\n        })\n      }).catch(err => {\n        this.error = err\n      })\n      next()\n    }\n  },\n  data() {\n    const { address } = this.$route.params\n    return {\n      currency: getUserCurrencySign(),\n      selectedValidator: '',\n      totalCurrency: 0,\n      address,\n      account: null,\n      assets: [],\n      reward: [],\n      delegations: [],\n      redelegations: [],\n      unbonding: [],\n      quotes: {},\n      transactions: [],\n      stakingParameters: {},\n      operationModalType: '',\n      error: null,\n    }\n  },\n  computed: {\n    accountTitle() {\n      if (this.account && this.account.type) {\n        return this.account.type.substring(this.account.type.indexOf('/') + 1)\n      }\n      return 'Profile'\n    },\n    txs() {\n      if (this.transactions.txs) {\n        return this.transactions.tx_responses.map(x => ({\n          height: Number(x.height),\n          txhash: x.txhash,\n          msgs: abbrMessage(x.tx.body.messages),\n          time: toDay(x.timestamp),\n        }))\n      }\n      return []\n    },\n    assetTable() {\n      let total = []\n      let sum = 0\n      let sumCurrency = 0\n      total = total.concat(this.assets.map(x => {\n        const xh = x\n        xh.type = 'Balance'\n        xh.color = 'success'\n        xh.icon = 'CreditCardIcon'\n        xh.currency = this.formatCurrency(xh.amount, xh.denom)\n        sumCurrency += xh.currency\n        sum += Number(xh.amount)\n        return xh\n      }))\n\n      let stakingDenom = ''\n\n      if (this.delegations && this.delegations.length > 0) {\n        let temp = 0\n        this.delegations.forEach(x => {\n          const xh = x.balance\n          temp += Number(xh.amount)\n          sumCurrency += this.formatCurrency(xh.amount, xh.denom)\n          sum += Number(xh.amount)\n          stakingDenom = xh.denom\n        })\n        total.push({\n          type: 'Delegation',\n          color: 'primary',\n          icon: 'LockIcon',\n          amount: temp,\n          denom: stakingDenom,\n          currency: this.formatCurrency(temp, stakingDenom),\n        })\n      }\n\n      if (this.reward.total) {\n        total = total.concat(this.reward.total.map(x => {\n          const xh = x\n          xh.type = 'Reward'\n          xh.color = 'warning'\n          xh.icon = 'TrendingUpIcon'\n          xh.currency = this.formatCurrency(xh.amount, xh.denom)\n          sumCurrency += xh.currency\n          sum += Number(xh.amount)\n          return xh\n        }))\n      }\n      if (this.unbonding) {\n        let tmp1 = 0\n        this.unbonding.forEach(x => {\n          x.entries.forEach(e => {\n            tmp1 += Number(e.balance)\n          })\n        })\n        if (this.stakingParameters) stakingDenom = this.stakingParameters.bond_denom\n        const unbonding = this.formatCurrency(tmp1, stakingDenom)\n        sumCurrency += unbonding\n        sum += tmp1\n        total.push({\n          type: 'unbonding',\n          color: 'danger',\n          icon: 'TrendingDownIcon',\n          denom: stakingDenom,\n          amount: tmp1,\n          percent: 0,\n          currency: unbonding,\n        })\n      }\n      total = total.map(x => {\n        const xh = x\n        xh.percent = percent(Number(x.amount) / sum)\n        return xh\n      })\n      return {\n        items: total,\n        currency: parseFloat(sumCurrency.toFixed(2)),\n      }\n    },\n    chartData() {\n      const data = this.assetTable.items.reduce((t, c) => {\n        const th = t\n        if (t[c.type]) {\n          th[c.type] += Number(c.amount)\n        } else {\n          th[c.type] = Number(c.amount)\n        }\n        return th\n      }, [])\n      return {\n        datasets: [\n          {\n            labels: Object.keys(data),\n            data: Object.values(data),\n            backgroundColor: [$themeColors.success, $themeColors.primary, $themeColors.warning, $themeColors.danger, $themeColors.info],\n            borderWidth: 0,\n            pointStyle: 'rectRounded',\n          },\n        ],\n      }\n    },\n    deleTable() {\n      const re = []\n      if (this.reward.rewards && this.delegations && this.delegations.length > 0) {\n        this.delegations.forEach(e => {\n          const reward = this.reward.rewards.find(r => r.validator_address === e.delegation.validator_address)\n          re.push({\n            validator: getStakingValidatorOperator(this.$http.config.chain_name, e.delegation.validator_address, 8),\n            token: formatToken(e.balance, {}, 2),\n            reward: tokenFormatter(reward.reward, this.denoms),\n            action: e.delegation.validator_address,\n          })\n        })\n      }\n      return re\n    },\n    accTable() {\n      let table = {}\n      if (this.account && this.account.type === 'cosmos-sdk/PeriodicVestingAccount') {\n        table = this.account.value\n      }\n      return table\n    },\n    denoms() {\n      return this.$store.state.chains.denoms\n    },\n    isEthAddr() {\n      return JSON.stringify(this.account).indexOf('PubKeyEthSecp256k1') > 0\n    },\n  },\n  created() {\n    this.$http.getAuthAccount(this.address).then(acc => {\n      this.account = acc\n      this.initial()\n      this.$http.getTxsBySender(this.address).then(res => {\n        this.transactions = res\n      })\n      this.$http.getStakingParameters().then(res => {\n        this.stakingParameters = res\n      })\n    }).catch(err => {\n      this.error = err\n    })\n  },\n  mounted() {\n    const elem = document.getElementById('txevent')\n    elem.addEventListener('txcompleted', () => {\n      this.initial()\n    })\n  },\n  methods: {\n    initial() {\n      this.$http.getBankAccountBalance(this.address).then(bal => {\n        this.assets = bal\n        bal.forEach(x => {\n          const symbol = formatTokenDenom(x.denom)\n          if (!this.quotes[symbol] && symbol.indexOf('/') === -1) {\n            chainAPI.fetchTokenQuote(symbol).then(quote => {\n              this.$set(this.quotes, symbol, quote)\n            })\n          }\n        })\n      })\n      this.$http.getStakingReward(this.address).then(res => {\n        this.reward = res\n      })\n      this.$http.getStakingDelegations(this.address).then(res => {\n        this.delegations = res.delegation_responses || res\n      })\n      this.$http.getStakingUnbonding(this.address).then(res => {\n        this.unbonding = res.unbonding_responses || res\n      })\n    },\n    formatNumber(v) {\n      return numberWithCommas(v)\n    },\n    pageload(v) {\n      this.$http.getTxsBySender(this.address, v).then(res => {\n        this.transactions = res\n      })\n    },\n    selectValue(v, type) {\n      this.selectedValidator = v\n      this.setOperationModalType(type)\n    },\n    setOperationModalType(type) {\n      this.operationModalType = type\n    },\n    formatHash: abbrAddress,\n    formatDenom(v) {\n      return formatTokenDenom(this.denoms[v] ? this.denoms[v] : v)\n    },\n    formatAmount(v, dec = 2, denom = 'uatom', format = true) {\n      return formatTokenAmount(v, dec, denom, format)\n    },\n    formatToken(v) {\n      return tokenFormatter(v, this.denoms)\n    },\n    formatCurrency(amount, denom) {\n      const qty = this.formatAmount(amount, 2, denom, false)\n      const d2 = this.formatDenom(denom)\n      const userCurrency = getUserCurrency()\n      const quote = this.$store.state.chains.quotes[d2]\n      if (quote) {\n        const price = quote[userCurrency]\n        return parseFloat((qty * price).toFixed(2))\n      }\n      return 0\n    },\n    formatDate: v => dayjs(v).format('YYYY-MM-DD HH:mm:ss'),\n    formatTime: v => toDay(Number(v) * 1000),\n    formatLength: v => toDuration(Number(v) * 1000),\n    copy() {\n      this.$copyText(this.address).then(() => {\n        this.$toast({\n          component: ToastificationContent,\n          props: {\n            title: 'Address copied',\n            icon: 'BellIcon',\n          },\n        })\n      }, e => {\n        this.$toast({\n          component: ToastificationContent,\n          props: {\n            title: `Failed to copy address! ${e}`,\n            icon: 'BellIcon',\n            variant: 'danger',\n          },\n        })\n      })\n    },\n    ethaddress() {\n      return toETHAddress(this.address)\n    },\n  },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}