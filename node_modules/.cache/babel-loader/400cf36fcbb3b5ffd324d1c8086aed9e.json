{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.find.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BRow, BCol, VBTooltip, BCard, BAlert, BCardTitle, BFormCheckbox, BBadge } from 'bootstrap-vue';\nimport { getLocalChains, timeIn, toDay } from '@/libs/utils';\nimport { Bech32, toHex } from '@cosmjs/encoding';\nexport default {\n  name: 'Blocks',\n  components: {\n    BBadge: BBadge,\n    BRow: BRow,\n    BCol: BCol,\n    BCard: BCard,\n    BAlert: BAlert,\n    BCardTitle: BCardTitle,\n    BFormCheckbox: BFormCheckbox\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n  props: {\n    chain: {\n      type: String,\n      default: null\n    },\n    validators: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    var chains = getLocalChains();\n    var pinned = localStorage.getItem('pinned') ? localStorage.getItem('pinned').split(',') : '';\n    return {\n      pinned: pinned,\n      config: chains[this.chain],\n      missing: {},\n      blocks: Array.from('0'.repeat(50)).map(function (x) {\n        return {\n          sigs: {},\n          height: Number(x)\n        };\n      }),\n      syncing: false,\n      latestTime: '',\n      height: '-'\n    };\n  },\n  computed: {\n    uptime: function uptime() {\n      var vals = this.validators;\n      return vals;\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    this.initBlocks();\n    this.$http.getSlashingSigningInfo(this.config).then(function (res) {\n      if (res.info) {\n        res.info.forEach(function (x) {\n          if (x.address) {\n            var hex = toHex(Bech32.decode(x.address).data).toUpperCase();\n            _this.missing[hex] = x;\n          }\n        });\n      }\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.blocks = []; // clear running tasks if it is not finish\n\n    this.syncing = false;\n    clearInterval(this.timer);\n  },\n  methods: {\n    pinValidator: function pinValidator() {\n      localStorage.setItem('pinned', this.pinned);\n    },\n    initBlocks: function initBlocks() {\n      var _this2 = this;\n\n      this.$http.getLatestBlock(this.config).then(function (d) {\n        var height = d.block.last_commit.height;\n        _this2.height = height;\n\n        if (timeIn(d.block.header.time, 3, 'm')) {\n          _this2.syncing = true;\n        } else {\n          _this2.syncing = false;\n        }\n\n        _this2.latestTime = toDay(d.block.header.time, 'long');\n        var blocks = []; // update height\n\n        var promise = Promise.resolve();\n\n        var _loop = function _loop(i) {\n          blocks.unshift({\n            sigs: {},\n            height: i > 0 ? i : 0\n          });\n\n          if (i > height - 48 && i > 0) {\n            promise = promise.then(function () {\n              return new Promise(function (resolve) {\n                _this2.fetch_status(i, resolve);\n              });\n            });\n          }\n        };\n\n        for (var i = height - 1; i > height - 50; i -= 1) {\n          _loop(i);\n        }\n\n        var sigs = _this2.initColor();\n\n        d.block.last_commit.signatures.forEach(function (x) {\n          if (x.validator_address) sigs[x.validator_address] = 'bg-success';\n        });\n        blocks.push({\n          sigs: sigs,\n          height: height\n        });\n        _this2.blocks = blocks;\n        _this2.timer = setInterval(_this2.fetch_latest, 6000);\n      });\n    },\n    initColor: function initColor() {\n      var sigs = {};\n      this.validators.forEach(function (x) {\n        sigs[x.address] = 'bg-danger';\n      });\n      return sigs;\n    },\n    fetch_status: function fetch_status(height, resolve) {\n      var _this3 = this;\n\n      var block = this.blocks.find(function (b) {\n        return b.height === height;\n      });\n\n      if (block) {\n        this.$http.getBlockByHeight(height, this.config).then(function (res) {\n          resolve();\n\n          var sigs = _this3.initColor();\n\n          res.block.last_commit.signatures.forEach(function (x) {\n            if (x.validator_address) sigs[x.validator_address] = 'bg-success';\n          });\n\n          _this3.$set(block, 'sigs', sigs);\n        });\n      }\n    },\n    fetch_latest: function fetch_latest() {\n      var _this4 = this;\n\n      this.$http.getLatestBlock(this.config).then(function (res) {\n        var sigs = _this4.initColor();\n\n        res.block.last_commit.signatures.forEach(function (x) {\n          if (x.validator_address) sigs[x.validator_address] = 'bg-success';\n        });\n        _this4.height = res.block.last_commit.height;\n\n        var block = _this4.blocks.find(function (b) {\n          return b.height === res.block.last_commit.height;\n        });\n\n        if (typeof block === 'undefined') {\n          // mei\n          // this.$set(block, 0, typeof sigs !== 'undefined')\n          if (_this4.blocks.length >= 50) _this4.blocks.shift();\n\n          _this4.blocks.push({\n            sigs: sigs,\n            height: res.block.last_commit.height\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA,SACAA,IADA,EACAC,IADA,EACAC,SADA,EACAC,KADA,EACAC,MADA,EACAC,UADA,EACAC,aADA,EACAC,MADA,QAEA,eAFA;AAIA,SACAC,cADA,EACAC,MADA,EACAC,KADA,QAEA,cAFA;AAGA;AAEA;EACAC,cADA;EAEAC;IACAL,cADA;IAEAP,UAFA;IAGAC,UAHA;IAIAE,YAJA;IAKAC,cALA;IAMAC,sBANA;IAOAC;EAPA,CAFA;EAWAO;IACA;EADA,CAXA;EAcAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,WADA;MAEAC;QAAA;MAAA;IAFA;EALA,CAdA;EAwBAE,IAxBA,kBAwBA;IACA;IACA;IACA;MACAC,cADA;MAEAC,0BAFA;MAGAC,WAHA;MAIAC;QAAA;UAAAC;UAAAC;QAAA;MAAA,EAJA;MAKAC,cALA;MAMAC,cANA;MAOAF;IAPA;EASA,CApCA;EAqCAG;IACAC,MADA,oBACA;MACA;MACA;IACA;EAJA,CArCA;EA2CAC,OA3CA,qBA2CA;IAAA;;IACA;IACA;MACA;QACAC;UACA;YACA;YACA;UACA;QACA,CALA;MAMA;IACA,CATA;EAUA,CAvDA;EAwDAC,aAxDA,2BAwDA;IACA,iBADA,CACA;;IACA;IACAC;EACA,CA5DA;EA6DAC;IACAC,YADA,0BACA;MACAC;IACA,CAHA;IAIAC,UAJA,wBAIA;MAAA;;MACA;QACA;QACA;;QACA;UACA;QACA,CAFA,MAEA;UACA;QACA;;QACA;QACA,gBATA,CAUA;;QACA;;QAXA,2BAYAC,CAZA;UAaAf;YAAAC;YAAAC;UAAA;;UACA;YACAc;cAAA;gBACA;cACA,CAFA;YAAA;UAGA;QAlBA;;QAYA;UAAA;QAOA;;QAEA;;QACAC;UACA;QACA,CAFA;QAGAjB;UAAAC;UAAAC;QAAA;QACA;QAEA;MACA,CA7BA;IA8BA,CAnCA;IAoCAgB,SApCA,uBAoCA;MACA;MACA;QACAjB;MACA,CAFA;MAGA;IACA,CA1CA;IA2CAkB,YA3CA,wBA2CAjB,MA3CA,EA2CAkB,OA3CA,EA2CA;MAAA;;MACA;QAAA;MAAA;;MACA;QACA;UACAA;;UACA;;UACAZ;YACA;UACA,CAFA;;UAGA;QACA,CAPA;MAQA;IACA,CAvDA;IAwDAa,YAxDA,0BAwDA;MAAA;;MACA;QACA;;QACAb;UACA;QACA,CAFA;QAGA;;QACA;UAAA;QAAA;;QACA;UAAA;UACA;UACA;;UACA;YAAAP;YAAAC;UAAA;QACA;MACA,CAZA;IAaA;EAtEA;AA7DA","names":["BRow","BCol","VBTooltip","BCard","BAlert","BCardTitle","BFormCheckbox","BBadge","getLocalChains","timeIn","toDay","name","components","directives","props","chain","type","default","validators","data","pinned","config","missing","blocks","sigs","height","syncing","latestTime","computed","uptime","created","res","beforeDestroy","clearInterval","methods","pinValidator","localStorage","initBlocks","i","promise","d","initColor","fetch_status","resolve","fetch_latest"],"sourceRoot":"src/views","sources":["UptimeMyChainBlocks.vue"],"sourcesContent":["<template>\n  <div class=\"px-0\">\n    <b-card>\n      <b-card-title class=\"d-flex justify-content-between\">\n        <span class=\"text-uppercase\"> {{ chain }} </span><small class=\"text-right\"> Height: {{ height }} </small>\n      </b-card-title>\n      <b-alert\n        variant=\"danger\"\n        :show=\"syncing\"\n      >\n        <div class=\"alert-body\">\n          <span>No new blocks have been produced since  <strong>{{ latestTime }}</strong> </span>\n        </div>\n      </b-alert>\n      <b-row>\n        <span\n          v-if=\"uptime.length===0\"\n          class=\"text-danger\"\n        > Your node is out of active validator set</span>\n        <b-col\n          v-for=\"(x,index) in uptime\"\n          :key=\"index\"\n          sm=\"12\"\n          class=\"text-truncate\"\n        >\n          <div class=\"d-flex justify-content-between\">\n            <b-form-checkbox\n              v-model=\"pinned\"\n              :value=\"`${chain}#${x.address}`\"\n              class=\"custom-control-warning\"\n              @change=\"pinValidator(`${chain}#${x.address}`)\"\n            >\n              <span class=\"d-inline-block text-truncate font-weight-bold align-bottom\"> {{ x.validator.moniker }} </span>\n            </b-form-checkbox>\n            <span\n              v-if=\"missing[x.address]\"\n            >\n              <b-badge\n                v-if=\"missing[x.address].missed_blocks_counter > 0\"\n                v-b-tooltip.hover.v-danger\n                variant=\"light-danger\"\n                :title=\"`${missing[x.address].missed_blocks_counter} missed blocks`\"\n                class=\"text-danger text-bolder\"\n              >\n                {{ missing[x.address].missed_blocks_counter }}\n              </b-badge>\n              <b-badge\n                v-else\n                v-b-tooltip.hover.v-success\n                variant=\"light-success\"\n                title=\"Perfect! No missed blocks\"\n              >\n                0\n              </b-badge>\n            </span>\n          </div>\n          <div class=\"d-flex justify-content-between align-self-stretch flex-wrap\">\n            <div\n              v-for=\"(b,i) in blocks\"\n              :key=\"i\"\n              style=\"width:1.5%;\"\n            ><router-link :to=\"`./blocks/${b.height}`\">\n              <div\n                v-b-tooltip.hover.v-second\n                :title=\"b.height\"\n                :class=\"b.sigs && b.sigs[x.address] ? b.sigs[x.address] : 'bg-light-success'\"\n                class=\"m-auto\"\n              >&nbsp;</div>\n            </router-link>\n            </div>\n          </div>\n        </b-col>\n      </b-row>\n    </b-card>\n  </div>\n</template>\n\n<script>\nimport {\n  BRow, BCol, VBTooltip, BCard, BAlert, BCardTitle, BFormCheckbox, BBadge,\n} from 'bootstrap-vue'\n\nimport {\n  getLocalChains, timeIn, toDay,\n} from '@/libs/utils'\nimport { Bech32, toHex } from '@cosmjs/encoding'\n\nexport default {\n  name: 'Blocks',\n  components: {\n    BBadge,\n    BRow,\n    BCol,\n    BCard,\n    BAlert,\n    BCardTitle,\n    BFormCheckbox,\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n  },\n  props: {\n    chain: {\n      type: String,\n      default: null,\n    },\n    validators: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    const chains = getLocalChains()\n    const pinned = localStorage.getItem('pinned') ? localStorage.getItem('pinned').split(',') : ''\n    return {\n      pinned,\n      config: chains[this.chain],\n      missing: {},\n      blocks: Array.from('0'.repeat(50)).map(x => ({ sigs: {}, height: Number(x) })),\n      syncing: false,\n      latestTime: '',\n      height: '-',\n    }\n  },\n  computed: {\n    uptime() {\n      const vals = this.validators\n      return vals\n    },\n  },\n  created() {\n    this.initBlocks()\n    this.$http.getSlashingSigningInfo(this.config).then(res => {\n      if (res.info) {\n        res.info.forEach(x => {\n          if (x.address) {\n            const hex = toHex(Bech32.decode(x.address).data).toUpperCase()\n            this.missing[hex] = x\n          }\n        })\n      }\n    })\n  },\n  beforeDestroy() {\n    this.blocks = [] // clear running tasks if it is not finish\n    this.syncing = false\n    clearInterval(this.timer)\n  },\n  methods: {\n    pinValidator() {\n      localStorage.setItem('pinned', this.pinned)\n    },\n    initBlocks() {\n      this.$http.getLatestBlock(this.config).then(d => {\n        const { height } = d.block.last_commit\n        this.height = height\n        if (timeIn(d.block.header.time, 3, 'm')) {\n          this.syncing = true\n        } else {\n          this.syncing = false\n        }\n        this.latestTime = toDay(d.block.header.time, 'long')\n        const blocks = []\n        // update height\n        let promise = Promise.resolve()\n        for (let i = height - 1; i > height - 50; i -= 1) {\n          blocks.unshift({ sigs: {}, height: i > 0 ? i : 0 })\n          if (i > height - 48 && i > 0) {\n            promise = promise.then(() => new Promise(resolve => {\n              this.fetch_status(i, resolve)\n            }))\n          }\n        }\n\n        const sigs = this.initColor()\n        d.block.last_commit.signatures.forEach(x => {\n          if (x.validator_address) sigs[x.validator_address] = 'bg-success'\n        })\n        blocks.push({ sigs, height })\n        this.blocks = blocks\n\n        this.timer = setInterval(this.fetch_latest, 6000)\n      })\n    },\n    initColor() {\n      const sigs = {}\n      this.validators.forEach(x => {\n        sigs[x.address] = 'bg-danger'\n      })\n      return sigs\n    },\n    fetch_status(height, resolve) {\n      const block = this.blocks.find(b => b.height === height)\n      if (block) {\n        this.$http.getBlockByHeight(height, this.config).then(res => {\n          resolve()\n          const sigs = this.initColor()\n          res.block.last_commit.signatures.forEach(x => {\n            if (x.validator_address) sigs[x.validator_address] = 'bg-success'\n          })\n          this.$set(block, 'sigs', sigs)\n        })\n      }\n    },\n    fetch_latest() {\n      this.$http.getLatestBlock(this.config).then(res => {\n        const sigs = this.initColor()\n        res.block.last_commit.signatures.forEach(x => {\n          if (x.validator_address) sigs[x.validator_address] = 'bg-success'\n        })\n        this.height = res.block.last_commit.height\n        const block = this.blocks.find(b => b.height === res.block.last_commit.height)\n        if (typeof block === 'undefined') { // mei\n          // this.$set(block, 0, typeof sigs !== 'undefined')\n          if (this.blocks.length >= 50) this.blocks.shift()\n          this.blocks.push({ sigs, height: res.block.last_commit.height })\n        }\n      })\n    },\n  },\n}\n</script>\n\n<style></style>\n"]},"metadata":{},"sourceType":"module"}