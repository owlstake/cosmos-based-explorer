{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BTable, BMedia, BAvatar, BBadge, BCard, BCardHeader, BCardTitle, VBTooltip, BCardBody, BButton, BFormRadioGroup, BFormGroup, BCardFooter } from 'bootstrap-vue';\nimport { percent, StakingParameters, formatToken } from '@/libs/utils';\nimport { keybase } from '@/libs/fetch';\nimport OperationModal from '@/views/components/OperationModal/index.vue'; // import { toHex } from '@cosmjs/encoding'\n// import fetch from 'node-fetch'\n\nexport default {\n  components: {\n    BCard: BCard,\n    BTable: BTable,\n    BMedia: BMedia,\n    BAvatar: BAvatar,\n    BBadge: BBadge,\n    BCardHeader: BCardHeader,\n    BCardTitle: BCardTitle,\n    BCardBody: BCardBody,\n    BButton: BButton,\n    BFormRadioGroup: BFormRadioGroup,\n    BFormGroup: BFormGroup,\n    BCardFooter: BCardFooter,\n    OperationModal: OperationModal\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n  data: function data() {\n    return {\n      islive: true,\n      validator_address: null,\n      mintInflation: 0,\n      stakingPool: 1,\n      stakingParameters: new StakingParameters(),\n      validators: [],\n      delegations: [],\n      changes: {},\n      latestPower: {},\n      previousPower: {},\n      validator_fields: [{\n        key: 'index',\n        label: '#',\n        tdClass: 'd-none d-md-block',\n        thClass: 'd-none d-md-block'\n      }, {\n        key: 'description',\n        label: 'Validator'\n      }, {\n        key: 'tokens',\n        label: 'Voting Power',\n        sortable: true,\n        tdClass: 'text-right',\n        thClass: 'text-right',\n        sortByFormatted: true\n      }, {\n        key: 'changes',\n        label: '24H Changes'\n      }, {\n        key: 'commission',\n        formatter: function formatter(value) {\n          return \"\".concat(percent(value.rate), \"%\");\n        },\n        tdClass: 'text-right',\n        thClass: 'text-right'\n      }, {\n        key: 'operation',\n        label: '',\n        tdClass: 'text-right',\n        thClass: 'text-right'\n      }],\n      statusOptions: [{\n        text: 'Active',\n        value: 'active'\n      }, {\n        text: 'Inactive',\n        value: 'inactive'\n      }],\n      selectedStatus: 'active',\n      isInactiveLoaded: false,\n      inactiveValidators: []\n    };\n  },\n  computed: {\n    pingVals: function pingVals() {\n      return this.list.filter(function (x) {\n        return x.description.identity === '6783E9F948541962';\n      });\n    },\n    list: function list() {\n      var _this = this;\n\n      var tab = this.selectedStatus === 'active' ? this.validators : this.inactiveValidators;\n      return tab.map(function (x) {\n        var xh = x;\n\n        if (Object.keys(_this.latestPower).length > 0 && Object.keys(_this.previousPower).length > 0) {\n          var latest = _this.latestPower[x.consensus_pubkey.value] || 0;\n          var previous = _this.previousPower[x.consensus_pubkey.value] || 0;\n          xh.changes = latest - previous;\n        }\n\n        return xh;\n      });\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n\n    this.$http.getStakingPool().then(function (pool) {\n      _this2.stakingPool = pool.bondedToken;\n    }); // set\n\n    this.$http.getStakingParameters().then(function (res) {\n      _this2.stakingParameters = res;\n    });\n    this.initial();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.islive = false;\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    var elem = document.getElementById('txevent');\n    elem.addEventListener('txcompleted', function () {\n      _this3.initial();\n    });\n  },\n  methods: {\n    initial: function initial() {\n      var _this4 = this;\n\n      this.$http.getValidatorList().then(function (res) {\n        var identities = [];\n        var temp = res;\n\n        for (var i = 0; i < temp.length; i += 1) {\n          var identity = temp[i].description.identity;\n\n          var url = _this4.$store.getters['chains/getAvatarById'](identity);\n\n          if (url) {\n            temp[i].avatar = url;\n          } else if (identity && identity !== '') {\n            identities.push(identity);\n          }\n        } // fetch avatar from keybase\n\n\n        var promise = Promise.resolve();\n        identities.forEach(function (item) {\n          promise = promise.then(function () {\n            return new Promise(function (resolve) {\n              _this4.avatar(item, resolve);\n            });\n          });\n        });\n        _this4.validators = temp;\n\n        _this4.getPreviousPower(_this4.validators.length);\n      });\n    },\n    getPreviousPower: function getPreviousPower(length) {\n      var _this5 = this;\n\n      this.$http.getValidatorListByHeight('latest', 0).then(function (data) {\n        var height = Number(data.block_height);\n\n        if (height > 14400) {\n          height -= 14400;\n        } else {\n          height = 1;\n        }\n\n        data.validators.forEach(function (x) {\n          _this5.$set(_this5.latestPower, x.pub_key.key, Number(x.voting_power));\n        });\n\n        for (var offset = 100; offset < length; offset += 100) {\n          _this5.$http.getValidatorListByHeight('latest', offset).then(function (latest) {\n            latest.validators.forEach(function (x) {\n              _this5.$set(_this5.latestPower, x.pub_key.key, Number(x.voting_power));\n            });\n          });\n        }\n\n        for (var _offset = 0; _offset < length; _offset += 100) {\n          _this5.$http.getValidatorListByHeight(height, _offset).then(function (previous) {\n            previous.validators.forEach(function (x) {\n              _this5.$set(_this5.previousPower, x.pub_key.key, Number(x.voting_power));\n            });\n          });\n        }\n      });\n    },\n    getValidatorListByStatus: function getValidatorListByStatus() {\n      var _this6 = this;\n\n      if (this.isInactiveLoaded) return;\n      var statusList = ['BOND_STATUS_UNBONDED', 'BOND_STATUS_UNBONDING'];\n      statusList.forEach(function (status) {\n        _this6.$http.getValidatorListByStatus(status).then(function (res) {\n          var identities = [];\n          var temp = res;\n\n          for (var i = 0; i < temp.length; i += 1) {\n            var identity = temp[i].description.identity;\n\n            var url = _this6.$store.getters['chains/getAvatarById'](identity);\n\n            if (url) {\n              temp[i].avatar = url;\n            } else if (identity && identity !== '') {\n              identities.push(identity);\n            }\n          } // fetch avatar from keybase\n\n\n          var promise = Promise.resolve();\n          identities.forEach(function (item) {\n            promise = promise.then(function () {\n              return new Promise(function (resolve) {\n                _this6.avatar(item, resolve);\n              });\n            });\n          });\n          _this6.inactiveValidators = _this6.inactiveValidators.concat(res);\n        });\n      });\n      this.isInactiveLoaded = true;\n    },\n    selectValidator: function selectValidator(da) {\n      this.validator_address = da;\n    },\n    percent: percent,\n    tokenFormatter: function tokenFormatter(amount, denom) {\n      return formatToken({\n        amount: amount,\n        denom: denom\n      }, {}, 0);\n    },\n    rankBadge: function rankBadge(data) {\n      if (this.selectedStatus === 'inactive') return 'primary';\n      var index = data.index,\n          item = data.item;\n\n      if (index === 0) {\n        window.sum = item.tokens;\n      } else {\n        window.sum += item.tokens;\n      }\n\n      var rank = window.sum / this.stakingPool;\n\n      if (rank < 0.333) {\n        return 'danger';\n      }\n\n      if (rank < 0.67) {\n        return 'warning';\n      }\n\n      return 'primary';\n    },\n    avatar: function avatar(identity, resolve) {\n      var _this7 = this;\n\n      if (this.islive) {\n        keybase(identity).then(function (d) {\n          resolve();\n\n          if (Array.isArray(d.them) && d.them.length > 0) {\n            var pic = d.them[0].pictures;\n\n            if (pic) {\n              var list = _this7.selectedStatus === 'active' ? _this7.validators : _this7.inactiveValidators;\n              var validator = list.find(function (u) {\n                return u.description.identity === identity;\n              });\n\n              _this7.$set(validator, 'avatar', pic.primary.url);\n\n              _this7.$store.commit('cacheAvatar', {\n                identity: identity,\n                url: pic.primary.url\n              });\n            }\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["BTable","BMedia","BAvatar","BBadge","BCard","BCardHeader","BCardTitle","VBTooltip","BCardBody","BButton","BFormRadioGroup","BFormGroup","BCardFooter","percent","StakingParameters","formatToken","components","OperationModal","directives","data","islive","validator_address","mintInflation","stakingPool","stakingParameters","validators","delegations","changes","latestPower","previousPower","validator_fields","key","label","tdClass","thClass","sortable","sortByFormatted","formatter","statusOptions","text","value","selectedStatus","isInactiveLoaded","inactiveValidators","computed","pingVals","list","xh","created","beforeDestroy","mounted","elem","methods","initial","temp","identities","promise","getPreviousPower","length","height","latest","previous","getValidatorListByStatus","statusList","selectValidator","da","tokenFormatter","amount","denom","rankBadge","window","avatar","identity","resolve","keybase","url"],"sourceRoot":"src/views","sources":["Staking.vue"],"sourcesContent":["<template>\n  <div>\n    <b-card\n      v-if=\"pingVals && pingVals.length > 0\"\n      title=\"❤️ Helping owlstake By Staking ❤️\"\n      class=\"overflow-auto\"\n    >\n      <b-table\n        :items=\"pingVals\"\n        :fields=\"validator_fields\"\n        :sort-desc=\"true\"\n        sort-by=\"tokens\"\n        striped\n        hover\n        responsive=\"sm\"\n      >\n        <!-- A virtual column -->\n        <template #cell(index)=\"data\">\n          {{ data.index + 1 }}\n        </template>\n        <!-- Column: Validator -->\n        <template #cell(description)=\"data\">\n          <b-media\n            vertical-align=\"center\"\n            class=\"text-truncate\"\n            style=\"max-width:320px;\"\n          >\n            <template #aside>\n              <b-avatar\n                v-if=\"data.item.avatar\"\n                v-b-tooltip.hover.v-primary\n                v-b-tooltip.hover.right=\"data.item.description.details\"\n                size=\"32\"\n                variant=\"light-primary\"\n                :src=\"data.item.avatar\"\n              />\n              <b-avatar\n                v-if=\"!data.item.avatar\"\n                v-b-tooltip.hover.v-primary\n                v-b-tooltip.hover.right=\"data.item.description.details\"\n              >\n                <feather-icon icon=\"ServerIcon\" />\n              </b-avatar>\n            </template>\n            <span class=\"font-weight-bolder d-block text-nowrap\">\n              <router-link\n                :to=\"`./staking/${data.item.operator_address}`\"\n              >\n                {{ data.item.description.moniker }}\n              </router-link>\n            </span>\n            <small\n              class=\"text-muted\"\n            >{{ data.item.description.website || data.item.description.identity }}</small>\n          </b-media>\n        </template>\n        <!-- Token -->\n        <template #cell(tokens)=\"data\">\n          <div\n            v-if=\"data.item.tokens > 0\"\n            class=\"d-flex flex-column\"\n          >\n            <span class=\"font-weight-bold mb-0\">{{ tokenFormatter(data.item.tokens, stakingParameters.bond_denom) }}</span>\n            <span class=\"font-small-2 text-muted text-nowrap d-none d-lg-block\">{{ percent(data.item.tokens/stakingPool) }}%</span>\n          </div>\n          <span v-else>{{ data.item.delegator_shares }}</span>\n        </template>\n        <!-- Token -->\n        <template #cell(changes)=\"data\">\n          <small\n            v-if=\"data.item.changes>0\"\n            class=\"text-success\"\n          >+{{ data.item.changes }}</small>\n          <small v-else-if=\"data.item.changes===0\">-</small>\n          <small\n            v-else\n            class=\"text-danger\"\n          >{{ data.item.changes }}</small>\n        </template>\n        <template #cell(operation)=\"data\">\n          <b-button\n            v-b-modal.operation-modal\n            :name=\"data.item.operator_address\"\n            variant=\"primary\"\n            size=\"sm\"\n            @click=\"selectValidator(data.item.operator_address)\"\n          >\n            Delegate\n          </b-button>\n        </template>\n      </b-table>\n    </b-card>\n    <b-card\n      no-body\n      class=\"overflow-auto\"\n    >\n      <b-card-header class=\"d-flex justify-content-between\">\n        <b-form-group class=\"mb-0\">\n          <b-form-radio-group\n            id=\"btn-radios-1\"\n            v-model=\"selectedStatus\"\n            button-variant=\"outline-primary\"\n            :options=\"statusOptions\"\n            buttons\n            name=\"radios-btn-default\"\n            @change=\"getValidatorListByStatus\"\n          />\n        </b-form-group>\n        <b-card-title class=\"d-none d-sm-block\">\n          <span>Validators {{ validators.length }}/{{ stakingParameters.max_validators }} </span>\n        </b-card-title>\n      </b-card-header>\n      <b-card-body class=\"pl-0 pr-0 pb-0\">\n        <b-table\n          class=\"mb-0\"\n          :items=\"list\"\n          :fields=\"validator_fields\"\n          :sort-desc=\"true\"\n          sort-by=\"tokens\"\n          striped\n          hover\n          responsive=\"sm\"\n        >\n          <!-- A virtual column -->\n          <template #cell(index)=\"data\">\n            <b-badge :variant=\"rankBadge(data)\">\n              {{ data.index + 1 }}\n            </b-badge>\n          </template>\n          <!-- Column: Validator -->\n          <template #cell(description)=\"data\">\n            <b-media\n              vertical-align=\"center\"\n              class=\"text-truncate\"\n              style=\"max-width:320px;\"\n            >\n              <template #aside>\n                <b-avatar\n                  v-if=\"data.item.avatar\"\n                  v-b-tooltip.hover.v-primary\n                  v-b-tooltip.hover.right=\"data.item.description.details\"\n                  size=\"32\"\n                  variant=\"light-primary\"\n                  :src=\"data.item.avatar\"\n                />\n                <b-avatar\n                  v-if=\"!data.item.avatar\"\n                  v-b-tooltip.hover.v-primary\n                  v-b-tooltip.hover.right=\"data.item.description.details\"\n                >\n                  <feather-icon icon=\"ServerIcon\" />\n                </b-avatar>\n              </template>\n              <span class=\"font-weight-bolder d-block text-nowrap\">\n                <router-link\n                  :to=\"`./staking/${data.item.operator_address}`\"\n                >\n                  {{ data.item.description.moniker }}\n                </router-link>\n              </span>\n              <small\n                class=\"text-muted\"\n              >{{ data.item.description.website || data.item.description.identity }}</small>\n            </b-media>\n          </template>\n          <!-- Token -->\n          <template #cell(tokens)=\"data\">\n            <div\n              v-if=\"data.item.tokens > 0\"\n              class=\"d-flex flex-column\"\n            >\n              <span class=\"font-weight-bold mb-0\">{{ tokenFormatter(data.item.tokens, stakingParameters.bond_denom) }}</span>\n              <span class=\"font-small-2 text-muted text-nowrap d-none d-lg-block\">{{ percent(data.item.tokens/stakingPool) }}%</span>\n            </div>\n            <span v-else>{{ data.item.delegator_shares }}</span>\n          </template>\n          <!-- Token -->\n          <template #cell(changes)=\"data\">\n            <small\n              v-if=\"data.item.changes>0\"\n              class=\"text-success\"\n            >+{{ data.item.changes }}</small>\n            <small v-else-if=\"data.item.changes===0\">-</small>\n            <small\n              v-else\n              class=\"text-danger\"\n            >{{ data.item.changes }}</small>\n          </template>\n          <template #cell(operation)=\"data\">\n            <b-button\n              v-b-modal.operation-modal\n              :name=\"data.item.operator_address\"\n              variant=\"primary\"\n              size=\"sm\"\n              @click=\"selectValidator(data.item.operator_address)\"\n            >\n              Delegate\n            </b-button>\n          </template>\n        </b-table>\n      </b-card-body>\n      <b-card-footer class=\"d-none d-md-block\">\n        <small>\n          <b-badge variant=\"danger\">\n              &nbsp;\n          </b-badge>\n          Top 33%\n          <b-badge variant=\"warning\">\n              &nbsp;\n          </b-badge>\n          Top 67% of Voting Power\n        </small>\n      </b-card-footer>\n    </b-card>\n    <operation-modal\n      type=\"Delegate\"\n      :validator-address=\"validator_address\"\n    />\n    <div id=\"txevent\" />\n  </div>\n</template>\n\n<script>\nimport {\n  BTable, BMedia, BAvatar, BBadge, BCard, BCardHeader, BCardTitle, VBTooltip, BCardBody, BButton, BFormRadioGroup, BFormGroup,\n  BCardFooter,\n} from 'bootstrap-vue'\nimport {\n  percent, StakingParameters, formatToken,\n} from '@/libs/utils'\nimport { keybase } from '@/libs/fetch'\nimport OperationModal from '@/views/components/OperationModal/index.vue'\n// import { toHex } from '@cosmjs/encoding'\n// import fetch from 'node-fetch'\n\nexport default {\n  components: {\n    BCard,\n    BTable,\n    BMedia,\n    BAvatar,\n    BBadge,\n    BCardHeader,\n    BCardTitle,\n    BCardBody,\n    BButton,\n    BFormRadioGroup,\n    BFormGroup,\n    BCardFooter,\n    OperationModal,\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n  },\n  data() {\n    return {\n      islive: true,\n      validator_address: null,\n      mintInflation: 0,\n      stakingPool: 1,\n      stakingParameters: new StakingParameters(),\n      validators: [],\n      delegations: [],\n      changes: {},\n      latestPower: {},\n      previousPower: {},\n      validator_fields: [\n        {\n          key: 'index',\n          label: '#',\n          tdClass: 'd-none d-md-block',\n          thClass: 'd-none d-md-block',\n        },\n        { key: 'description', label: 'Validator' },\n        {\n          key: 'tokens',\n          label: 'Voting Power',\n          sortable: true,\n          tdClass: 'text-right',\n          thClass: 'text-right',\n          sortByFormatted: true,\n        },\n        {\n          key: 'changes',\n          label: '24H Changes',\n        },\n        {\n          key: 'commission',\n          formatter: value => `${percent(value.rate)}%`,\n          tdClass: 'text-right',\n          thClass: 'text-right',\n        },\n        {\n          key: 'operation',\n          label: '',\n          tdClass: 'text-right',\n          thClass: 'text-right',\n        },\n      ],\n      statusOptions: [\n        { text: 'Active', value: 'active' },\n        { text: 'Inactive', value: 'inactive' },\n      ],\n      selectedStatus: 'active',\n      isInactiveLoaded: false,\n      inactiveValidators: [],\n    }\n  },\n  computed: {\n    pingVals() {\n      return this.list.filter(x => x.description.identity === '6783E9F948541962')\n    },\n    list() {\n      const tab = this.selectedStatus === 'active' ? this.validators : this.inactiveValidators\n      return tab.map(x => {\n        const xh = x\n        if (Object.keys(this.latestPower).length > 0 && Object.keys(this.previousPower).length > 0) {\n          const latest = this.latestPower[x.consensus_pubkey.value] || 0\n          const previous = this.previousPower[x.consensus_pubkey.value] || 0\n          xh.changes = latest - previous\n        }\n        return xh\n      })\n    },\n  },\n  created() {\n    this.$http.getStakingPool().then(pool => {\n      this.stakingPool = pool.bondedToken\n    })\n    // set\n    this.$http.getStakingParameters().then(res => {\n      this.stakingParameters = res\n    })\n    this.initial()\n  },\n  beforeDestroy() {\n    this.islive = false\n  },\n  mounted() {\n    const elem = document.getElementById('txevent')\n    elem.addEventListener('txcompleted', () => {\n      this.initial()\n    })\n  },\n  methods: {\n    initial() {\n      this.$http.getValidatorList().then(res => {\n        const identities = []\n        const temp = res\n        for (let i = 0; i < temp.length; i += 1) {\n          const { identity } = temp[i].description\n          const url = this.$store.getters['chains/getAvatarById'](identity)\n          if (url) {\n            temp[i].avatar = url\n          } else if (identity && identity !== '') {\n            identities.push(identity)\n          }\n        }\n\n        // fetch avatar from keybase\n        let promise = Promise.resolve()\n        identities.forEach(item => {\n          promise = promise.then(() => new Promise(resolve => {\n            this.avatar(item, resolve)\n          }))\n        })\n        this.validators = temp\n        this.getPreviousPower(this.validators.length)\n      })\n    },\n    getPreviousPower(length) {\n      this.$http.getValidatorListByHeight('latest', 0).then(data => {\n        let height = Number(data.block_height)\n        if (height > 14400) {\n          height -= 14400\n        } else {\n          height = 1\n        }\n        data.validators.forEach(x => {\n          this.$set(this.latestPower, x.pub_key.key, Number(x.voting_power))\n        })\n        for (let offset = 100; offset < length; offset += 100) {\n          this.$http.getValidatorListByHeight('latest', offset).then(latest => {\n            latest.validators.forEach(x => {\n              this.$set(this.latestPower, x.pub_key.key, Number(x.voting_power))\n            })\n          })\n        }\n        for (let offset = 0; offset < length; offset += 100) {\n          this.$http.getValidatorListByHeight(height, offset).then(previous => {\n            previous.validators.forEach(x => {\n              this.$set(this.previousPower, x.pub_key.key, Number(x.voting_power))\n            })\n          })\n        }\n      })\n    },\n    getValidatorListByStatus() {\n      if (this.isInactiveLoaded) return\n      const statusList = ['BOND_STATUS_UNBONDED', 'BOND_STATUS_UNBONDING']\n      statusList.forEach(status => {\n        this.$http.getValidatorListByStatus(status).then(res => {\n          const identities = []\n          const temp = res\n          for (let i = 0; i < temp.length; i += 1) {\n            const { identity } = temp[i].description\n            const url = this.$store.getters['chains/getAvatarById'](identity)\n            if (url) {\n              temp[i].avatar = url\n            } else if (identity && identity !== '') {\n              identities.push(identity)\n            }\n          }\n\n          // fetch avatar from keybase\n          let promise = Promise.resolve()\n          identities.forEach(item => {\n            promise = promise.then(() => new Promise(resolve => {\n              this.avatar(item, resolve)\n            }))\n          })\n          this.inactiveValidators = this.inactiveValidators.concat(res)\n        })\n      })\n      this.isInactiveLoaded = true\n    },\n    selectValidator(da) {\n      this.validator_address = da\n    },\n    percent,\n    tokenFormatter(amount, denom) {\n      return formatToken({ amount, denom }, {}, 0)\n    },\n    rankBadge(data) {\n      if (this.selectedStatus === 'inactive') return 'primary'\n      const { index, item } = data\n      if (index === 0) {\n        window.sum = item.tokens\n      } else {\n        window.sum += item.tokens\n      }\n      const rank = window.sum / this.stakingPool\n      if (rank < 0.333) {\n        return 'danger'\n      }\n      if (rank < 0.67) {\n        return 'warning'\n      }\n      return 'primary'\n    },\n    avatar(identity, resolve) {\n      if (this.islive) {\n        keybase(identity).then(d => {\n          resolve()\n          if (Array.isArray(d.them) && d.them.length > 0) {\n            const pic = d.them[0].pictures\n            if (pic) {\n              const list = this.selectedStatus === 'active' ? this.validators : this.inactiveValidators\n              const validator = list.find(u => u.description.identity === identity)\n              this.$set(validator, 'avatar', pic.primary.url)\n              this.$store.commit('cacheAvatar', { identity, url: pic.primary.url })\n            }\n          }\n        })\n      }\n    },\n  },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}